OUTPUTS â€“ TASK 3

12.5)

a.	Is John a child or adult? adult(John)


============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 9695 was started by rinkleseth on Rinkles-MacBook-Pro.local,
Sun Apr 26 00:46:26 2020
The command was "/Users/rinkleseth/Downloads/LADR-2009-11A/bin/prover9 -f /Users/rinkleseth/Desktop/spring2020/AI/project/input.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /Users/rinkleseth/Desktop/spring2020/AI/project/input.in


formulas(sos).
(all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))).
(all x (supermarket(x) -> shop(x))).
(all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))).
(all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))).
(all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))).
(all x (customer(x) -> get(x,receipt))).
(all x ((all y supermarket(x)) & item(y) -> deliver(x,y))).
(all x ((exists y shop(x)) & item(y) -> sells(x,y))).
(all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))).
(all x (customer(x) -> adult(x))).
(all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))).
(all x (people(x) & works(x) -> employee(x))).
(all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))).
(all x (fooditem(x) -> item(x))).
(all x (personalitem(x) -> item(x))).
deodorant(D).
(all x (deodorant(x) -> personalitem(x))).
tomato(T).
beef(B).
(all x (beef(x) -> meat(x))).
(all x (lamb(x) -> meat(x))).
(all x (pork(x) -> meat(x))).
(all x (sausage(x) -> meat(x))).
(all x (stew_meat(x) -> meat(x))).
(all x (halal(x) -> meat(x))).
(all x (meat(x) -> fooditem(x))).
(all x (person(x) -> people(x))).
(all x ((all y supermarket(x)) & item(y) -> -make(x,y))).
person(John).
bought(John,T,Safeway,t).
weight(T,2).
weight(B,1).
bought(John,B,Safeway,t).
person(Mary).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))).
money(card).
money(cash).
isa(creditcard,card).
supermarket(Safeway).
supermarket(NBS).
isa(NBS,Safeway).
locatedAt(Safeway,NorthBerkeley).
time(t).
measure(Pound).
measure(Ounce).
measure(Kilogram).
(all x (fooditem(x) & weight(x,1) -> unit(x))).
(all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))).
(all x (tomato(x) -> piecesPerPound(x,5))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))).
(all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))).
(all x (meat(x) -> animalproduct(x))).
(all x (fish(x) -> animalproduct(x))).
(all x (egg(x) -> animalproduct(x))).
(all x (animalproduct(x) -> fooditem(x))).
(all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))).
(all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))).
(all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))).
(all x (groundbeef(x) -> beef(x))).
gas(G).
(all x (gas(x) & sells(Shell,x))).
(all x (adult(x) -> -child(x))).
(all x (child(x) -> -adult(x))).
(all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))).
hasSize(carTrunk,600).
(all x (milk(x) -> dairyproduct(x))).
(all x (cheese(x) -> dairyproduct(x))).
(all x (butter(x) -> dairyproduct(x))).
(all x (fish(x) -> meat(x))).
(all x (vegetable(x) -> fooditem(x))).
(all x (tomato(x) -> vegetable(x))).
(all x (cabbage(x) -> vegetable(x))).
(all x (broccoli(x) -> vegetable(x))).
(all x (potato(x) -> vegetable(x))).
(all x (onion(x) -> vegetable(x))).
(all x (juice(x) -> beverage(x))).
(all x (soda(x) -> beverage(x))).
(all x (alcohol(x) -> beverage(x))).
(all x (water(x) -> beverage(x))).
(all x (tea(x) -> beverage(x))).
(all x (coffee(x) -> beverage(x))).
(all x (fruit(x) -> fooditem(x))).
(all x (apple(x) -> fruit(x))).
(all x (mango(x) -> fruit(x))).
(all x (banana(x) -> fruit(x))).
(all x (strawberry(x) -> fruit(x))).
(all x (pineapple(x) -> fruit(x))).
(all x (lotion(x) -> personalitem(x))).
(all x (hairspray(x) -> personalitem(x))).
(all x (shavingcream(x) -> personalitem(x))).
(all x (cosmetic(x) -> personalitem(x))).
(all x (toothbrush(x) -> personalitem(x))).
(all x (bodywash(x) -> personalitem(x))).
(all x (soap(x) -> personalitem(x))).
end_of_list.

formulas(goals).
adult(John).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))) # label(non_clause).  [assumption].
2 (all x (supermarket(x) -> shop(x))) # label(non_clause).  [assumption].
3 (all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))) # label(non_clause).  [assumption].
4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
6 (all x (customer(x) -> get(x,receipt))) # label(non_clause).  [assumption].
7 (all x ((all y supermarket(x)) & item(y) -> deliver(x,y))) # label(non_clause).  [assumption].
8 (all x ((exists y shop(x)) & item(y) -> sells(x,y))) # label(non_clause).  [assumption].
9 (all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))) # label(non_clause).  [assumption].
10 (all x (customer(x) -> adult(x))) # label(non_clause).  [assumption].
11 (all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))) # label(non_clause).  [assumption].
12 (all x (people(x) & works(x) -> employee(x))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
14 (all x (fooditem(x) -> item(x))) # label(non_clause).  [assumption].
15 (all x (personalitem(x) -> item(x))) # label(non_clause).  [assumption].
16 (all x (deodorant(x) -> personalitem(x))) # label(non_clause).  [assumption].
17 (all x (beef(x) -> meat(x))) # label(non_clause).  [assumption].
18 (all x (lamb(x) -> meat(x))) # label(non_clause).  [assumption].
19 (all x (pork(x) -> meat(x))) # label(non_clause).  [assumption].
20 (all x (sausage(x) -> meat(x))) # label(non_clause).  [assumption].
21 (all x (stew_meat(x) -> meat(x))) # label(non_clause).  [assumption].
22 (all x (halal(x) -> meat(x))) # label(non_clause).  [assumption].
23 (all x (meat(x) -> fooditem(x))) # label(non_clause).  [assumption].
24 (all x (person(x) -> people(x))) # label(non_clause).  [assumption].
25 (all x ((all y supermarket(x)) & item(y) -> -make(x,y))) # label(non_clause).  [assumption].
26 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
27 (all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))) # label(non_clause).  [assumption].
28 (all x (fooditem(x) & weight(x,1) -> unit(x))) # label(non_clause).  [assumption].
29 (all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))) # label(non_clause).  [assumption].
30 (all x (tomato(x) -> piecesPerPound(x,5))) # label(non_clause).  [assumption].
31 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))) # label(non_clause).  [assumption].
32 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))) # label(non_clause).  [assumption].
33 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))) # label(non_clause).  [assumption].
34 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))) # label(non_clause).  [assumption].
35 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
36 (all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))) # label(non_clause).  [assumption].
37 (all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))) # label(non_clause).  [assumption].
38 (all x (meat(x) -> animalproduct(x))) # label(non_clause).  [assumption].
39 (all x (fish(x) -> animalproduct(x))) # label(non_clause).  [assumption].
40 (all x (egg(x) -> animalproduct(x))) # label(non_clause).  [assumption].
41 (all x (animalproduct(x) -> fooditem(x))) # label(non_clause).  [assumption].
42 (all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))) # label(non_clause).  [assumption].
43 (all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))) # label(non_clause).  [assumption].
44 (all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))) # label(non_clause).  [assumption].
45 (all x (groundbeef(x) -> beef(x))) # label(non_clause).  [assumption].
46 (all x (gas(x) & sells(Shell,x))) # label(non_clause).  [assumption].
47 (all x (adult(x) -> -child(x))) # label(non_clause).  [assumption].
48 (all x (child(x) -> -adult(x))) # label(non_clause).  [assumption].
49 (all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))) # label(non_clause).  [assumption].
50 (all x (milk(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
51 (all x (cheese(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
52 (all x (butter(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
53 (all x (fish(x) -> meat(x))) # label(non_clause).  [assumption].
54 (all x (vegetable(x) -> fooditem(x))) # label(non_clause).  [assumption].
55 (all x (tomato(x) -> vegetable(x))) # label(non_clause).  [assumption].
56 (all x (cabbage(x) -> vegetable(x))) # label(non_clause).  [assumption].
57 (all x (broccoli(x) -> vegetable(x))) # label(non_clause).  [assumption].
58 (all x (potato(x) -> vegetable(x))) # label(non_clause).  [assumption].
59 (all x (onion(x) -> vegetable(x))) # label(non_clause).  [assumption].
60 (all x (juice(x) -> beverage(x))) # label(non_clause).  [assumption].
61 (all x (soda(x) -> beverage(x))) # label(non_clause).  [assumption].
62 (all x (alcohol(x) -> beverage(x))) # label(non_clause).  [assumption].
63 (all x (water(x) -> beverage(x))) # label(non_clause).  [assumption].
64 (all x (tea(x) -> beverage(x))) # label(non_clause).  [assumption].
65 (all x (coffee(x) -> beverage(x))) # label(non_clause).  [assumption].
66 (all x (fruit(x) -> fooditem(x))) # label(non_clause).  [assumption].
67 (all x (apple(x) -> fruit(x))) # label(non_clause).  [assumption].
68 (all x (mango(x) -> fruit(x))) # label(non_clause).  [assumption].
69 (all x (banana(x) -> fruit(x))) # label(non_clause).  [assumption].
70 (all x (strawberry(x) -> fruit(x))) # label(non_clause).  [assumption].
71 (all x (pineapple(x) -> fruit(x))) # label(non_clause).  [assumption].
72 (all x (lotion(x) -> personalitem(x))) # label(non_clause).  [assumption].
73 (all x (hairspray(x) -> personalitem(x))) # label(non_clause).  [assumption].
74 (all x (shavingcream(x) -> personalitem(x))) # label(non_clause).  [assumption].
75 (all x (cosmetic(x) -> personalitem(x))) # label(non_clause).  [assumption].
76 (all x (toothbrush(x) -> personalitem(x))) # label(non_clause).  [assumption].
77 (all x (bodywash(x) -> personalitem(x))) # label(non_clause).  [assumption].
78 (all x (soap(x) -> personalitem(x))) # label(non_clause).  [assumption].
79 adult(John) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | shop(x).  [clausify(2)].
-supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
-supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
customer(f2(x,y,z,u,w)).  [clausify(4)].
supermarket(x).  [clausify(4)].
employee(x).  [clausify(4)].
item(x).  [clausify(4)].
restock(x,y,z).  [clausify(4)].
assist(x,y).  [clausify(4)].
supermarket(f3(x)).  [clausify(5)].
customer(x).  [clausify(5)].
use(x,Cart).  [clausify(5)].
-customer(x) | get(x,receipt).  [clausify(6)].
-supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
-shop(x) | -item(y) | sells(x,y).  [clausify(8)].
-time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
-customer(x) | adult(x).  [clausify(10)].
-people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
-people(x) | -works(x) | employee(x).  [clausify(12)].
shop(x).  [clausify(13)].
has(x,y).  [clausify(13)].
employee(x).  [clausify(13)].
customer(x).  [clausify(13)].
-fooditem(x) | item(x).  [clausify(14)].
-personalitem(x) | item(x).  [clausify(15)].
deodorant(D).  [assumption].
-deodorant(x) | personalitem(x).  [clausify(16)].
tomato(T).  [assumption].
beef(B).  [assumption].
-beef(x) | meat(x).  [clausify(17)].
-lamb(x) | meat(x).  [clausify(18)].
-pork(x) | meat(x).  [clausify(19)].
-sausage(x) | meat(x).  [clausify(20)].
-stew_meat(x) | meat(x).  [clausify(21)].
-halal(x) | meat(x).  [clausify(22)].
-meat(x) | fooditem(x).  [clausify(23)].
-person(x) | people(x).  [clausify(24)].
-supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
person(John).  [assumption].
bought(John,T,Safeway,t).  [assumption].
weight(T,2).  [assumption].
weight(B,1).  [assumption].
bought(John,B,Safeway,t).  [assumption].
person(Mary).  [assumption].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
money(card).  [assumption].
money(cash).  [assumption].
isa(creditcard,card).  [assumption].
supermarket(Safeway).  [assumption].
supermarket(NBS).  [assumption].
isa(NBS,Safeway).  [assumption].
locatedAt(Safeway,NorthBerkeley).  [assumption].
time(t).  [assumption].
measure(Pound).  [assumption].
measure(Ounce).  [assumption].
measure(Kilogram).  [assumption].
-fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
-fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
-tomato(x) | piecesPerPound(x,5).  [clausify(30)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
-customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
-person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
-meat(x) | animalproduct(x).  [clausify(38)].
-fish(x) | animalproduct(x).  [clausify(39)].
-egg(x) | animalproduct(x).  [clausify(40)].
-animalproduct(x) | fooditem(x).  [clausify(41)].
-people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
-people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
-people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
-people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
-groundbeef(x) | beef(x).  [clausify(45)].
gas(G).  [assumption].
gas(x).  [clausify(46)].
sells(Shell,x).  [clausify(46)].
-adult(x) | -child(x).  [clausify(47)].
-child(x) | -adult(x).  [clausify(48)].
-shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
hasSize(carTrunk,600).  [assumption].
-milk(x) | dairyproduct(x).  [clausify(50)].
-cheese(x) | dairyproduct(x).  [clausify(51)].
-butter(x) | dairyproduct(x).  [clausify(52)].
-fish(x) | meat(x).  [clausify(53)].
-vegetable(x) | fooditem(x).  [clausify(54)].
-tomato(x) | vegetable(x).  [clausify(55)].
-cabbage(x) | vegetable(x).  [clausify(56)].
-broccoli(x) | vegetable(x).  [clausify(57)].
-potato(x) | vegetable(x).  [clausify(58)].
-onion(x) | vegetable(x).  [clausify(59)].
-juice(x) | beverage(x).  [clausify(60)].
-soda(x) | beverage(x).  [clausify(61)].
-alcohol(x) | beverage(x).  [clausify(62)].
-water(x) | beverage(x).  [clausify(63)].
-tea(x) | beverage(x).  [clausify(64)].
-coffee(x) | beverage(x).  [clausify(65)].
-fruit(x) | fooditem(x).  [clausify(66)].
-apple(x) | fruit(x).  [clausify(67)].
-mango(x) | fruit(x).  [clausify(68)].
-banana(x) | fruit(x).  [clausify(69)].
-strawberry(x) | fruit(x).  [clausify(70)].
-pineapple(x) | fruit(x).  [clausify(71)].
-lotion(x) | personalitem(x).  [clausify(72)].
-hairspray(x) | personalitem(x).  [clausify(73)].
-shavingcream(x) | personalitem(x).  [clausify(74)].
-cosmetic(x) | personalitem(x).  [clausify(75)].
-toothbrush(x) | personalitem(x).  [clausify(76)].
-bodywash(x) | personalitem(x).  [clausify(77)].
-soap(x) | personalitem(x).  [clausify(78)].
-adult(John).  [deny(79)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating supermarket/1
80 supermarket(x).  [clausify(4)].
81 -supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
82 -supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
83 -supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
84 -supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
85 -supermarket(x) | shop(x).  [clausify(2)].
86 -supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
87 -supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
Derived: -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
Derived: -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
Derived: -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
Derived: -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
Derived: -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
88 supermarket(f3(x)).  [clausify(5)].
89 -supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
Derived: -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
90 -supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
Derived: -item(x) | -make(y,x).  [resolve(90,a,80,a)].
91 supermarket(Safeway).  [assumption].
Derived: shop(Safeway).  [resolve(91,a,85,a)].
92 supermarket(NBS).  [assumption].
Derived: shop(NBS).  [resolve(92,a,85,a)].

Eliminating customer/1
93 -customer(x) | get(x,receipt).  [clausify(6)].
94 customer(f2(x,y,z,u,w)).  [clausify(4)].
95 customer(x).  [clausify(5)].
Derived: get(f2(x,y,z,u,w),receipt).  [resolve(93,a,94,a)].
Derived: get(x,receipt).  [resolve(93,a,95,a)].
96 -time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
97 -customer(x) | adult(x).  [clausify(10)].
Derived: adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
Derived: adult(x).  [resolve(97,a,95,a)].
98 customer(x).  [clausify(13)].
99 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
100 -shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
101 -shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
102 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
103 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
104 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
105 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
106 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
107 -customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
Derived: -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
Derived: -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
108 -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].

Eliminating employee/1
109 -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
110 employee(x).  [clausify(4)].
111 -people(x) | -works(x) | employee(x).  [clausify(12)].
112 employee(x).  [clausify(13)].

Eliminating item/1
113 -shop(x) | -item(y) | sells(x,y).  [clausify(8)].
114 item(x).  [clausify(4)].
Derived: -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
115 -people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
Derived: -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
116 -fooditem(x) | item(x).  [clausify(14)].
117 -personalitem(x) | item(x).  [clausify(15)].
118 -person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
Derived: -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
119 -shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
Derived: -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
120 -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
Derived: deliver(x,y).  [resolve(120,a,114,a)].
121 -item(x) | -make(y,x).  [resolve(90,a,80,a)].
Derived: -make(x,y).  [resolve(121,a,114,a)].
122 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
123 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
124 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
125 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
126 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
127 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
128 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
129 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
130 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
131 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
132 -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: scan(f2(x,y,z,u,w),v5,v6).  [resolve(132,a,114,a)].
133 -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].
Derived: scan(x,y,z).  [resolve(133,a,114,a)].

Eliminating restock/3

Eliminating assist/2

Eliminating use/2

Eliminating shop/1
134 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
135 shop(x).  [clausify(13)].
136 shop(Safeway).  [resolve(91,a,85,a)].
137 shop(NBS).  [resolve(92,a,85,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
138 -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
Derived: -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
139 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | money(v6).  [resolve(139,a,135,a)].
140 -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
Derived: -bringsMoney(x,y) | money(z).  [resolve(140,a,135,a)].
141 -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
Derived: sells(x,y).  [resolve(141,a,135,a)].
142 -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
Derived: -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
143 -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
Derived: -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
144 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
145 -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
146 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
147 -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
148 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
149 -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
150 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
151 -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
152 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
153 -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].

Eliminating has/2

Eliminating deodorant/1
154 -deodorant(x) | personalitem(x).  [clausify(16)].
155 deodorant(D).  [assumption].
Derived: personalitem(D).  [resolve(154,a,155,a)].

Eliminating tomato/1
156 -tomato(x) | piecesPerPound(x,5).  [clausify(30)].
157 tomato(T).  [assumption].
Derived: piecesPerPound(T,5).  [resolve(156,a,157,a)].
158 -tomato(x) | vegetable(x).  [clausify(55)].
Derived: vegetable(T).  [resolve(158,a,157,a)].

Eliminating beef/1
159 -beef(x) | meat(x).  [clausify(17)].
160 beef(B).  [assumption].
Derived: meat(B).  [resolve(159,a,160,a)].
161 -groundbeef(x) | beef(x).  [clausify(45)].
Derived: -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].

Eliminating lamb/1

Eliminating pork/1

Eliminating sausage/1

Eliminating stew_meat/1

Eliminating halal/1

Eliminating meat/1
162 -fish(x) | meat(x).  [clausify(53)].
163 -meat(x) | fooditem(x).  [clausify(23)].
164 -meat(x) | animalproduct(x).  [clausify(38)].
Derived: -fish(x) | fooditem(x).  [resolve(162,b,163,a)].
Derived: -fish(x) | animalproduct(x).  [resolve(162,b,164,a)].
165 meat(B).  [resolve(159,a,160,a)].
Derived: fooditem(B).  [resolve(165,a,163,a)].
Derived: animalproduct(B).  [resolve(165,a,164,a)].
166 -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(166,b,163,a)].
Derived: -groundbeef(x) | animalproduct(x).  [resolve(166,b,164,a)].

Eliminating people/1
167 -people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
168 -person(x) | people(x).  [clausify(24)].
Derived: eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(167,a,168,b)].
169 -people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(169,a,168,b)].
170 -people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(170,a,168,b)].
171 -people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
Derived: -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(171,a,168,b)].
172 -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
Derived: -sellItems(x,y) | seller(x) | -person(x).  [resolve(172,a,168,b)].

Eliminating weight/2
173 -fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
174 weight(T,2).  [assumption].
175 weight(B,1).  [assumption].
Derived: -fooditem(B) | unit(B).  [resolve(173,b,175,a)].

Eliminating money/1

Eliminating isa/2

Eliminating locatedAt/2

Eliminating time/1
176 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
177 time(t).  [assumption].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(176,a,177,a)].
178 -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
Derived: -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].
179 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(179,a,177,a)].
180 -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
Derived: -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
181 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(181,a,177,a)].
182 -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
Derived: -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
183 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(183,a,177,a)].
184 -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
Derived: -paid(x,y,z,t) | moreMoney(z).  [resolve(184,a,177,a)].
185 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(185,a,177,a)].
186 -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].
Derived: -bought(x,y,z,t) | owns(x,y).  [resolve(186,a,177,a)].

Eliminating measure/1
187 -fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
188 measure(Pound).  [assumption].
189 measure(Ounce).  [assumption].
190 measure(Kilogram).  [assumption].
Derived: -fooditem(x) | usedToWeight(Pound,x).  [resolve(187,b,188,a)].
Derived: -fooditem(x) | usedToWeight(Ounce,x).  [resolve(187,b,189,a)].
Derived: -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(187,b,190,a)].

Eliminating fish/1

Eliminating egg/1

Eliminating animalproduct/1
191 animalproduct(B).  [resolve(165,a,164,a)].
192 -animalproduct(x) | fooditem(x).  [clausify(41)].
Derived: fooditem(B).  [resolve(191,a,192,a)].
193 -groundbeef(x) | animalproduct(x).  [resolve(166,b,164,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(193,b,192,a)].
194 eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(167,a,168,b)].
Derived: eats(x,B) | vegetarian(x) | -person(x).  [resolve(194,b,191,a)].
Derived: eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(194,b,193,b)].
195 eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(169,a,168,b)].
Derived: eats(x,B) | vegan(x) | -person(x).  [resolve(195,b,191,a)].
Derived: eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(195,b,193,b)].
196 -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(171,a,168,b)].
Derived: -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(196,b,191,a)].
Derived: -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(196,b,193,b)].

Eliminating gas/1

Eliminating sells/2
197 -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
198 sells(Shell,x).  [clausify(46)].
199 -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
200 -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
201 -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
202 -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
203 sells(x,y).  [resolve(141,a,135,a)].
Derived: owns(Shell,x).  [resolve(197,a,198,a)].
Derived: owns(x,y) | -personalitem(y).  [resolve(197,a,199,b)].
Derived: owns(x,y) | -fooditem(y).  [resolve(197,a,200,b)].
Derived: owns(x,y) | -dairyproducts(y).  [resolve(197,a,201,b)].
Derived: owns(x,y) | -beverages(y).  [resolve(197,a,202,b)].
Derived: owns(x,y).  [resolve(197,a,203,a)].

Eliminating adult/1
204 adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
205 -adult(x) | -child(x).  [clausify(47)].
206 -child(x) | -adult(x).  [clausify(48)].
207 -adult(John).  [deny(79)].
Derived: -child(f2(x,y,z,u,w)).  [resolve(204,a,205,a)].
208 adult(x).  [resolve(97,a,95,a)].
Derived: -child(x).  [resolve(208,a,205,a)].
Derived: $F.  [resolve(208,a,207,a)].

Eliminating hasSize/2

Eliminating milk/1

Eliminating cheese/1

Eliminating butter/1

Eliminating vegetable/1
209 -cabbage(x) | vegetable(x).  [clausify(56)].
210 -vegetable(x) | fooditem(x).  [clausify(54)].
211 -broccoli(x) | vegetable(x).  [clausify(57)].
212 -potato(x) | vegetable(x).  [clausify(58)].
213 -onion(x) | vegetable(x).  [clausify(59)].
214 vegetable(T).  [resolve(158,a,157,a)].

Eliminating juice/1

Eliminating soda/1

Eliminating alcohol/1

Eliminating water/1

Eliminating tea/1

Eliminating coffee/1

Eliminating fruit/1
215 -apple(x) | fruit(x).  [clausify(67)].
216 -fruit(x) | fooditem(x).  [clausify(66)].
217 -mango(x) | fruit(x).  [clausify(68)].
218 -banana(x) | fruit(x).  [clausify(69)].
219 -strawberry(x) | fruit(x).  [clausify(70)].
220 -pineapple(x) | fruit(x).  [clausify(71)].

Eliminating lotion/1

Eliminating hairspray/1

Eliminating shavingcream/1

Eliminating cosmetic/1

Eliminating toothbrush/1

Eliminating bodywash/1

Eliminating soap/1

Eliminating get/2

Eliminating fooditem/1
221 fooditem(B).  [resolve(165,a,163,a)].
222 -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
223 -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
224 -groundbeef(x) | fooditem(x).  [resolve(166,b,163,a)].
225 -fooditem(B) | unit(B).  [resolve(173,b,175,a)].
226 -fooditem(x) | usedToWeight(Pound,x).  [resolve(187,b,188,a)].
227 -fooditem(x) | usedToWeight(Ounce,x).  [resolve(187,b,189,a)].
228 -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(187,b,190,a)].
229 fooditem(B).  [resolve(191,a,192,a)].
230 -groundbeef(x) | fooditem(x).  [resolve(193,b,192,a)].
231 owns(x,y) | -fooditem(y).  [resolve(197,a,200,b)].

Eliminating deliver/2

Eliminating make/2

Eliminating scan/3

Eliminating bringsMoney/2
232 -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(176,a,177,a)].
233 -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
234 -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
235 -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].

Eliminating personalitem/1
236 owns(x,y) | -personalitem(y).  [resolve(197,a,199,b)].
237 personalitem(D).  [resolve(154,a,155,a)].

Eliminating piecesPerPound/2

Eliminating eats/2
238 -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(196,b,191,a)].
239 eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(170,a,168,b)].
240 eats(x,B) | vegetarian(x) | -person(x).  [resolve(194,b,191,a)].
241 eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(194,b,193,b)].
242 eats(x,B) | vegan(x) | -person(x).  [resolve(195,b,191,a)].
243 eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(195,b,193,b)].
244 -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(196,b,193,b)].

Eliminating sellItems/2

Eliminating paid/4
245 -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(181,a,177,a)].
246 -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(179,a,177,a)].
247 -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
248 -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
249 -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(183,a,177,a)].
250 -paid(x,y,z,t) | moreMoney(z).  [resolve(184,a,177,a)].

Eliminating owns/2

Eliminating child/1

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ person, see, bought ]).
Function symbol precedence:  function_order([ t, John, Safeway, B, Mary, T ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      251 person(John).  [assumption].
kept:      252 bought(John,T,Safeway,t).  [assumption].
kept:      253 bought(John,B,Safeway,t).  [assumption].
kept:      254 person(Mary).  [assumption].
kept:      255 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].

============================== PROOF =================================

% Proof 1 at 0.02 (+ 0.01) seconds.
% Length of proof is 8.
% Level of proof is 3.
% Maximum clause weight is 0.000.
% Given clauses 0.

5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
10 (all x (customer(x) -> adult(x))) # label(non_clause).  [assumption].
79 adult(John) # label(non_clause) # label(goal).  [goal].
95 customer(x).  [clausify(5)].
97 -customer(x) | adult(x).  [clausify(10)].
207 -adult(John).  [deny(79)].
208 adult(x).  [resolve(97,a,95,a)].
256 $F.  [resolve(208,a,207,a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=6. Kept=5. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=5, Disabled=232. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=0. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=0. Nonunit_bsub_feature_tests=0.
Megabytes=0.33.
User_CPU=0.02, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 9695 exit (max_proofs) Sun Apr 26 00:46:26 2020











b.	Does John now have at least two tomatoes? (Not done, prover9 doesnâ€™t support numeric entries). 













c.	Did John buy any meat? 
	> exists x exists z exists t(meat(x) & bought(John, x, z, t)).


============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 9697 was started by rinkleseth on Rinkles-MacBook-Pro.local,
Sun Apr 26 00:46:54 2020
The command was "/Users/rinkleseth/Downloads/LADR-2009-11A/bin/prover9 -f /Users/rinkleseth/Desktop/spring2020/AI/project/input.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /Users/rinkleseth/Desktop/spring2020/AI/project/input.in


formulas(sos).
(all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))).
(all x (supermarket(x) -> shop(x))).
(all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))).
(all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))).
(all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))).
(all x (customer(x) -> get(x,receipt))).
(all x ((all y supermarket(x)) & item(y) -> deliver(x,y))).
(all x ((exists y shop(x)) & item(y) -> sells(x,y))).
(all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))).
(all x (customer(x) -> adult(x))).
(all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))).
(all x (people(x) & works(x) -> employee(x))).
(all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))).
(all x (fooditem(x) -> item(x))).
(all x (personalitem(x) -> item(x))).
deodorant(D).
(all x (deodorant(x) -> personalitem(x))).
tomato(T).
beef(B).
(all x (beef(x) -> meat(x))).
(all x (lamb(x) -> meat(x))).
(all x (pork(x) -> meat(x))).
(all x (sausage(x) -> meat(x))).
(all x (stew_meat(x) -> meat(x))).
(all x (halal(x) -> meat(x))).
(all x (meat(x) -> fooditem(x))).
(all x (person(x) -> people(x))).
(all x ((all y supermarket(x)) & item(y) -> -make(x,y))).
person(John).
bought(John,T,Safeway,t).
weight(T,2).
weight(B,1).
bought(John,B,Safeway,t).
person(Mary).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))).
money(card).
money(cash).
isa(creditcard,card).
supermarket(Safeway).
supermarket(NBS).
isa(NBS,Safeway).
locatedAt(Safeway,NorthBerkeley).
time(t).
measure(Pound).
measure(Ounce).
measure(Kilogram).
(all x (fooditem(x) & weight(x,1) -> unit(x))).
(all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))).
(all x (tomato(x) -> piecesPerPound(x,5))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))).
(all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))).
(all x (meat(x) -> animalproduct(x))).
(all x (fish(x) -> animalproduct(x))).
(all x (egg(x) -> animalproduct(x))).
(all x (animalproduct(x) -> fooditem(x))).
(all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))).
(all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))).
(all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))).
(all x (groundbeef(x) -> beef(x))).
gas(G).
(all x (gas(x) & sells(Shell,x))).
(all x (adult(x) -> -child(x))).
(all x (child(x) -> -adult(x))).
(all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))).
hasSize(carTrunk,600).
(all x (milk(x) -> dairyproduct(x))).
(all x (cheese(x) -> dairyproduct(x))).
(all x (butter(x) -> dairyproduct(x))).
(all x (fish(x) -> meat(x))).
(all x (vegetable(x) -> fooditem(x))).
(all x (tomato(x) -> vegetable(x))).
(all x (cabbage(x) -> vegetable(x))).
(all x (broccoli(x) -> vegetable(x))).
(all x (potato(x) -> vegetable(x))).
(all x (onion(x) -> vegetable(x))).
(all x (juice(x) -> beverage(x))).
(all x (soda(x) -> beverage(x))).
(all x (alcohol(x) -> beverage(x))).
(all x (water(x) -> beverage(x))).
(all x (tea(x) -> beverage(x))).
(all x (coffee(x) -> beverage(x))).
(all x (fruit(x) -> fooditem(x))).
(all x (apple(x) -> fruit(x))).
(all x (mango(x) -> fruit(x))).
(all x (banana(x) -> fruit(x))).
(all x (strawberry(x) -> fruit(x))).
(all x (pineapple(x) -> fruit(x))).
(all x (lotion(x) -> personalitem(x))).
(all x (hairspray(x) -> personalitem(x))).
(all x (shavingcream(x) -> personalitem(x))).
(all x (cosmetic(x) -> personalitem(x))).
(all x (toothbrush(x) -> personalitem(x))).
(all x (bodywash(x) -> personalitem(x))).
(all x (soap(x) -> personalitem(x))).
end_of_list.

formulas(goals).
(exists x exists z exists t (meat(x) & bought(John,x,z,t))).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))) # label(non_clause).  [assumption].
2 (all x (supermarket(x) -> shop(x))) # label(non_clause).  [assumption].
3 (all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))) # label(non_clause).  [assumption].
4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
6 (all x (customer(x) -> get(x,receipt))) # label(non_clause).  [assumption].
7 (all x ((all y supermarket(x)) & item(y) -> deliver(x,y))) # label(non_clause).  [assumption].
8 (all x ((exists y shop(x)) & item(y) -> sells(x,y))) # label(non_clause).  [assumption].
9 (all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))) # label(non_clause).  [assumption].
10 (all x (customer(x) -> adult(x))) # label(non_clause).  [assumption].
11 (all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))) # label(non_clause).  [assumption].
12 (all x (people(x) & works(x) -> employee(x))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
14 (all x (fooditem(x) -> item(x))) # label(non_clause).  [assumption].
15 (all x (personalitem(x) -> item(x))) # label(non_clause).  [assumption].
16 (all x (deodorant(x) -> personalitem(x))) # label(non_clause).  [assumption].
17 (all x (beef(x) -> meat(x))) # label(non_clause).  [assumption].
18 (all x (lamb(x) -> meat(x))) # label(non_clause).  [assumption].
19 (all x (pork(x) -> meat(x))) # label(non_clause).  [assumption].
20 (all x (sausage(x) -> meat(x))) # label(non_clause).  [assumption].
21 (all x (stew_meat(x) -> meat(x))) # label(non_clause).  [assumption].
22 (all x (halal(x) -> meat(x))) # label(non_clause).  [assumption].
23 (all x (meat(x) -> fooditem(x))) # label(non_clause).  [assumption].
24 (all x (person(x) -> people(x))) # label(non_clause).  [assumption].
25 (all x ((all y supermarket(x)) & item(y) -> -make(x,y))) # label(non_clause).  [assumption].
26 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
27 (all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))) # label(non_clause).  [assumption].
28 (all x (fooditem(x) & weight(x,1) -> unit(x))) # label(non_clause).  [assumption].
29 (all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))) # label(non_clause).  [assumption].
30 (all x (tomato(x) -> piecesPerPound(x,5))) # label(non_clause).  [assumption].
31 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))) # label(non_clause).  [assumption].
32 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))) # label(non_clause).  [assumption].
33 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))) # label(non_clause).  [assumption].
34 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))) # label(non_clause).  [assumption].
35 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
36 (all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))) # label(non_clause).  [assumption].
37 (all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))) # label(non_clause).  [assumption].
38 (all x (meat(x) -> animalproduct(x))) # label(non_clause).  [assumption].
39 (all x (fish(x) -> animalproduct(x))) # label(non_clause).  [assumption].
40 (all x (egg(x) -> animalproduct(x))) # label(non_clause).  [assumption].
41 (all x (animalproduct(x) -> fooditem(x))) # label(non_clause).  [assumption].
42 (all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))) # label(non_clause).  [assumption].
43 (all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))) # label(non_clause).  [assumption].
44 (all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))) # label(non_clause).  [assumption].
45 (all x (groundbeef(x) -> beef(x))) # label(non_clause).  [assumption].
46 (all x (gas(x) & sells(Shell,x))) # label(non_clause).  [assumption].
47 (all x (adult(x) -> -child(x))) # label(non_clause).  [assumption].
48 (all x (child(x) -> -adult(x))) # label(non_clause).  [assumption].
49 (all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))) # label(non_clause).  [assumption].
50 (all x (milk(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
51 (all x (cheese(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
52 (all x (butter(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
53 (all x (fish(x) -> meat(x))) # label(non_clause).  [assumption].
54 (all x (vegetable(x) -> fooditem(x))) # label(non_clause).  [assumption].
55 (all x (tomato(x) -> vegetable(x))) # label(non_clause).  [assumption].
56 (all x (cabbage(x) -> vegetable(x))) # label(non_clause).  [assumption].
57 (all x (broccoli(x) -> vegetable(x))) # label(non_clause).  [assumption].
58 (all x (potato(x) -> vegetable(x))) # label(non_clause).  [assumption].
59 (all x (onion(x) -> vegetable(x))) # label(non_clause).  [assumption].
60 (all x (juice(x) -> beverage(x))) # label(non_clause).  [assumption].
61 (all x (soda(x) -> beverage(x))) # label(non_clause).  [assumption].
62 (all x (alcohol(x) -> beverage(x))) # label(non_clause).  [assumption].
63 (all x (water(x) -> beverage(x))) # label(non_clause).  [assumption].
64 (all x (tea(x) -> beverage(x))) # label(non_clause).  [assumption].
65 (all x (coffee(x) -> beverage(x))) # label(non_clause).  [assumption].
66 (all x (fruit(x) -> fooditem(x))) # label(non_clause).  [assumption].
67 (all x (apple(x) -> fruit(x))) # label(non_clause).  [assumption].
68 (all x (mango(x) -> fruit(x))) # label(non_clause).  [assumption].
69 (all x (banana(x) -> fruit(x))) # label(non_clause).  [assumption].
70 (all x (strawberry(x) -> fruit(x))) # label(non_clause).  [assumption].
71 (all x (pineapple(x) -> fruit(x))) # label(non_clause).  [assumption].
72 (all x (lotion(x) -> personalitem(x))) # label(non_clause).  [assumption].
73 (all x (hairspray(x) -> personalitem(x))) # label(non_clause).  [assumption].
74 (all x (shavingcream(x) -> personalitem(x))) # label(non_clause).  [assumption].
75 (all x (cosmetic(x) -> personalitem(x))) # label(non_clause).  [assumption].
76 (all x (toothbrush(x) -> personalitem(x))) # label(non_clause).  [assumption].
77 (all x (bodywash(x) -> personalitem(x))) # label(non_clause).  [assumption].
78 (all x (soap(x) -> personalitem(x))) # label(non_clause).  [assumption].
79 (exists x exists z exists t (meat(x) & bought(John,x,z,t))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | shop(x).  [clausify(2)].
-supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
-supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
customer(f2(x,y,z,u,w)).  [clausify(4)].
supermarket(x).  [clausify(4)].
employee(x).  [clausify(4)].
item(x).  [clausify(4)].
restock(x,y,z).  [clausify(4)].
assist(x,y).  [clausify(4)].
supermarket(f3(x)).  [clausify(5)].
customer(x).  [clausify(5)].
use(x,Cart).  [clausify(5)].
-customer(x) | get(x,receipt).  [clausify(6)].
-supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
-shop(x) | -item(y) | sells(x,y).  [clausify(8)].
-time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
-customer(x) | adult(x).  [clausify(10)].
-people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
-people(x) | -works(x) | employee(x).  [clausify(12)].
shop(x).  [clausify(13)].
has(x,y).  [clausify(13)].
employee(x).  [clausify(13)].
customer(x).  [clausify(13)].
-fooditem(x) | item(x).  [clausify(14)].
-personalitem(x) | item(x).  [clausify(15)].
deodorant(D).  [assumption].
-deodorant(x) | personalitem(x).  [clausify(16)].
tomato(T).  [assumption].
beef(B).  [assumption].
-beef(x) | meat(x).  [clausify(17)].
-lamb(x) | meat(x).  [clausify(18)].
-pork(x) | meat(x).  [clausify(19)].
-sausage(x) | meat(x).  [clausify(20)].
-stew_meat(x) | meat(x).  [clausify(21)].
-halal(x) | meat(x).  [clausify(22)].
-meat(x) | fooditem(x).  [clausify(23)].
-person(x) | people(x).  [clausify(24)].
-supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
person(John).  [assumption].
bought(John,T,Safeway,t).  [assumption].
weight(T,2).  [assumption].
weight(B,1).  [assumption].
bought(John,B,Safeway,t).  [assumption].
person(Mary).  [assumption].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
money(card).  [assumption].
money(cash).  [assumption].
isa(creditcard,card).  [assumption].
supermarket(Safeway).  [assumption].
supermarket(NBS).  [assumption].
isa(NBS,Safeway).  [assumption].
locatedAt(Safeway,NorthBerkeley).  [assumption].
time(t).  [assumption].
measure(Pound).  [assumption].
measure(Ounce).  [assumption].
measure(Kilogram).  [assumption].
-fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
-fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
-tomato(x) | piecesPerPound(x,5).  [clausify(30)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
-customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
-person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
-meat(x) | animalproduct(x).  [clausify(38)].
-fish(x) | animalproduct(x).  [clausify(39)].
-egg(x) | animalproduct(x).  [clausify(40)].
-animalproduct(x) | fooditem(x).  [clausify(41)].
-people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
-people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
-people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
-people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
-groundbeef(x) | beef(x).  [clausify(45)].
gas(G).  [assumption].
gas(x).  [clausify(46)].
sells(Shell,x).  [clausify(46)].
-adult(x) | -child(x).  [clausify(47)].
-child(x) | -adult(x).  [clausify(48)].
-shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
hasSize(carTrunk,600).  [assumption].
-milk(x) | dairyproduct(x).  [clausify(50)].
-cheese(x) | dairyproduct(x).  [clausify(51)].
-butter(x) | dairyproduct(x).  [clausify(52)].
-fish(x) | meat(x).  [clausify(53)].
-vegetable(x) | fooditem(x).  [clausify(54)].
-tomato(x) | vegetable(x).  [clausify(55)].
-cabbage(x) | vegetable(x).  [clausify(56)].
-broccoli(x) | vegetable(x).  [clausify(57)].
-potato(x) | vegetable(x).  [clausify(58)].
-onion(x) | vegetable(x).  [clausify(59)].
-juice(x) | beverage(x).  [clausify(60)].
-soda(x) | beverage(x).  [clausify(61)].
-alcohol(x) | beverage(x).  [clausify(62)].
-water(x) | beverage(x).  [clausify(63)].
-tea(x) | beverage(x).  [clausify(64)].
-coffee(x) | beverage(x).  [clausify(65)].
-fruit(x) | fooditem(x).  [clausify(66)].
-apple(x) | fruit(x).  [clausify(67)].
-mango(x) | fruit(x).  [clausify(68)].
-banana(x) | fruit(x).  [clausify(69)].
-strawberry(x) | fruit(x).  [clausify(70)].
-pineapple(x) | fruit(x).  [clausify(71)].
-lotion(x) | personalitem(x).  [clausify(72)].
-hairspray(x) | personalitem(x).  [clausify(73)].
-shavingcream(x) | personalitem(x).  [clausify(74)].
-cosmetic(x) | personalitem(x).  [clausify(75)].
-toothbrush(x) | personalitem(x).  [clausify(76)].
-bodywash(x) | personalitem(x).  [clausify(77)].
-soap(x) | personalitem(x).  [clausify(78)].
-meat(x) | -bought(John,x,y,z).  [deny(79)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating supermarket/1
80 supermarket(x).  [clausify(4)].
81 -supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
82 -supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
83 -supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
84 -supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
85 -supermarket(x) | shop(x).  [clausify(2)].
86 -supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
87 -supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
Derived: -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
Derived: -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
Derived: -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
Derived: -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
Derived: -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
88 supermarket(f3(x)).  [clausify(5)].
89 -supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
Derived: -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
90 -supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
Derived: -item(x) | -make(y,x).  [resolve(90,a,80,a)].
91 supermarket(Safeway).  [assumption].
Derived: shop(Safeway).  [resolve(91,a,85,a)].
92 supermarket(NBS).  [assumption].
Derived: shop(NBS).  [resolve(92,a,85,a)].

Eliminating customer/1
93 -customer(x) | get(x,receipt).  [clausify(6)].
94 customer(f2(x,y,z,u,w)).  [clausify(4)].
95 customer(x).  [clausify(5)].
Derived: get(f2(x,y,z,u,w),receipt).  [resolve(93,a,94,a)].
Derived: get(x,receipt).  [resolve(93,a,95,a)].
96 -time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
97 -customer(x) | adult(x).  [clausify(10)].
Derived: adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
Derived: adult(x).  [resolve(97,a,95,a)].
98 customer(x).  [clausify(13)].
99 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
100 -shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
101 -shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
102 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
103 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
104 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
105 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
106 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
107 -customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
Derived: -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
Derived: -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
108 -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].

Eliminating employee/1
109 -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
110 employee(x).  [clausify(4)].
111 -people(x) | -works(x) | employee(x).  [clausify(12)].
112 employee(x).  [clausify(13)].

Eliminating item/1
113 -shop(x) | -item(y) | sells(x,y).  [clausify(8)].
114 item(x).  [clausify(4)].
Derived: -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
115 -people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
Derived: -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
116 -fooditem(x) | item(x).  [clausify(14)].
117 -personalitem(x) | item(x).  [clausify(15)].
118 -person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
Derived: -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
119 -shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
Derived: -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
120 -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
Derived: deliver(x,y).  [resolve(120,a,114,a)].
121 -item(x) | -make(y,x).  [resolve(90,a,80,a)].
Derived: -make(x,y).  [resolve(121,a,114,a)].
122 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
123 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
124 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
125 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
126 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
127 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
128 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
129 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
130 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
131 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
132 -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: scan(f2(x,y,z,u,w),v5,v6).  [resolve(132,a,114,a)].
133 -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].
Derived: scan(x,y,z).  [resolve(133,a,114,a)].

Eliminating restock/3

Eliminating assist/2

Eliminating use/2

Eliminating shop/1
134 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
135 shop(x).  [clausify(13)].
136 shop(Safeway).  [resolve(91,a,85,a)].
137 shop(NBS).  [resolve(92,a,85,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
138 -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
Derived: -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
139 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | money(v6).  [resolve(139,a,135,a)].
140 -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
Derived: -bringsMoney(x,y) | money(z).  [resolve(140,a,135,a)].
141 -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
Derived: sells(x,y).  [resolve(141,a,135,a)].
142 -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
Derived: -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
143 -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
Derived: -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
144 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
145 -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
146 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
147 -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
148 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
149 -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
150 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
151 -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
152 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
153 -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].

Eliminating has/2

Eliminating deodorant/1
154 -deodorant(x) | personalitem(x).  [clausify(16)].
155 deodorant(D).  [assumption].
Derived: personalitem(D).  [resolve(154,a,155,a)].

Eliminating tomato/1
156 -tomato(x) | piecesPerPound(x,5).  [clausify(30)].
157 tomato(T).  [assumption].
Derived: piecesPerPound(T,5).  [resolve(156,a,157,a)].
158 -tomato(x) | vegetable(x).  [clausify(55)].
Derived: vegetable(T).  [resolve(158,a,157,a)].

Eliminating beef/1
159 -beef(x) | meat(x).  [clausify(17)].
160 beef(B).  [assumption].
Derived: meat(B).  [resolve(159,a,160,a)].
161 -groundbeef(x) | beef(x).  [clausify(45)].
Derived: -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].

Eliminating lamb/1

Eliminating pork/1

Eliminating sausage/1

Eliminating stew_meat/1

Eliminating halal/1

Eliminating meat/1
162 -fish(x) | meat(x).  [clausify(53)].
163 -meat(x) | fooditem(x).  [clausify(23)].
164 -meat(x) | animalproduct(x).  [clausify(38)].
Derived: -fish(x) | fooditem(x).  [resolve(162,b,163,a)].
Derived: -fish(x) | animalproduct(x).  [resolve(162,b,164,a)].
165 -meat(x) | -bought(John,x,y,z).  [deny(79)].
Derived: -bought(John,x,y,z) | -fish(x).  [resolve(165,a,162,b)].
166 meat(B).  [resolve(159,a,160,a)].
Derived: fooditem(B).  [resolve(166,a,163,a)].
Derived: animalproduct(B).  [resolve(166,a,164,a)].
Derived: -bought(John,B,x,y).  [resolve(166,a,165,a)].
167 -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(167,b,163,a)].
Derived: -groundbeef(x) | animalproduct(x).  [resolve(167,b,164,a)].
Derived: -groundbeef(x) | -bought(John,x,y,z).  [resolve(167,b,165,a)].

Eliminating people/1
168 -people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
169 -person(x) | people(x).  [clausify(24)].
Derived: eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(168,a,169,b)].
170 -people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(170,a,169,b)].
171 -people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(171,a,169,b)].
172 -people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
Derived: -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(172,a,169,b)].
173 -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
Derived: -sellItems(x,y) | seller(x) | -person(x).  [resolve(173,a,169,b)].

Eliminating weight/2
174 -fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
175 weight(T,2).  [assumption].
176 weight(B,1).  [assumption].
Derived: -fooditem(B) | unit(B).  [resolve(174,b,176,a)].

Eliminating money/1

Eliminating isa/2

Eliminating locatedAt/2

Eliminating time/1
177 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
178 time(t).  [assumption].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(177,a,178,a)].
179 -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
Derived: -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(179,a,178,a)].
180 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(180,a,178,a)].
181 -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
Derived: -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(181,a,178,a)].
182 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(182,a,178,a)].
183 -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
Derived: -paid(x,y,z,t) | lessMoney(x).  [resolve(183,a,178,a)].
184 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(184,a,178,a)].
185 -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
Derived: -paid(x,y,z,t) | moreMoney(z).  [resolve(185,a,178,a)].
186 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(186,a,178,a)].
187 -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].
Derived: -bought(x,y,z,t) | owns(x,y).  [resolve(187,a,178,a)].

Eliminating measure/1
188 -fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
189 measure(Pound).  [assumption].
190 measure(Ounce).  [assumption].
191 measure(Kilogram).  [assumption].
Derived: -fooditem(x) | usedToWeight(Pound,x).  [resolve(188,b,189,a)].
Derived: -fooditem(x) | usedToWeight(Ounce,x).  [resolve(188,b,190,a)].
Derived: -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(188,b,191,a)].

Eliminating fish/1

Eliminating egg/1

Eliminating animalproduct/1
192 animalproduct(B).  [resolve(166,a,164,a)].
193 -animalproduct(x) | fooditem(x).  [clausify(41)].
Derived: fooditem(B).  [resolve(192,a,193,a)].
194 -groundbeef(x) | animalproduct(x).  [resolve(167,b,164,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(194,b,193,a)].
195 eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(168,a,169,b)].
Derived: eats(x,B) | vegetarian(x) | -person(x).  [resolve(195,b,192,a)].
Derived: eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(195,b,194,b)].
196 eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(170,a,169,b)].
Derived: eats(x,B) | vegan(x) | -person(x).  [resolve(196,b,192,a)].
Derived: eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(196,b,194,b)].
197 -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(172,a,169,b)].
Derived: -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(197,b,192,a)].
Derived: -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(197,b,194,b)].

Eliminating gas/1

Eliminating sells/2
198 -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
199 sells(Shell,x).  [clausify(46)].
200 -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
201 -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
202 -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
203 -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
204 sells(x,y).  [resolve(141,a,135,a)].
Derived: owns(Shell,x).  [resolve(198,a,199,a)].
Derived: owns(x,y) | -personalitem(y).  [resolve(198,a,200,b)].
Derived: owns(x,y) | -fooditem(y).  [resolve(198,a,201,b)].
Derived: owns(x,y) | -dairyproducts(y).  [resolve(198,a,202,b)].
Derived: owns(x,y) | -beverages(y).  [resolve(198,a,203,b)].
Derived: owns(x,y).  [resolve(198,a,204,a)].

Eliminating adult/1
205 adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
206 -adult(x) | -child(x).  [clausify(47)].
207 -child(x) | -adult(x).  [clausify(48)].
Derived: -child(f2(x,y,z,u,w)).  [resolve(205,a,206,a)].
208 adult(x).  [resolve(97,a,95,a)].
Derived: -child(x).  [resolve(208,a,206,a)].

Eliminating hasSize/2

Eliminating milk/1

Eliminating cheese/1

Eliminating butter/1

Eliminating vegetable/1
209 -cabbage(x) | vegetable(x).  [clausify(56)].
210 -vegetable(x) | fooditem(x).  [clausify(54)].
Derived: -cabbage(x) | fooditem(x).  [resolve(209,b,210,a)].
211 -broccoli(x) | vegetable(x).  [clausify(57)].
Derived: -broccoli(x) | fooditem(x).  [resolve(211,b,210,a)].
212 -potato(x) | vegetable(x).  [clausify(58)].
Derived: -potato(x) | fooditem(x).  [resolve(212,b,210,a)].
213 -onion(x) | vegetable(x).  [clausify(59)].
Derived: -onion(x) | fooditem(x).  [resolve(213,b,210,a)].
214 vegetable(T).  [resolve(158,a,157,a)].
Derived: fooditem(T).  [resolve(214,a,210,a)].

Eliminating juice/1

Eliminating soda/1

Eliminating alcohol/1

Eliminating water/1

Eliminating tea/1

Eliminating coffee/1

Eliminating fruit/1
215 -apple(x) | fruit(x).  [clausify(67)].
216 -fruit(x) | fooditem(x).  [clausify(66)].
Derived: -apple(x) | fooditem(x).  [resolve(215,b,216,a)].
217 -mango(x) | fruit(x).  [clausify(68)].
Derived: -mango(x) | fooditem(x).  [resolve(217,b,216,a)].
218 -banana(x) | fruit(x).  [clausify(69)].
Derived: -banana(x) | fooditem(x).  [resolve(218,b,216,a)].
219 -strawberry(x) | fruit(x).  [clausify(70)].
Derived: -strawberry(x) | fooditem(x).  [resolve(219,b,216,a)].
220 -pineapple(x) | fruit(x).  [clausify(71)].
Derived: -pineapple(x) | fooditem(x).  [resolve(220,b,216,a)].

Eliminating lotion/1

Eliminating hairspray/1

Eliminating shavingcream/1

Eliminating cosmetic/1

Eliminating toothbrush/1

Eliminating bodywash/1

Eliminating soap/1

Eliminating get/2

Eliminating fooditem/1
221 fooditem(B).  [resolve(166,a,163,a)].
222 -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
223 -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
Derived: -owns(f2(x,y,z,u,w),B) | eats(f2(x,y,z,u,w),B).  [resolve(221,a,222,a)].
Derived: -owns(x,B) | eats(x,B).  [resolve(221,a,223,a)].
224 -groundbeef(x) | fooditem(x).  [resolve(167,b,163,a)].
Derived: -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(224,b,222,a)].
Derived: -groundbeef(x) | -owns(y,x) | eats(y,x).  [resolve(224,b,223,a)].
225 -fooditem(B) | unit(B).  [resolve(174,b,176,a)].
Derived: unit(B).  [resolve(225,a,221,a)].
226 -fooditem(x) | usedToWeight(Pound,x).  [resolve(188,b,189,a)].
Derived: usedToWeight(Pound,B).  [resolve(226,a,221,a)].
Derived: usedToWeight(Pound,x) | -groundbeef(x).  [resolve(226,a,224,b)].
227 -fooditem(x) | usedToWeight(Ounce,x).  [resolve(188,b,190,a)].
Derived: usedToWeight(Ounce,B).  [resolve(227,a,221,a)].
Derived: usedToWeight(Ounce,x) | -groundbeef(x).  [resolve(227,a,224,b)].
228 -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(188,b,191,a)].
Derived: usedToWeight(Kilogram,B).  [resolve(228,a,221,a)].
Derived: usedToWeight(Kilogram,x) | -groundbeef(x).  [resolve(228,a,224,b)].
229 fooditem(B).  [resolve(192,a,193,a)].
230 -groundbeef(x) | fooditem(x).  [resolve(194,b,193,a)].
231 owns(x,y) | -fooditem(y).  [resolve(198,a,201,b)].
232 -cabbage(x) | fooditem(x).  [resolve(209,b,210,a)].
Derived: -cabbage(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(232,b,222,a)].
Derived: -cabbage(x) | -owns(y,x) | eats(y,x).  [resolve(232,b,223,a)].
Derived: -cabbage(x) | usedToWeight(Pound,x).  [resolve(232,b,226,a)].
Derived: -cabbage(x) | usedToWeight(Ounce,x).  [resolve(232,b,227,a)].
Derived: -cabbage(x) | usedToWeight(Kilogram,x).  [resolve(232,b,228,a)].
Derived: -cabbage(x) | owns(y,x).  [resolve(232,b,231,b)].
233 -broccoli(x) | fooditem(x).  [resolve(211,b,210,a)].
Derived: -broccoli(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(233,b,222,a)].
Derived: -broccoli(x) | -owns(y,x) | eats(y,x).  [resolve(233,b,223,a)].
Derived: -broccoli(x) | usedToWeight(Pound,x).  [resolve(233,b,226,a)].
Derived: -broccoli(x) | usedToWeight(Ounce,x).  [resolve(233,b,227,a)].
Derived: -broccoli(x) | usedToWeight(Kilogram,x).  [resolve(233,b,228,a)].
Derived: -broccoli(x) | owns(y,x).  [resolve(233,b,231,b)].
234 -potato(x) | fooditem(x).  [resolve(212,b,210,a)].
Derived: -potato(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(234,b,222,a)].
Derived: -potato(x) | -owns(y,x) | eats(y,x).  [resolve(234,b,223,a)].
Derived: -potato(x) | usedToWeight(Pound,x).  [resolve(234,b,226,a)].
Derived: -potato(x) | usedToWeight(Ounce,x).  [resolve(234,b,227,a)].
Derived: -potato(x) | usedToWeight(Kilogram,x).  [resolve(234,b,228,a)].
Derived: -potato(x) | owns(y,x).  [resolve(234,b,231,b)].
235 -onion(x) | fooditem(x).  [resolve(213,b,210,a)].
Derived: -onion(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(235,b,222,a)].
Derived: -onion(x) | -owns(y,x) | eats(y,x).  [resolve(235,b,223,a)].
Derived: -onion(x) | usedToWeight(Pound,x).  [resolve(235,b,226,a)].
Derived: -onion(x) | usedToWeight(Ounce,x).  [resolve(235,b,227,a)].
Derived: -onion(x) | usedToWeight(Kilogram,x).  [resolve(235,b,228,a)].
Derived: -onion(x) | owns(y,x).  [resolve(235,b,231,b)].
236 fooditem(T).  [resolve(214,a,210,a)].
Derived: -owns(f2(x,y,z,u,w),T) | eats(f2(x,y,z,u,w),T).  [resolve(236,a,222,a)].
Derived: -owns(x,T) | eats(x,T).  [resolve(236,a,223,a)].
Derived: usedToWeight(Pound,T).  [resolve(236,a,226,a)].
Derived: usedToWeight(Ounce,T).  [resolve(236,a,227,a)].
Derived: usedToWeight(Kilogram,T).  [resolve(236,a,228,a)].
Derived: owns(x,T).  [resolve(236,a,231,b)].
237 -apple(x) | fooditem(x).  [resolve(215,b,216,a)].
Derived: -apple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(237,b,222,a)].
Derived: -apple(x) | -owns(y,x) | eats(y,x).  [resolve(237,b,223,a)].
Derived: -apple(x) | usedToWeight(Pound,x).  [resolve(237,b,226,a)].
Derived: -apple(x) | usedToWeight(Ounce,x).  [resolve(237,b,227,a)].
Derived: -apple(x) | usedToWeight(Kilogram,x).  [resolve(237,b,228,a)].
Derived: -apple(x) | owns(y,x).  [resolve(237,b,231,b)].
238 -mango(x) | fooditem(x).  [resolve(217,b,216,a)].
Derived: -mango(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(238,b,222,a)].
Derived: -mango(x) | -owns(y,x) | eats(y,x).  [resolve(238,b,223,a)].
Derived: -mango(x) | usedToWeight(Pound,x).  [resolve(238,b,226,a)].
Derived: -mango(x) | usedToWeight(Ounce,x).  [resolve(238,b,227,a)].
Derived: -mango(x) | usedToWeight(Kilogram,x).  [resolve(238,b,228,a)].
Derived: -mango(x) | owns(y,x).  [resolve(238,b,231,b)].
239 -banana(x) | fooditem(x).  [resolve(218,b,216,a)].
Derived: -banana(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(239,b,222,a)].
Derived: -banana(x) | -owns(y,x) | eats(y,x).  [resolve(239,b,223,a)].
Derived: -banana(x) | usedToWeight(Pound,x).  [resolve(239,b,226,a)].
Derived: -banana(x) | usedToWeight(Ounce,x).  [resolve(239,b,227,a)].
Derived: -banana(x) | usedToWeight(Kilogram,x).  [resolve(239,b,228,a)].
Derived: -banana(x) | owns(y,x).  [resolve(239,b,231,b)].
240 -strawberry(x) | fooditem(x).  [resolve(219,b,216,a)].
Derived: -strawberry(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(240,b,222,a)].
Derived: -strawberry(x) | -owns(y,x) | eats(y,x).  [resolve(240,b,223,a)].
Derived: -strawberry(x) | usedToWeight(Pound,x).  [resolve(240,b,226,a)].
Derived: -strawberry(x) | usedToWeight(Ounce,x).  [resolve(240,b,227,a)].
Derived: -strawberry(x) | usedToWeight(Kilogram,x).  [resolve(240,b,228,a)].
Derived: -strawberry(x) | owns(y,x).  [resolve(240,b,231,b)].
241 -pineapple(x) | fooditem(x).  [resolve(220,b,216,a)].
Derived: -pineapple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(241,b,222,a)].
Derived: -pineapple(x) | -owns(y,x) | eats(y,x).  [resolve(241,b,223,a)].
Derived: -pineapple(x) | usedToWeight(Pound,x).  [resolve(241,b,226,a)].
Derived: -pineapple(x) | usedToWeight(Ounce,x).  [resolve(241,b,227,a)].
Derived: -pineapple(x) | usedToWeight(Kilogram,x).  [resolve(241,b,228,a)].
Derived: -pineapple(x) | owns(y,x).  [resolve(241,b,231,b)].

Eliminating deliver/2

Eliminating make/2

Eliminating scan/3

Eliminating bringsMoney/2
242 -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(177,a,178,a)].
243 -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
244 -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | brings(f2(x,y,z,u,w),v7,v6).  [resolve(242,b,243,a)].
245 -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(179,a,178,a)].
Derived: -bought(x,y,z,t) | brings(x,u,z).  [resolve(245,b,244,a)].

Eliminating personalitem/1
246 owns(x,y) | -personalitem(y).  [resolve(198,a,200,b)].
247 personalitem(D).  [resolve(154,a,155,a)].

Eliminating piecesPerPound/2

Eliminating groundbeef/1

Eliminating eats/2
248 -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(197,b,192,a)].
249 eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(171,a,169,b)].
250 eats(x,B) | vegetarian(x) | -person(x).  [resolve(195,b,192,a)].
251 eats(x,B) | vegan(x) | -person(x).  [resolve(196,b,192,a)].
Derived: nonvegetarian(x) | -person(x) | -dairyproduct(B) | vegan(x) | -person(x).  [resolve(248,a,249,a)].
Derived: nonvegetarian(x) | -person(x) | vegetarian(x) | -person(x).  [resolve(248,a,250,a)].
Derived: nonvegetarian(x) | -person(x) | vegan(x) | -person(x).  [resolve(248,a,251,a)].
252 -owns(f2(x,y,z,u,w),B) | eats(f2(x,y,z,u,w),B).  [resolve(221,a,222,a)].
Derived: -owns(f2(x,y,z,u,w),B) | nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(252,b,248,a)].
253 -owns(x,B) | eats(x,B).  [resolve(221,a,223,a)].
Derived: -owns(x,B) | nonvegetarian(x) | -person(x).  [resolve(253,b,248,a)].
254 -cabbage(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(232,b,222,a)].
255 -cabbage(x) | -owns(y,x) | eats(y,x).  [resolve(232,b,223,a)].
256 -broccoli(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(233,b,222,a)].
257 -broccoli(x) | -owns(y,x) | eats(y,x).  [resolve(233,b,223,a)].
258 -potato(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(234,b,222,a)].
259 -potato(x) | -owns(y,x) | eats(y,x).  [resolve(234,b,223,a)].
260 -onion(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(235,b,222,a)].
261 -onion(x) | -owns(y,x) | eats(y,x).  [resolve(235,b,223,a)].
262 -owns(f2(x,y,z,u,w),T) | eats(f2(x,y,z,u,w),T).  [resolve(236,a,222,a)].
263 -owns(x,T) | eats(x,T).  [resolve(236,a,223,a)].
264 -apple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(237,b,222,a)].
265 -apple(x) | -owns(y,x) | eats(y,x).  [resolve(237,b,223,a)].
266 -mango(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(238,b,222,a)].
267 -mango(x) | -owns(y,x) | eats(y,x).  [resolve(238,b,223,a)].
268 -banana(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(239,b,222,a)].
269 -banana(x) | -owns(y,x) | eats(y,x).  [resolve(239,b,223,a)].
270 -strawberry(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(240,b,222,a)].
271 -strawberry(x) | -owns(y,x) | eats(y,x).  [resolve(240,b,223,a)].
272 -pineapple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(241,b,222,a)].
273 -pineapple(x) | -owns(y,x) | eats(y,x).  [resolve(241,b,223,a)].

Eliminating sellItems/2

Eliminating paid/4
274 -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(182,a,178,a)].
275 -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(180,a,178,a)].
276 -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(181,a,178,a)].
Derived: lessMoney(f2(x,y,z,u,w)) | -bought(f2(x,y,z,u,w),v5,v6,t).  [resolve(274,a,275,b)].
277 -paid(x,y,z,t) | lessMoney(x).  [resolve(183,a,178,a)].
Derived: lessMoney(x) | -bought(x,y,z,t).  [resolve(277,a,276,b)].
278 -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(184,a,178,a)].
Derived: moreMoney(x) | -bought(f2(y,z,u,w,v5),v6,x,t).  [resolve(278,a,275,b)].
279 -paid(x,y,z,t) | moreMoney(z).  [resolve(185,a,178,a)].
Derived: moreMoney(x) | -bought(y,z,x,t).  [resolve(279,a,276,b)].

Eliminating owns/2
280 -owns(f2(x,y,z,u,w),B) | nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(252,b,248,a)].
281 -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(186,a,178,a)].
282 -bought(x,y,z,t) | owns(x,y).  [resolve(187,a,178,a)].
283 owns(Shell,x).  [resolve(198,a,199,a)].
284 owns(x,y) | -dairyproducts(y).  [resolve(198,a,202,b)].
285 owns(x,y) | -beverages(y).  [resolve(198,a,203,b)].
286 owns(x,y).  [resolve(198,a,204,a)].
287 -cabbage(x) | owns(y,x).  [resolve(232,b,231,b)].
288 -broccoli(x) | owns(y,x).  [resolve(233,b,231,b)].
289 -potato(x) | owns(y,x).  [resolve(234,b,231,b)].
290 -onion(x) | owns(y,x).  [resolve(235,b,231,b)].
291 owns(x,T).  [resolve(236,a,231,b)].
292 -apple(x) | owns(y,x).  [resolve(237,b,231,b)].
293 -mango(x) | owns(y,x).  [resolve(238,b,231,b)].
294 -banana(x) | owns(y,x).  [resolve(239,b,231,b)].
295 -strawberry(x) | owns(y,x).  [resolve(240,b,231,b)].
296 -pineapple(x) | owns(y,x).  [resolve(241,b,231,b)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -bought(f2(x,y,z,u,w),B,v5,t).  [resolve(280,a,281,b)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -dairyproducts(B).  [resolve(280,a,284,a)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -beverages(B).  [resolve(280,a,285,a)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(280,a,286,a)].
297 -owns(x,B) | nonvegetarian(x) | -person(x).  [resolve(253,b,248,a)].
Derived: nonvegetarian(x) | -person(x) | -bought(x,B,y,t).  [resolve(297,a,282,b)].
Derived: nonvegetarian(Shell) | -person(Shell).  [resolve(297,a,283,a)].
Derived: nonvegetarian(x) | -person(x) | -dairyproducts(B).  [resolve(297,a,284,a)].
Derived: nonvegetarian(x) | -person(x) | -beverages(B).  [resolve(297,a,285,a)].
Derived: nonvegetarian(x) | -person(x).  [resolve(297,a,286,a)].

Eliminating child/1

Eliminating unit/1

Eliminating usedToWeight/2

Eliminating brings/3

Eliminating nonvegetarian/1

Eliminating lessMoney/1

Eliminating moreMoney/1

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ person, see, bought ]).
Function symbol precedence:  function_order([ t, John, Safeway, B, Mary, T ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      298 person(John).  [assumption].
kept:      299 bought(John,T,Safeway,t).  [assumption].
kept:      300 bought(John,B,Safeway,t).  [assumption].
kept:      301 person(Mary).  [assumption].
kept:      302 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
kept:      303 -bought(John,B,x,y).  [resolve(166,a,165,a)].

============================== PROOF =================================

% Proof 1 at 0.02 (+ 0.01) seconds.
% Length of proof is 9.
% Level of proof is 4.
% Maximum clause weight is 5.000.
% Given clauses 0.

17 (all x (beef(x) -> meat(x))) # label(non_clause).  [assumption].
79 (exists x exists z exists t (meat(x) & bought(John,x,z,t))) # label(non_clause) # label(goal).  [goal].
159 -beef(x) | meat(x).  [clausify(17)].
160 beef(B).  [assumption].
165 -meat(x) | -bought(John,x,y,z).  [deny(79)].
166 meat(B).  [resolve(159,a,160,a)].
300 bought(John,B,Safeway,t).  [assumption].
303 -bought(John,B,x,y).  [resolve(166,a,165,a)].
304 $F.  [resolve(303,a,300,a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=6. Kept=6. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=5, Disabled=335. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=0. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=0. Nonunit_bsub_feature_tests=0.
Megabytes=0.39.
User_CPU=0.02, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 9697 exit (max_proofs) Sun Apr 26 00:46:54 2020


















d.	If Mary was buying tomatoes at the same time as John, did he see her?

> bought(Mary, T, Safeway, t)-> see(John, Mary)|see(Mary, John).


============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 9699 was started by rinkleseth on Rinkles-MacBook-Pro.local,
Sun Apr 26 00:47:10 2020
The command was "/Users/rinkleseth/Downloads/LADR-2009-11A/bin/prover9 -f /Users/rinkleseth/Desktop/spring2020/AI/project/input.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /Users/rinkleseth/Desktop/spring2020/AI/project/input.in


formulas(sos).
(all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))).
(all x (supermarket(x) -> shop(x))).
(all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))).
(all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))).
(all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))).
(all x (customer(x) -> get(x,receipt))).
(all x ((all y supermarket(x)) & item(y) -> deliver(x,y))).
(all x ((exists y shop(x)) & item(y) -> sells(x,y))).
(all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))).
(all x (customer(x) -> adult(x))).
(all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))).
(all x (people(x) & works(x) -> employee(x))).
(all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))).
(all x (fooditem(x) -> item(x))).
(all x (personalitem(x) -> item(x))).
deodorant(D).
(all x (deodorant(x) -> personalitem(x))).
tomato(T).
beef(B).
(all x (beef(x) -> meat(x))).
(all x (lamb(x) -> meat(x))).
(all x (pork(x) -> meat(x))).
(all x (sausage(x) -> meat(x))).
(all x (stew_meat(x) -> meat(x))).
(all x (halal(x) -> meat(x))).
(all x (meat(x) -> fooditem(x))).
(all x (person(x) -> people(x))).
(all x ((all y supermarket(x)) & item(y) -> -make(x,y))).
person(John).
bought(John,T,Safeway,t).
weight(T,2).
weight(B,1).
bought(John,B,Safeway,t).
person(Mary).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))).
money(card).
money(cash).
isa(creditcard,card).
supermarket(Safeway).
supermarket(NBS).
isa(NBS,Safeway).
locatedAt(Safeway,NorthBerkeley).
time(t).
measure(Pound).
measure(Ounce).
measure(Kilogram).
(all x (fooditem(x) & weight(x,1) -> unit(x))).
(all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))).
(all x (tomato(x) -> piecesPerPound(x,5))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))).
(all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))).
(all x (meat(x) -> animalproduct(x))).
(all x (fish(x) -> animalproduct(x))).
(all x (egg(x) -> animalproduct(x))).
(all x (animalproduct(x) -> fooditem(x))).
(all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))).
(all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))).
(all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))).
(all x (groundbeef(x) -> beef(x))).
gas(G).
(all x (gas(x) & sells(Shell,x))).
(all x (adult(x) -> -child(x))).
(all x (child(x) -> -adult(x))).
(all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))).
hasSize(carTrunk,600).
(all x (milk(x) -> dairyproduct(x))).
(all x (cheese(x) -> dairyproduct(x))).
(all x (butter(x) -> dairyproduct(x))).
(all x (fish(x) -> meat(x))).
(all x (vegetable(x) -> fooditem(x))).
(all x (tomato(x) -> vegetable(x))).
(all x (cabbage(x) -> vegetable(x))).
(all x (broccoli(x) -> vegetable(x))).
(all x (potato(x) -> vegetable(x))).
(all x (onion(x) -> vegetable(x))).
(all x (juice(x) -> beverage(x))).
(all x (soda(x) -> beverage(x))).
(all x (alcohol(x) -> beverage(x))).
(all x (water(x) -> beverage(x))).
(all x (tea(x) -> beverage(x))).
(all x (coffee(x) -> beverage(x))).
(all x (fruit(x) -> fooditem(x))).
(all x (apple(x) -> fruit(x))).
(all x (mango(x) -> fruit(x))).
(all x (banana(x) -> fruit(x))).
(all x (strawberry(x) -> fruit(x))).
(all x (pineapple(x) -> fruit(x))).
(all x (lotion(x) -> personalitem(x))).
(all x (hairspray(x) -> personalitem(x))).
(all x (shavingcream(x) -> personalitem(x))).
(all x (cosmetic(x) -> personalitem(x))).
(all x (toothbrush(x) -> personalitem(x))).
(all x (bodywash(x) -> personalitem(x))).
(all x (soap(x) -> personalitem(x))).
end_of_list.

formulas(goals).
bought(Mary,T,Safeway,t) -> see(John,Mary) | see(Mary,John).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))) # label(non_clause).  [assumption].
2 (all x (supermarket(x) -> shop(x))) # label(non_clause).  [assumption].
3 (all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))) # label(non_clause).  [assumption].
4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
6 (all x (customer(x) -> get(x,receipt))) # label(non_clause).  [assumption].
7 (all x ((all y supermarket(x)) & item(y) -> deliver(x,y))) # label(non_clause).  [assumption].
8 (all x ((exists y shop(x)) & item(y) -> sells(x,y))) # label(non_clause).  [assumption].
9 (all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))) # label(non_clause).  [assumption].
10 (all x (customer(x) -> adult(x))) # label(non_clause).  [assumption].
11 (all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))) # label(non_clause).  [assumption].
12 (all x (people(x) & works(x) -> employee(x))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
14 (all x (fooditem(x) -> item(x))) # label(non_clause).  [assumption].
15 (all x (personalitem(x) -> item(x))) # label(non_clause).  [assumption].
16 (all x (deodorant(x) -> personalitem(x))) # label(non_clause).  [assumption].
17 (all x (beef(x) -> meat(x))) # label(non_clause).  [assumption].
18 (all x (lamb(x) -> meat(x))) # label(non_clause).  [assumption].
19 (all x (pork(x) -> meat(x))) # label(non_clause).  [assumption].
20 (all x (sausage(x) -> meat(x))) # label(non_clause).  [assumption].
21 (all x (stew_meat(x) -> meat(x))) # label(non_clause).  [assumption].
22 (all x (halal(x) -> meat(x))) # label(non_clause).  [assumption].
23 (all x (meat(x) -> fooditem(x))) # label(non_clause).  [assumption].
24 (all x (person(x) -> people(x))) # label(non_clause).  [assumption].
25 (all x ((all y supermarket(x)) & item(y) -> -make(x,y))) # label(non_clause).  [assumption].
26 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
27 (all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))) # label(non_clause).  [assumption].
28 (all x (fooditem(x) & weight(x,1) -> unit(x))) # label(non_clause).  [assumption].
29 (all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))) # label(non_clause).  [assumption].
30 (all x (tomato(x) -> piecesPerPound(x,5))) # label(non_clause).  [assumption].
31 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))) # label(non_clause).  [assumption].
32 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))) # label(non_clause).  [assumption].
33 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))) # label(non_clause).  [assumption].
34 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))) # label(non_clause).  [assumption].
35 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
36 (all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))) # label(non_clause).  [assumption].
37 (all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))) # label(non_clause).  [assumption].
38 (all x (meat(x) -> animalproduct(x))) # label(non_clause).  [assumption].
39 (all x (fish(x) -> animalproduct(x))) # label(non_clause).  [assumption].
40 (all x (egg(x) -> animalproduct(x))) # label(non_clause).  [assumption].
41 (all x (animalproduct(x) -> fooditem(x))) # label(non_clause).  [assumption].
42 (all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))) # label(non_clause).  [assumption].
43 (all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))) # label(non_clause).  [assumption].
44 (all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))) # label(non_clause).  [assumption].
45 (all x (groundbeef(x) -> beef(x))) # label(non_clause).  [assumption].
46 (all x (gas(x) & sells(Shell,x))) # label(non_clause).  [assumption].
47 (all x (adult(x) -> -child(x))) # label(non_clause).  [assumption].
48 (all x (child(x) -> -adult(x))) # label(non_clause).  [assumption].
49 (all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))) # label(non_clause).  [assumption].
50 (all x (milk(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
51 (all x (cheese(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
52 (all x (butter(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
53 (all x (fish(x) -> meat(x))) # label(non_clause).  [assumption].
54 (all x (vegetable(x) -> fooditem(x))) # label(non_clause).  [assumption].
55 (all x (tomato(x) -> vegetable(x))) # label(non_clause).  [assumption].
56 (all x (cabbage(x) -> vegetable(x))) # label(non_clause).  [assumption].
57 (all x (broccoli(x) -> vegetable(x))) # label(non_clause).  [assumption].
58 (all x (potato(x) -> vegetable(x))) # label(non_clause).  [assumption].
59 (all x (onion(x) -> vegetable(x))) # label(non_clause).  [assumption].
60 (all x (juice(x) -> beverage(x))) # label(non_clause).  [assumption].
61 (all x (soda(x) -> beverage(x))) # label(non_clause).  [assumption].
62 (all x (alcohol(x) -> beverage(x))) # label(non_clause).  [assumption].
63 (all x (water(x) -> beverage(x))) # label(non_clause).  [assumption].
64 (all x (tea(x) -> beverage(x))) # label(non_clause).  [assumption].
65 (all x (coffee(x) -> beverage(x))) # label(non_clause).  [assumption].
66 (all x (fruit(x) -> fooditem(x))) # label(non_clause).  [assumption].
67 (all x (apple(x) -> fruit(x))) # label(non_clause).  [assumption].
68 (all x (mango(x) -> fruit(x))) # label(non_clause).  [assumption].
69 (all x (banana(x) -> fruit(x))) # label(non_clause).  [assumption].
70 (all x (strawberry(x) -> fruit(x))) # label(non_clause).  [assumption].
71 (all x (pineapple(x) -> fruit(x))) # label(non_clause).  [assumption].
72 (all x (lotion(x) -> personalitem(x))) # label(non_clause).  [assumption].
73 (all x (hairspray(x) -> personalitem(x))) # label(non_clause).  [assumption].
74 (all x (shavingcream(x) -> personalitem(x))) # label(non_clause).  [assumption].
75 (all x (cosmetic(x) -> personalitem(x))) # label(non_clause).  [assumption].
76 (all x (toothbrush(x) -> personalitem(x))) # label(non_clause).  [assumption].
77 (all x (bodywash(x) -> personalitem(x))) # label(non_clause).  [assumption].
78 (all x (soap(x) -> personalitem(x))) # label(non_clause).  [assumption].
79 bought(Mary,T,Safeway,t) -> see(John,Mary) | see(Mary,John) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | shop(x).  [clausify(2)].
-supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
-supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
customer(f2(x,y,z,u,w)).  [clausify(4)].
supermarket(x).  [clausify(4)].
employee(x).  [clausify(4)].
item(x).  [clausify(4)].
restock(x,y,z).  [clausify(4)].
assist(x,y).  [clausify(4)].
supermarket(f3(x)).  [clausify(5)].
customer(x).  [clausify(5)].
use(x,Cart).  [clausify(5)].
-customer(x) | get(x,receipt).  [clausify(6)].
-supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
-shop(x) | -item(y) | sells(x,y).  [clausify(8)].
-time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
-customer(x) | adult(x).  [clausify(10)].
-people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
-people(x) | -works(x) | employee(x).  [clausify(12)].
shop(x).  [clausify(13)].
has(x,y).  [clausify(13)].
employee(x).  [clausify(13)].
customer(x).  [clausify(13)].
-fooditem(x) | item(x).  [clausify(14)].
-personalitem(x) | item(x).  [clausify(15)].
deodorant(D).  [assumption].
-deodorant(x) | personalitem(x).  [clausify(16)].
tomato(T).  [assumption].
beef(B).  [assumption].
-beef(x) | meat(x).  [clausify(17)].
-lamb(x) | meat(x).  [clausify(18)].
-pork(x) | meat(x).  [clausify(19)].
-sausage(x) | meat(x).  [clausify(20)].
-stew_meat(x) | meat(x).  [clausify(21)].
-halal(x) | meat(x).  [clausify(22)].
-meat(x) | fooditem(x).  [clausify(23)].
-person(x) | people(x).  [clausify(24)].
-supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
person(John).  [assumption].
bought(John,T,Safeway,t).  [assumption].
weight(T,2).  [assumption].
weight(B,1).  [assumption].
bought(John,B,Safeway,t).  [assumption].
person(Mary).  [assumption].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
money(card).  [assumption].
money(cash).  [assumption].
isa(creditcard,card).  [assumption].
supermarket(Safeway).  [assumption].
supermarket(NBS).  [assumption].
isa(NBS,Safeway).  [assumption].
locatedAt(Safeway,NorthBerkeley).  [assumption].
time(t).  [assumption].
measure(Pound).  [assumption].
measure(Ounce).  [assumption].
measure(Kilogram).  [assumption].
-fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
-fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
-tomato(x) | piecesPerPound(x,5).  [clausify(30)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
-customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
-person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
-meat(x) | animalproduct(x).  [clausify(38)].
-fish(x) | animalproduct(x).  [clausify(39)].
-egg(x) | animalproduct(x).  [clausify(40)].
-animalproduct(x) | fooditem(x).  [clausify(41)].
-people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
-people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
-people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
-people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
-groundbeef(x) | beef(x).  [clausify(45)].
gas(G).  [assumption].
gas(x).  [clausify(46)].
sells(Shell,x).  [clausify(46)].
-adult(x) | -child(x).  [clausify(47)].
-child(x) | -adult(x).  [clausify(48)].
-shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
hasSize(carTrunk,600).  [assumption].
-milk(x) | dairyproduct(x).  [clausify(50)].
-cheese(x) | dairyproduct(x).  [clausify(51)].
-butter(x) | dairyproduct(x).  [clausify(52)].
-fish(x) | meat(x).  [clausify(53)].
-vegetable(x) | fooditem(x).  [clausify(54)].
-tomato(x) | vegetable(x).  [clausify(55)].
-cabbage(x) | vegetable(x).  [clausify(56)].
-broccoli(x) | vegetable(x).  [clausify(57)].
-potato(x) | vegetable(x).  [clausify(58)].
-onion(x) | vegetable(x).  [clausify(59)].
-juice(x) | beverage(x).  [clausify(60)].
-soda(x) | beverage(x).  [clausify(61)].
-alcohol(x) | beverage(x).  [clausify(62)].
-water(x) | beverage(x).  [clausify(63)].
-tea(x) | beverage(x).  [clausify(64)].
-coffee(x) | beverage(x).  [clausify(65)].
-fruit(x) | fooditem(x).  [clausify(66)].
-apple(x) | fruit(x).  [clausify(67)].
-mango(x) | fruit(x).  [clausify(68)].
-banana(x) | fruit(x).  [clausify(69)].
-strawberry(x) | fruit(x).  [clausify(70)].
-pineapple(x) | fruit(x).  [clausify(71)].
-lotion(x) | personalitem(x).  [clausify(72)].
-hairspray(x) | personalitem(x).  [clausify(73)].
-shavingcream(x) | personalitem(x).  [clausify(74)].
-cosmetic(x) | personalitem(x).  [clausify(75)].
-toothbrush(x) | personalitem(x).  [clausify(76)].
-bodywash(x) | personalitem(x).  [clausify(77)].
-soap(x) | personalitem(x).  [clausify(78)].
bought(Mary,T,Safeway,t).  [deny(79)].
-see(John,Mary).  [deny(79)].
-see(Mary,John).  [deny(79)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating supermarket/1
80 supermarket(x).  [clausify(4)].
81 -supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
82 -supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
83 -supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
84 -supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
85 -supermarket(x) | shop(x).  [clausify(2)].
86 -supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
87 -supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
Derived: -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
Derived: -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
Derived: -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
Derived: -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
Derived: -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
88 supermarket(f3(x)).  [clausify(5)].
89 -supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
Derived: -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
90 -supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
Derived: -item(x) | -make(y,x).  [resolve(90,a,80,a)].
91 supermarket(Safeway).  [assumption].
Derived: shop(Safeway).  [resolve(91,a,85,a)].
92 supermarket(NBS).  [assumption].
Derived: shop(NBS).  [resolve(92,a,85,a)].

Eliminating customer/1
93 -customer(x) | get(x,receipt).  [clausify(6)].
94 customer(f2(x,y,z,u,w)).  [clausify(4)].
95 customer(x).  [clausify(5)].
Derived: get(f2(x,y,z,u,w),receipt).  [resolve(93,a,94,a)].
Derived: get(x,receipt).  [resolve(93,a,95,a)].
96 -time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
97 -customer(x) | adult(x).  [clausify(10)].
Derived: adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
Derived: adult(x).  [resolve(97,a,95,a)].
98 customer(x).  [clausify(13)].
99 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
100 -shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
101 -shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
102 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
103 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
104 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
105 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
106 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
107 -customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
Derived: -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
Derived: -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
108 -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].

Eliminating employee/1
109 -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
110 employee(x).  [clausify(4)].
111 -people(x) | -works(x) | employee(x).  [clausify(12)].
112 employee(x).  [clausify(13)].

Eliminating item/1
113 -shop(x) | -item(y) | sells(x,y).  [clausify(8)].
114 item(x).  [clausify(4)].
Derived: -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
115 -people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
Derived: -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
116 -fooditem(x) | item(x).  [clausify(14)].
117 -personalitem(x) | item(x).  [clausify(15)].
118 -person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
Derived: -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
119 -shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
Derived: -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
120 -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
Derived: deliver(x,y).  [resolve(120,a,114,a)].
121 -item(x) | -make(y,x).  [resolve(90,a,80,a)].
Derived: -make(x,y).  [resolve(121,a,114,a)].
122 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
123 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
124 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
125 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
126 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
127 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
128 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
129 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
130 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
131 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
132 -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: scan(f2(x,y,z,u,w),v5,v6).  [resolve(132,a,114,a)].
133 -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].
Derived: scan(x,y,z).  [resolve(133,a,114,a)].

Eliminating restock/3

Eliminating assist/2

Eliminating use/2

Eliminating shop/1
134 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
135 shop(x).  [clausify(13)].
136 shop(Safeway).  [resolve(91,a,85,a)].
137 shop(NBS).  [resolve(92,a,85,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
138 -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
Derived: -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
139 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | money(v6).  [resolve(139,a,135,a)].
140 -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
Derived: -bringsMoney(x,y) | money(z).  [resolve(140,a,135,a)].
141 -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
Derived: sells(x,y).  [resolve(141,a,135,a)].
142 -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
Derived: -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
143 -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
Derived: -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
144 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
145 -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
146 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
147 -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
148 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
149 -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
150 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
151 -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
152 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
153 -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].

Eliminating has/2

Eliminating deodorant/1
154 -deodorant(x) | personalitem(x).  [clausify(16)].
155 deodorant(D).  [assumption].
Derived: personalitem(D).  [resolve(154,a,155,a)].

Eliminating tomato/1
156 -tomato(x) | piecesPerPound(x,5).  [clausify(30)].
157 tomato(T).  [assumption].
Derived: piecesPerPound(T,5).  [resolve(156,a,157,a)].
158 -tomato(x) | vegetable(x).  [clausify(55)].
Derived: vegetable(T).  [resolve(158,a,157,a)].

Eliminating beef/1
159 -beef(x) | meat(x).  [clausify(17)].
160 beef(B).  [assumption].
Derived: meat(B).  [resolve(159,a,160,a)].
161 -groundbeef(x) | beef(x).  [clausify(45)].
Derived: -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].

Eliminating lamb/1

Eliminating pork/1

Eliminating sausage/1

Eliminating stew_meat/1

Eliminating halal/1

Eliminating meat/1
162 -fish(x) | meat(x).  [clausify(53)].
163 -meat(x) | fooditem(x).  [clausify(23)].
164 -meat(x) | animalproduct(x).  [clausify(38)].
Derived: -fish(x) | fooditem(x).  [resolve(162,b,163,a)].
Derived: -fish(x) | animalproduct(x).  [resolve(162,b,164,a)].
165 meat(B).  [resolve(159,a,160,a)].
Derived: fooditem(B).  [resolve(165,a,163,a)].
Derived: animalproduct(B).  [resolve(165,a,164,a)].
166 -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(166,b,163,a)].
Derived: -groundbeef(x) | animalproduct(x).  [resolve(166,b,164,a)].

Eliminating people/1
167 -people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
168 -person(x) | people(x).  [clausify(24)].
Derived: eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(167,a,168,b)].
169 -people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(169,a,168,b)].
170 -people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(170,a,168,b)].
171 -people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
Derived: -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(171,a,168,b)].
172 -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
Derived: -sellItems(x,y) | seller(x) | -person(x).  [resolve(172,a,168,b)].

Eliminating weight/2
173 -fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
174 weight(T,2).  [assumption].
175 weight(B,1).  [assumption].
Derived: -fooditem(B) | unit(B).  [resolve(173,b,175,a)].

Eliminating money/1

Eliminating isa/2

Eliminating locatedAt/2

Eliminating time/1
176 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
177 time(t).  [assumption].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(176,a,177,a)].
178 -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
Derived: -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].
179 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(179,a,177,a)].
180 -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
Derived: -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
181 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(181,a,177,a)].
182 -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
Derived: -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
183 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(183,a,177,a)].
184 -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
Derived: -paid(x,y,z,t) | moreMoney(z).  [resolve(184,a,177,a)].
185 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(185,a,177,a)].
186 -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].
Derived: -bought(x,y,z,t) | owns(x,y).  [resolve(186,a,177,a)].

Eliminating measure/1
187 -fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
188 measure(Pound).  [assumption].
189 measure(Ounce).  [assumption].
190 measure(Kilogram).  [assumption].
Derived: -fooditem(x) | usedToWeight(Pound,x).  [resolve(187,b,188,a)].
Derived: -fooditem(x) | usedToWeight(Ounce,x).  [resolve(187,b,189,a)].
Derived: -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(187,b,190,a)].

Eliminating fish/1

Eliminating egg/1

Eliminating animalproduct/1
191 animalproduct(B).  [resolve(165,a,164,a)].
192 -animalproduct(x) | fooditem(x).  [clausify(41)].
Derived: fooditem(B).  [resolve(191,a,192,a)].
193 -groundbeef(x) | animalproduct(x).  [resolve(166,b,164,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(193,b,192,a)].
194 eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(167,a,168,b)].
Derived: eats(x,B) | vegetarian(x) | -person(x).  [resolve(194,b,191,a)].
Derived: eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(194,b,193,b)].
195 eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(169,a,168,b)].
Derived: eats(x,B) | vegan(x) | -person(x).  [resolve(195,b,191,a)].
Derived: eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(195,b,193,b)].
196 -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(171,a,168,b)].
Derived: -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(196,b,191,a)].
Derived: -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(196,b,193,b)].

Eliminating gas/1

Eliminating sells/2
197 -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
198 sells(Shell,x).  [clausify(46)].
199 -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
200 -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
201 -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
202 -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
203 sells(x,y).  [resolve(141,a,135,a)].
Derived: owns(Shell,x).  [resolve(197,a,198,a)].
Derived: owns(x,y) | -personalitem(y).  [resolve(197,a,199,b)].
Derived: owns(x,y) | -fooditem(y).  [resolve(197,a,200,b)].
Derived: owns(x,y) | -dairyproducts(y).  [resolve(197,a,201,b)].
Derived: owns(x,y) | -beverages(y).  [resolve(197,a,202,b)].
Derived: owns(x,y).  [resolve(197,a,203,a)].

Eliminating adult/1
204 adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
205 -adult(x) | -child(x).  [clausify(47)].
206 -child(x) | -adult(x).  [clausify(48)].
Derived: -child(f2(x,y,z,u,w)).  [resolve(204,a,205,a)].
207 adult(x).  [resolve(97,a,95,a)].
Derived: -child(x).  [resolve(207,a,205,a)].

Eliminating hasSize/2

Eliminating milk/1

Eliminating cheese/1

Eliminating butter/1

Eliminating vegetable/1
208 -cabbage(x) | vegetable(x).  [clausify(56)].
209 -vegetable(x) | fooditem(x).  [clausify(54)].
Derived: -cabbage(x) | fooditem(x).  [resolve(208,b,209,a)].
210 -broccoli(x) | vegetable(x).  [clausify(57)].
Derived: -broccoli(x) | fooditem(x).  [resolve(210,b,209,a)].
211 -potato(x) | vegetable(x).  [clausify(58)].
Derived: -potato(x) | fooditem(x).  [resolve(211,b,209,a)].
212 -onion(x) | vegetable(x).  [clausify(59)].
Derived: -onion(x) | fooditem(x).  [resolve(212,b,209,a)].
213 vegetable(T).  [resolve(158,a,157,a)].
Derived: fooditem(T).  [resolve(213,a,209,a)].

Eliminating juice/1

Eliminating soda/1

Eliminating alcohol/1

Eliminating water/1

Eliminating tea/1

Eliminating coffee/1

Eliminating fruit/1
214 -apple(x) | fruit(x).  [clausify(67)].
215 -fruit(x) | fooditem(x).  [clausify(66)].
Derived: -apple(x) | fooditem(x).  [resolve(214,b,215,a)].
216 -mango(x) | fruit(x).  [clausify(68)].
Derived: -mango(x) | fooditem(x).  [resolve(216,b,215,a)].
217 -banana(x) | fruit(x).  [clausify(69)].
Derived: -banana(x) | fooditem(x).  [resolve(217,b,215,a)].
218 -strawberry(x) | fruit(x).  [clausify(70)].
Derived: -strawberry(x) | fooditem(x).  [resolve(218,b,215,a)].
219 -pineapple(x) | fruit(x).  [clausify(71)].
Derived: -pineapple(x) | fooditem(x).  [resolve(219,b,215,a)].

Eliminating lotion/1

Eliminating hairspray/1

Eliminating shavingcream/1

Eliminating cosmetic/1

Eliminating toothbrush/1

Eliminating bodywash/1

Eliminating soap/1

Eliminating get/2

Eliminating fooditem/1
220 fooditem(B).  [resolve(165,a,163,a)].
221 -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
222 -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
Derived: -owns(f2(x,y,z,u,w),B) | eats(f2(x,y,z,u,w),B).  [resolve(220,a,221,a)].
Derived: -owns(x,B) | eats(x,B).  [resolve(220,a,222,a)].
223 -groundbeef(x) | fooditem(x).  [resolve(166,b,163,a)].
Derived: -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(223,b,221,a)].
Derived: -groundbeef(x) | -owns(y,x) | eats(y,x).  [resolve(223,b,222,a)].
224 -fooditem(B) | unit(B).  [resolve(173,b,175,a)].
Derived: unit(B).  [resolve(224,a,220,a)].
225 -fooditem(x) | usedToWeight(Pound,x).  [resolve(187,b,188,a)].
Derived: usedToWeight(Pound,B).  [resolve(225,a,220,a)].
Derived: usedToWeight(Pound,x) | -groundbeef(x).  [resolve(225,a,223,b)].
226 -fooditem(x) | usedToWeight(Ounce,x).  [resolve(187,b,189,a)].
Derived: usedToWeight(Ounce,B).  [resolve(226,a,220,a)].
Derived: usedToWeight(Ounce,x) | -groundbeef(x).  [resolve(226,a,223,b)].
227 -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(187,b,190,a)].
Derived: usedToWeight(Kilogram,B).  [resolve(227,a,220,a)].
Derived: usedToWeight(Kilogram,x) | -groundbeef(x).  [resolve(227,a,223,b)].
228 fooditem(B).  [resolve(191,a,192,a)].
229 -groundbeef(x) | fooditem(x).  [resolve(193,b,192,a)].
230 owns(x,y) | -fooditem(y).  [resolve(197,a,200,b)].
231 -cabbage(x) | fooditem(x).  [resolve(208,b,209,a)].
Derived: -cabbage(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(231,b,221,a)].
Derived: -cabbage(x) | -owns(y,x) | eats(y,x).  [resolve(231,b,222,a)].
Derived: -cabbage(x) | usedToWeight(Pound,x).  [resolve(231,b,225,a)].
Derived: -cabbage(x) | usedToWeight(Ounce,x).  [resolve(231,b,226,a)].
Derived: -cabbage(x) | usedToWeight(Kilogram,x).  [resolve(231,b,227,a)].
Derived: -cabbage(x) | owns(y,x).  [resolve(231,b,230,b)].
232 -broccoli(x) | fooditem(x).  [resolve(210,b,209,a)].
Derived: -broccoli(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(232,b,221,a)].
Derived: -broccoli(x) | -owns(y,x) | eats(y,x).  [resolve(232,b,222,a)].
Derived: -broccoli(x) | usedToWeight(Pound,x).  [resolve(232,b,225,a)].
Derived: -broccoli(x) | usedToWeight(Ounce,x).  [resolve(232,b,226,a)].
Derived: -broccoli(x) | usedToWeight(Kilogram,x).  [resolve(232,b,227,a)].
Derived: -broccoli(x) | owns(y,x).  [resolve(232,b,230,b)].
233 -potato(x) | fooditem(x).  [resolve(211,b,209,a)].
Derived: -potato(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(233,b,221,a)].
Derived: -potato(x) | -owns(y,x) | eats(y,x).  [resolve(233,b,222,a)].
Derived: -potato(x) | usedToWeight(Pound,x).  [resolve(233,b,225,a)].
Derived: -potato(x) | usedToWeight(Ounce,x).  [resolve(233,b,226,a)].
Derived: -potato(x) | usedToWeight(Kilogram,x).  [resolve(233,b,227,a)].
Derived: -potato(x) | owns(y,x).  [resolve(233,b,230,b)].
234 -onion(x) | fooditem(x).  [resolve(212,b,209,a)].
Derived: -onion(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(234,b,221,a)].
Derived: -onion(x) | -owns(y,x) | eats(y,x).  [resolve(234,b,222,a)].
Derived: -onion(x) | usedToWeight(Pound,x).  [resolve(234,b,225,a)].
Derived: -onion(x) | usedToWeight(Ounce,x).  [resolve(234,b,226,a)].
Derived: -onion(x) | usedToWeight(Kilogram,x).  [resolve(234,b,227,a)].
Derived: -onion(x) | owns(y,x).  [resolve(234,b,230,b)].
235 fooditem(T).  [resolve(213,a,209,a)].
Derived: -owns(f2(x,y,z,u,w),T) | eats(f2(x,y,z,u,w),T).  [resolve(235,a,221,a)].
Derived: -owns(x,T) | eats(x,T).  [resolve(235,a,222,a)].
Derived: usedToWeight(Pound,T).  [resolve(235,a,225,a)].
Derived: usedToWeight(Ounce,T).  [resolve(235,a,226,a)].
Derived: usedToWeight(Kilogram,T).  [resolve(235,a,227,a)].
Derived: owns(x,T).  [resolve(235,a,230,b)].
236 -apple(x) | fooditem(x).  [resolve(214,b,215,a)].
Derived: -apple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(236,b,221,a)].
Derived: -apple(x) | -owns(y,x) | eats(y,x).  [resolve(236,b,222,a)].
Derived: -apple(x) | usedToWeight(Pound,x).  [resolve(236,b,225,a)].
Derived: -apple(x) | usedToWeight(Ounce,x).  [resolve(236,b,226,a)].
Derived: -apple(x) | usedToWeight(Kilogram,x).  [resolve(236,b,227,a)].
Derived: -apple(x) | owns(y,x).  [resolve(236,b,230,b)].
237 -mango(x) | fooditem(x).  [resolve(216,b,215,a)].
Derived: -mango(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(237,b,221,a)].
Derived: -mango(x) | -owns(y,x) | eats(y,x).  [resolve(237,b,222,a)].
Derived: -mango(x) | usedToWeight(Pound,x).  [resolve(237,b,225,a)].
Derived: -mango(x) | usedToWeight(Ounce,x).  [resolve(237,b,226,a)].
Derived: -mango(x) | usedToWeight(Kilogram,x).  [resolve(237,b,227,a)].
Derived: -mango(x) | owns(y,x).  [resolve(237,b,230,b)].
238 -banana(x) | fooditem(x).  [resolve(217,b,215,a)].
Derived: -banana(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(238,b,221,a)].
Derived: -banana(x) | -owns(y,x) | eats(y,x).  [resolve(238,b,222,a)].
Derived: -banana(x) | usedToWeight(Pound,x).  [resolve(238,b,225,a)].
Derived: -banana(x) | usedToWeight(Ounce,x).  [resolve(238,b,226,a)].
Derived: -banana(x) | usedToWeight(Kilogram,x).  [resolve(238,b,227,a)].
Derived: -banana(x) | owns(y,x).  [resolve(238,b,230,b)].
239 -strawberry(x) | fooditem(x).  [resolve(218,b,215,a)].
Derived: -strawberry(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(239,b,221,a)].
Derived: -strawberry(x) | -owns(y,x) | eats(y,x).  [resolve(239,b,222,a)].
Derived: -strawberry(x) | usedToWeight(Pound,x).  [resolve(239,b,225,a)].
Derived: -strawberry(x) | usedToWeight(Ounce,x).  [resolve(239,b,226,a)].
Derived: -strawberry(x) | usedToWeight(Kilogram,x).  [resolve(239,b,227,a)].
Derived: -strawberry(x) | owns(y,x).  [resolve(239,b,230,b)].
240 -pineapple(x) | fooditem(x).  [resolve(219,b,215,a)].
Derived: -pineapple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(240,b,221,a)].
Derived: -pineapple(x) | -owns(y,x) | eats(y,x).  [resolve(240,b,222,a)].
Derived: -pineapple(x) | usedToWeight(Pound,x).  [resolve(240,b,225,a)].
Derived: -pineapple(x) | usedToWeight(Ounce,x).  [resolve(240,b,226,a)].
Derived: -pineapple(x) | usedToWeight(Kilogram,x).  [resolve(240,b,227,a)].
Derived: -pineapple(x) | owns(y,x).  [resolve(240,b,230,b)].

Eliminating deliver/2

Eliminating make/2

Eliminating scan/3

Eliminating bringsMoney/2
241 -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(176,a,177,a)].
242 -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
243 -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | brings(f2(x,y,z,u,w),v7,v6).  [resolve(241,b,242,a)].
244 -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].
Derived: -bought(x,y,z,t) | brings(x,u,z).  [resolve(244,b,243,a)].

Eliminating personalitem/1
245 owns(x,y) | -personalitem(y).  [resolve(197,a,199,b)].
246 personalitem(D).  [resolve(154,a,155,a)].

Eliminating piecesPerPound/2

Eliminating eats/2
247 -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(196,b,191,a)].
248 eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(170,a,168,b)].
249 eats(x,B) | vegetarian(x) | -person(x).  [resolve(194,b,191,a)].
250 eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(194,b,193,b)].
251 eats(x,B) | vegan(x) | -person(x).  [resolve(195,b,191,a)].
252 eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(195,b,193,b)].
Derived: nonvegetarian(x) | -person(x) | -dairyproduct(B) | vegan(x) | -person(x).  [resolve(247,a,248,a)].
Derived: nonvegetarian(x) | -person(x) | vegetarian(x) | -person(x).  [resolve(247,a,249,a)].
Derived: nonvegetarian(x) | -person(x) | vegan(x) | -person(x).  [resolve(247,a,251,a)].
253 -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(196,b,193,b)].
254 -owns(f2(x,y,z,u,w),B) | eats(f2(x,y,z,u,w),B).  [resolve(220,a,221,a)].
Derived: -owns(f2(x,y,z,u,w),B) | nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(254,b,247,a)].
255 -owns(x,B) | eats(x,B).  [resolve(220,a,222,a)].
Derived: -owns(x,B) | nonvegetarian(x) | -person(x).  [resolve(255,b,247,a)].
256 -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(223,b,221,a)].
Derived: -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | nonvegetarian(f2(y,z,u,w,v5)) | -person(f2(y,z,u,w,v5)) | -groundbeef(x).  [resolve(256,c,253,a)].
257 -groundbeef(x) | -owns(y,x) | eats(y,x).  [resolve(223,b,222,a)].
Derived: -groundbeef(x) | -owns(y,x) | nonvegetarian(y) | -person(y) | -groundbeef(x).  [resolve(257,c,253,a)].
258 -cabbage(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(231,b,221,a)].
259 -cabbage(x) | -owns(y,x) | eats(y,x).  [resolve(231,b,222,a)].
260 -broccoli(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(232,b,221,a)].
261 -broccoli(x) | -owns(y,x) | eats(y,x).  [resolve(232,b,222,a)].
262 -potato(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(233,b,221,a)].
263 -potato(x) | -owns(y,x) | eats(y,x).  [resolve(233,b,222,a)].
264 -onion(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(234,b,221,a)].
265 -onion(x) | -owns(y,x) | eats(y,x).  [resolve(234,b,222,a)].
266 -owns(f2(x,y,z,u,w),T) | eats(f2(x,y,z,u,w),T).  [resolve(235,a,221,a)].
267 -owns(x,T) | eats(x,T).  [resolve(235,a,222,a)].
268 -apple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(236,b,221,a)].
269 -apple(x) | -owns(y,x) | eats(y,x).  [resolve(236,b,222,a)].
270 -mango(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(237,b,221,a)].
271 -mango(x) | -owns(y,x) | eats(y,x).  [resolve(237,b,222,a)].
272 -banana(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(238,b,221,a)].
273 -banana(x) | -owns(y,x) | eats(y,x).  [resolve(238,b,222,a)].
274 -strawberry(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(239,b,221,a)].
275 -strawberry(x) | -owns(y,x) | eats(y,x).  [resolve(239,b,222,a)].
276 -pineapple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(240,b,221,a)].
277 -pineapple(x) | -owns(y,x) | eats(y,x).  [resolve(240,b,222,a)].

Eliminating sellItems/2

Eliminating paid/4
278 -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(181,a,177,a)].
279 -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(179,a,177,a)].
280 -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
Derived: lessMoney(f2(x,y,z,u,w)) | -bought(f2(x,y,z,u,w),v5,v6,t).  [resolve(278,a,279,b)].
281 -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
Derived: lessMoney(x) | -bought(x,y,z,t).  [resolve(281,a,280,b)].
282 -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(183,a,177,a)].
Derived: moreMoney(x) | -bought(f2(y,z,u,w,v5),v6,x,t).  [resolve(282,a,279,b)].
283 -paid(x,y,z,t) | moreMoney(z).  [resolve(184,a,177,a)].
Derived: moreMoney(x) | -bought(y,z,x,t).  [resolve(283,a,280,b)].

Eliminating owns/2
284 -owns(f2(x,y,z,u,w),B) | nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(254,b,247,a)].
285 -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(185,a,177,a)].
286 -bought(x,y,z,t) | owns(x,y).  [resolve(186,a,177,a)].
287 owns(Shell,x).  [resolve(197,a,198,a)].
288 owns(x,y) | -dairyproducts(y).  [resolve(197,a,201,b)].
289 owns(x,y) | -beverages(y).  [resolve(197,a,202,b)].
290 owns(x,y).  [resolve(197,a,203,a)].
291 -cabbage(x) | owns(y,x).  [resolve(231,b,230,b)].
292 -broccoli(x) | owns(y,x).  [resolve(232,b,230,b)].
293 -potato(x) | owns(y,x).  [resolve(233,b,230,b)].
294 -onion(x) | owns(y,x).  [resolve(234,b,230,b)].
295 owns(x,T).  [resolve(235,a,230,b)].
296 -apple(x) | owns(y,x).  [resolve(236,b,230,b)].
297 -mango(x) | owns(y,x).  [resolve(237,b,230,b)].
298 -banana(x) | owns(y,x).  [resolve(238,b,230,b)].
299 -strawberry(x) | owns(y,x).  [resolve(239,b,230,b)].
300 -pineapple(x) | owns(y,x).  [resolve(240,b,230,b)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -bought(f2(x,y,z,u,w),B,v5,t).  [resolve(284,a,285,b)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -dairyproducts(B).  [resolve(284,a,288,a)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -beverages(B).  [resolve(284,a,289,a)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(284,a,290,a)].
301 -owns(x,B) | nonvegetarian(x) | -person(x).  [resolve(255,b,247,a)].
Derived: nonvegetarian(x) | -person(x) | -bought(x,B,y,t).  [resolve(301,a,286,b)].
Derived: nonvegetarian(Shell) | -person(Shell).  [resolve(301,a,287,a)].
Derived: nonvegetarian(x) | -person(x) | -dairyproducts(B).  [resolve(301,a,288,a)].
Derived: nonvegetarian(x) | -person(x) | -beverages(B).  [resolve(301,a,289,a)].
Derived: nonvegetarian(x) | -person(x).  [resolve(301,a,290,a)].
302 -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | nonvegetarian(f2(y,z,u,w,v5)) | -person(f2(y,z,u,w,v5)) | -groundbeef(x).  [resolve(256,c,253,a)].
303 -groundbeef(x) | -owns(y,x) | nonvegetarian(y) | -person(y) | -groundbeef(x).  [resolve(257,c,253,a)].

Eliminating child/1

Eliminating unit/1

Eliminating usedToWeight/2

Eliminating brings/3

Eliminating nonvegetarian/1

Eliminating lessMoney/1

Eliminating moreMoney/1

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ person, see, bought ]).
Function symbol precedence:  function_order([ t, John, Safeway, Mary, T, B ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      304 person(John).  [assumption].
kept:      305 bought(John,T,Safeway,t).  [assumption].
kept:      306 bought(John,B,Safeway,t).  [assumption].
kept:      307 person(Mary).  [assumption].
kept:      308 bought(Mary,T,Safeway,t).  [deny(79)].
kept:      309 -see(John,Mary).  [deny(79)].
kept:      310 -see(Mary,John).  [deny(79)].
kept:      311 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
kept:      312 -person(x) | -bought(x,y,z,t) | see(x,x).  [factor(311,a,b),merge(c),merge(e)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
304 person(John).  [assumption].
305 bought(John,T,Safeway,t).  [assumption].
306 bought(John,B,Safeway,t).  [assumption].
307 person(Mary).  [assumption].
308 bought(Mary,T,Safeway,t).  [deny(79)].
309 -see(John,Mary).  [deny(79)].
310 -see(Mary,John).  [deny(79)].
311 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
312 -person(x) | -bought(x,y,z,t) | see(x,x).  [factor(311,a,b),merge(c),merge(e)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

given #1 (I,wt=2): 304 person(John).  [assumption].

given #2 (I,wt=5): 305 bought(John,T,Safeway,t).  [assumption].

given #3 (I,wt=5): 306 bought(John,B,Safeway,t).  [assumption].

given #4 (I,wt=2): 307 person(Mary).  [assumption].

given #5 (I,wt=5): 308 bought(Mary,T,Safeway,t).  [deny(79)].

given #6 (I,wt=3): 309 -see(John,Mary).  [deny(79)].

given #7 (I,wt=3): 310 -see(Mary,John).  [deny(79)].

given #8 (I,wt=20): 311 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].

============================== PROOF =================================

% Proof 1 at 0.02 (+ 0.01) seconds.
% Length of proof is 16.
% Level of proof is 4.
% Maximum clause weight is 20.000.
% Given clauses 8.

4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
37 (all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))) # label(non_clause).  [assumption].
79 bought(Mary,T,Safeway,t) -> see(John,Mary) | see(Mary,John) # label(non_clause) # label(goal).  [goal].
114 item(x).  [clausify(4)].
118 -person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
135 shop(x).  [clausify(13)].
142 -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
304 person(John).  [assumption].
305 bought(John,T,Safeway,t).  [assumption].
307 person(Mary).  [assumption].
308 bought(Mary,T,Safeway,t).  [deny(79)].
309 -see(John,Mary).  [deny(79)].
310 -see(Mary,John).  [deny(79)].
311 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
316 $F.  [ur(311,b,307,a,c,305,a,d,308,a,e,309,a,f,310,a),unit_del(a,304)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=8. Generated=18. Kept=12. proofs=1.
Usable=8. Sos=1. Demods=0. Limbo=3, Disabled=336. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=5. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=11. Nonunit_bsub_feature_tests=3.
Megabytes=0.45.
User_CPU=0.02, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 9699 exit (max_proofs) Sun Apr 26 00:47:10 2020



























e.	Are the tomatoes made in the supermarket?
> all x (all y supermarket(x) & tomato(y) -> -make(x, y)).


============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 9702 was started by rinkleseth on Rinkles-MacBook-Pro.local,
Sun Apr 26 00:47:32 2020
The command was "/Users/rinkleseth/Downloads/LADR-2009-11A/bin/prover9 -f /Users/rinkleseth/Desktop/spring2020/AI/project/input.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /Users/rinkleseth/Desktop/spring2020/AI/project/input.in


formulas(sos).
(all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))).
(all x (supermarket(x) -> shop(x))).
(all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))).
(all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))).
(all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))).
(all x (customer(x) -> get(x,receipt))).
(all x ((all y supermarket(x)) & item(y) -> deliver(x,y))).
(all x ((exists y shop(x)) & item(y) -> sells(x,y))).
(all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))).
(all x (customer(x) -> adult(x))).
(all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))).
(all x (people(x) & works(x) -> employee(x))).
(all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))).
(all x (fooditem(x) -> item(x))).
(all x (personalitem(x) -> item(x))).
deodorant(D).
(all x (deodorant(x) -> personalitem(x))).
tomato(T).
beef(B).
(all x (beef(x) -> meat(x))).
(all x (lamb(x) -> meat(x))).
(all x (pork(x) -> meat(x))).
(all x (sausage(x) -> meat(x))).
(all x (stew_meat(x) -> meat(x))).
(all x (halal(x) -> meat(x))).
(all x (meat(x) -> fooditem(x))).
(all x (person(x) -> people(x))).
(all x ((all y supermarket(x)) & item(y) -> -make(x,y))).
person(John).
bought(John,T,Safeway,t).
weight(T,2).
weight(B,1).
bought(John,B,Safeway,t).
person(Mary).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))).
money(card).
money(cash).
isa(creditcard,card).
supermarket(Safeway).
supermarket(NBS).
isa(NBS,Safeway).
locatedAt(Safeway,NorthBerkeley).
time(t).
measure(Pound).
measure(Ounce).
measure(Kilogram).
(all x (fooditem(x) & weight(x,1) -> unit(x))).
(all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))).
(all x (tomato(x) -> piecesPerPound(x,5))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))).
(all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))).
(all x (meat(x) -> animalproduct(x))).
(all x (fish(x) -> animalproduct(x))).
(all x (egg(x) -> animalproduct(x))).
(all x (animalproduct(x) -> fooditem(x))).
(all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))).
(all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))).
(all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))).
(all x (groundbeef(x) -> beef(x))).
gas(G).
(all x (gas(x) & sells(Shell,x))).
(all x (adult(x) -> -child(x))).
(all x (child(x) -> -adult(x))).
(all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))).
hasSize(carTrunk,600).
(all x (milk(x) -> dairyproduct(x))).
(all x (cheese(x) -> dairyproduct(x))).
(all x (butter(x) -> dairyproduct(x))).
(all x (fish(x) -> meat(x))).
(all x (vegetable(x) -> fooditem(x))).
(all x (tomato(x) -> vegetable(x))).
(all x (cabbage(x) -> vegetable(x))).
(all x (broccoli(x) -> vegetable(x))).
(all x (potato(x) -> vegetable(x))).
(all x (onion(x) -> vegetable(x))).
(all x (juice(x) -> beverage(x))).
(all x (soda(x) -> beverage(x))).
(all x (alcohol(x) -> beverage(x))).
(all x (water(x) -> beverage(x))).
(all x (tea(x) -> beverage(x))).
(all x (coffee(x) -> beverage(x))).
(all x (fruit(x) -> fooditem(x))).
(all x (apple(x) -> fruit(x))).
(all x (mango(x) -> fruit(x))).
(all x (banana(x) -> fruit(x))).
(all x (strawberry(x) -> fruit(x))).
(all x (pineapple(x) -> fruit(x))).
(all x (lotion(x) -> personalitem(x))).
(all x (hairspray(x) -> personalitem(x))).
(all x (shavingcream(x) -> personalitem(x))).
(all x (cosmetic(x) -> personalitem(x))).
(all x (toothbrush(x) -> personalitem(x))).
(all x (bodywash(x) -> personalitem(x))).
(all x (soap(x) -> personalitem(x))).
end_of_list.

formulas(goals).
(all x ((all y supermarket(x)) & tomato(y) -> -make(x,y))).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))) # label(non_clause).  [assumption].
2 (all x (supermarket(x) -> shop(x))) # label(non_clause).  [assumption].
3 (all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))) # label(non_clause).  [assumption].
4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
6 (all x (customer(x) -> get(x,receipt))) # label(non_clause).  [assumption].
7 (all x ((all y supermarket(x)) & item(y) -> deliver(x,y))) # label(non_clause).  [assumption].
8 (all x ((exists y shop(x)) & item(y) -> sells(x,y))) # label(non_clause).  [assumption].
9 (all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))) # label(non_clause).  [assumption].
10 (all x (customer(x) -> adult(x))) # label(non_clause).  [assumption].
11 (all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))) # label(non_clause).  [assumption].
12 (all x (people(x) & works(x) -> employee(x))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
14 (all x (fooditem(x) -> item(x))) # label(non_clause).  [assumption].
15 (all x (personalitem(x) -> item(x))) # label(non_clause).  [assumption].
16 (all x (deodorant(x) -> personalitem(x))) # label(non_clause).  [assumption].
17 (all x (beef(x) -> meat(x))) # label(non_clause).  [assumption].
18 (all x (lamb(x) -> meat(x))) # label(non_clause).  [assumption].
19 (all x (pork(x) -> meat(x))) # label(non_clause).  [assumption].
20 (all x (sausage(x) -> meat(x))) # label(non_clause).  [assumption].
21 (all x (stew_meat(x) -> meat(x))) # label(non_clause).  [assumption].
22 (all x (halal(x) -> meat(x))) # label(non_clause).  [assumption].
23 (all x (meat(x) -> fooditem(x))) # label(non_clause).  [assumption].
24 (all x (person(x) -> people(x))) # label(non_clause).  [assumption].
25 (all x ((all y supermarket(x)) & item(y) -> -make(x,y))) # label(non_clause).  [assumption].
26 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
27 (all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))) # label(non_clause).  [assumption].
28 (all x (fooditem(x) & weight(x,1) -> unit(x))) # label(non_clause).  [assumption].
29 (all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))) # label(non_clause).  [assumption].
30 (all x (tomato(x) -> piecesPerPound(x,5))) # label(non_clause).  [assumption].
31 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))) # label(non_clause).  [assumption].
32 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))) # label(non_clause).  [assumption].
33 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))) # label(non_clause).  [assumption].
34 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))) # label(non_clause).  [assumption].
35 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
36 (all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))) # label(non_clause).  [assumption].
37 (all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))) # label(non_clause).  [assumption].
38 (all x (meat(x) -> animalproduct(x))) # label(non_clause).  [assumption].
39 (all x (fish(x) -> animalproduct(x))) # label(non_clause).  [assumption].
40 (all x (egg(x) -> animalproduct(x))) # label(non_clause).  [assumption].
41 (all x (animalproduct(x) -> fooditem(x))) # label(non_clause).  [assumption].
42 (all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))) # label(non_clause).  [assumption].
43 (all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))) # label(non_clause).  [assumption].
44 (all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))) # label(non_clause).  [assumption].
45 (all x (groundbeef(x) -> beef(x))) # label(non_clause).  [assumption].
46 (all x (gas(x) & sells(Shell,x))) # label(non_clause).  [assumption].
47 (all x (adult(x) -> -child(x))) # label(non_clause).  [assumption].
48 (all x (child(x) -> -adult(x))) # label(non_clause).  [assumption].
49 (all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))) # label(non_clause).  [assumption].
50 (all x (milk(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
51 (all x (cheese(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
52 (all x (butter(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
53 (all x (fish(x) -> meat(x))) # label(non_clause).  [assumption].
54 (all x (vegetable(x) -> fooditem(x))) # label(non_clause).  [assumption].
55 (all x (tomato(x) -> vegetable(x))) # label(non_clause).  [assumption].
56 (all x (cabbage(x) -> vegetable(x))) # label(non_clause).  [assumption].
57 (all x (broccoli(x) -> vegetable(x))) # label(non_clause).  [assumption].
58 (all x (potato(x) -> vegetable(x))) # label(non_clause).  [assumption].
59 (all x (onion(x) -> vegetable(x))) # label(non_clause).  [assumption].
60 (all x (juice(x) -> beverage(x))) # label(non_clause).  [assumption].
61 (all x (soda(x) -> beverage(x))) # label(non_clause).  [assumption].
62 (all x (alcohol(x) -> beverage(x))) # label(non_clause).  [assumption].
63 (all x (water(x) -> beverage(x))) # label(non_clause).  [assumption].
64 (all x (tea(x) -> beverage(x))) # label(non_clause).  [assumption].
65 (all x (coffee(x) -> beverage(x))) # label(non_clause).  [assumption].
66 (all x (fruit(x) -> fooditem(x))) # label(non_clause).  [assumption].
67 (all x (apple(x) -> fruit(x))) # label(non_clause).  [assumption].
68 (all x (mango(x) -> fruit(x))) # label(non_clause).  [assumption].
69 (all x (banana(x) -> fruit(x))) # label(non_clause).  [assumption].
70 (all x (strawberry(x) -> fruit(x))) # label(non_clause).  [assumption].
71 (all x (pineapple(x) -> fruit(x))) # label(non_clause).  [assumption].
72 (all x (lotion(x) -> personalitem(x))) # label(non_clause).  [assumption].
73 (all x (hairspray(x) -> personalitem(x))) # label(non_clause).  [assumption].
74 (all x (shavingcream(x) -> personalitem(x))) # label(non_clause).  [assumption].
75 (all x (cosmetic(x) -> personalitem(x))) # label(non_clause).  [assumption].
76 (all x (toothbrush(x) -> personalitem(x))) # label(non_clause).  [assumption].
77 (all x (bodywash(x) -> personalitem(x))) # label(non_clause).  [assumption].
78 (all x (soap(x) -> personalitem(x))) # label(non_clause).  [assumption].
79 (all x ((all y supermarket(x)) & tomato(y) -> -make(x,y))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | shop(x).  [clausify(2)].
-supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
-supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
customer(f2(x,y,z,u,w)).  [clausify(4)].
supermarket(x).  [clausify(4)].
employee(x).  [clausify(4)].
item(x).  [clausify(4)].
restock(x,y,z).  [clausify(4)].
assist(x,y).  [clausify(4)].
supermarket(f3(x)).  [clausify(5)].
customer(x).  [clausify(5)].
use(x,Cart).  [clausify(5)].
-customer(x) | get(x,receipt).  [clausify(6)].
-supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
-shop(x) | -item(y) | sells(x,y).  [clausify(8)].
-time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
-customer(x) | adult(x).  [clausify(10)].
-people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
-people(x) | -works(x) | employee(x).  [clausify(12)].
shop(x).  [clausify(13)].
has(x,y).  [clausify(13)].
employee(x).  [clausify(13)].
customer(x).  [clausify(13)].
-fooditem(x) | item(x).  [clausify(14)].
-personalitem(x) | item(x).  [clausify(15)].
deodorant(D).  [assumption].
-deodorant(x) | personalitem(x).  [clausify(16)].
tomato(T).  [assumption].
beef(B).  [assumption].
-beef(x) | meat(x).  [clausify(17)].
-lamb(x) | meat(x).  [clausify(18)].
-pork(x) | meat(x).  [clausify(19)].
-sausage(x) | meat(x).  [clausify(20)].
-stew_meat(x) | meat(x).  [clausify(21)].
-halal(x) | meat(x).  [clausify(22)].
-meat(x) | fooditem(x).  [clausify(23)].
-person(x) | people(x).  [clausify(24)].
-supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
person(John).  [assumption].
bought(John,T,Safeway,t).  [assumption].
weight(T,2).  [assumption].
weight(B,1).  [assumption].
bought(John,B,Safeway,t).  [assumption].
person(Mary).  [assumption].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
money(card).  [assumption].
money(cash).  [assumption].
isa(creditcard,card).  [assumption].
supermarket(Safeway).  [assumption].
supermarket(NBS).  [assumption].
isa(NBS,Safeway).  [assumption].
locatedAt(Safeway,NorthBerkeley).  [assumption].
time(t).  [assumption].
measure(Pound).  [assumption].
measure(Ounce).  [assumption].
measure(Kilogram).  [assumption].
-fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
-fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
-tomato(x) | piecesPerPound(x,5).  [clausify(30)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
-customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
-person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
-meat(x) | animalproduct(x).  [clausify(38)].
-fish(x) | animalproduct(x).  [clausify(39)].
-egg(x) | animalproduct(x).  [clausify(40)].
-animalproduct(x) | fooditem(x).  [clausify(41)].
-people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
-people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
-people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
-people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
-groundbeef(x) | beef(x).  [clausify(45)].
gas(G).  [assumption].
gas(x).  [clausify(46)].
sells(Shell,x).  [clausify(46)].
-adult(x) | -child(x).  [clausify(47)].
-child(x) | -adult(x).  [clausify(48)].
-shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
hasSize(carTrunk,600).  [assumption].
-milk(x) | dairyproduct(x).  [clausify(50)].
-cheese(x) | dairyproduct(x).  [clausify(51)].
-butter(x) | dairyproduct(x).  [clausify(52)].
-fish(x) | meat(x).  [clausify(53)].
-vegetable(x) | fooditem(x).  [clausify(54)].
-tomato(x) | vegetable(x).  [clausify(55)].
-cabbage(x) | vegetable(x).  [clausify(56)].
-broccoli(x) | vegetable(x).  [clausify(57)].
-potato(x) | vegetable(x).  [clausify(58)].
-onion(x) | vegetable(x).  [clausify(59)].
-juice(x) | beverage(x).  [clausify(60)].
-soda(x) | beverage(x).  [clausify(61)].
-alcohol(x) | beverage(x).  [clausify(62)].
-water(x) | beverage(x).  [clausify(63)].
-tea(x) | beverage(x).  [clausify(64)].
-coffee(x) | beverage(x).  [clausify(65)].
-fruit(x) | fooditem(x).  [clausify(66)].
-apple(x) | fruit(x).  [clausify(67)].
-mango(x) | fruit(x).  [clausify(68)].
-banana(x) | fruit(x).  [clausify(69)].
-strawberry(x) | fruit(x).  [clausify(70)].
-pineapple(x) | fruit(x).  [clausify(71)].
-lotion(x) | personalitem(x).  [clausify(72)].
-hairspray(x) | personalitem(x).  [clausify(73)].
-shavingcream(x) | personalitem(x).  [clausify(74)].
-cosmetic(x) | personalitem(x).  [clausify(75)].
-toothbrush(x) | personalitem(x).  [clausify(76)].
-bodywash(x) | personalitem(x).  [clausify(77)].
-soap(x) | personalitem(x).  [clausify(78)].
supermarket(c2).  [deny(79)].
tomato(c1).  [deny(79)].
make(c2,c1).  [deny(79)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating supermarket/1
80 supermarket(x).  [clausify(4)].
81 -supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
82 -supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
83 -supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
84 -supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
85 -supermarket(x) | shop(x).  [clausify(2)].
86 -supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
87 -supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
Derived: -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
Derived: -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
Derived: -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
Derived: -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
Derived: -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
88 supermarket(f3(x)).  [clausify(5)].
89 -supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
Derived: -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
90 -supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
Derived: -item(x) | -make(y,x).  [resolve(90,a,80,a)].
91 supermarket(Safeway).  [assumption].
Derived: shop(Safeway).  [resolve(91,a,85,a)].
92 supermarket(NBS).  [assumption].
Derived: shop(NBS).  [resolve(92,a,85,a)].
93 supermarket(c2).  [deny(79)].
Derived: shop(c2).  [resolve(93,a,85,a)].

Eliminating customer/1
94 -customer(x) | get(x,receipt).  [clausify(6)].
95 customer(f2(x,y,z,u,w)).  [clausify(4)].
96 customer(x).  [clausify(5)].
Derived: get(f2(x,y,z,u,w),receipt).  [resolve(94,a,95,a)].
Derived: get(x,receipt).  [resolve(94,a,96,a)].
97 -time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
98 -customer(x) | adult(x).  [clausify(10)].
Derived: adult(f2(x,y,z,u,w)).  [resolve(98,a,95,a)].
Derived: adult(x).  [resolve(98,a,96,a)].
99 customer(x).  [clausify(13)].
100 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(100,a,95,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(100,a,96,a)].
101 -shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(101,b,95,a)].
Derived: -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(101,b,96,a)].
102 -shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(102,b,95,a)].
Derived: -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(102,b,96,a)].
103 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(103,a,95,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(103,a,96,a)].
104 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(104,a,95,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(104,a,96,a)].
105 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(105,a,95,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(105,a,96,a)].
106 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(106,a,95,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(106,a,96,a)].
107 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
108 -customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
Derived: -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(108,a,95,a)].
Derived: -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(108,a,96,a)].
109 -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(109,b,95,a)].
Derived: -item(x) | scan(y,x,z).  [resolve(109,b,96,a)].

Eliminating employee/1
110 -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
111 employee(x).  [clausify(4)].
112 -people(x) | -works(x) | employee(x).  [clausify(12)].
113 employee(x).  [clausify(13)].

Eliminating item/1
114 -shop(x) | -item(y) | sells(x,y).  [clausify(8)].
115 item(x).  [clausify(4)].
Derived: -shop(x) | sells(x,y).  [resolve(114,b,115,a)].
116 -people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
Derived: -people(x) | -sellItems(x,y) | seller(x).  [resolve(116,c,115,a)].
117 -fooditem(x) | item(x).  [clausify(14)].
118 -personalitem(x) | item(x).  [clausify(15)].
119 -person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
Derived: -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(119,c,115,a)].
120 -shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
Derived: -shop(x) | -sells(x,y) | owns(x,y).  [resolve(120,c,115,a)].
121 -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
Derived: deliver(x,y).  [resolve(121,a,115,a)].
122 -item(x) | -make(y,x).  [resolve(90,a,80,a)].
Derived: -make(x,y).  [resolve(122,a,115,a)].
123 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(100,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(123,a,115,a)].
124 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(100,a,96,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(124,a,115,a)].
125 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(103,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(125,a,115,a)].
126 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(103,a,96,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(126,a,115,a)].
127 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(104,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(127,a,115,a)].
128 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(104,a,96,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(128,a,115,a)].
129 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(105,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(129,a,115,a)].
130 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(105,a,96,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(130,a,115,a)].
131 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(106,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(131,a,115,a)].
132 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(106,a,96,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(132,a,115,a)].
133 -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(109,b,95,a)].
Derived: scan(f2(x,y,z,u,w),v5,v6).  [resolve(133,a,115,a)].
134 -item(x) | scan(y,x,z).  [resolve(109,b,96,a)].
Derived: scan(x,y,z).  [resolve(134,a,115,a)].

Eliminating restock/3

Eliminating assist/2

Eliminating use/2

Eliminating shop/1
135 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(101,b,95,a)].
136 shop(x).  [clausify(13)].
137 shop(Safeway).  [resolve(91,a,85,a)].
138 shop(NBS).  [resolve(92,a,85,a)].
139 shop(c2).  [resolve(93,a,85,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(135,a,136,a)].
140 -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(101,b,96,a)].
Derived: -bringsMoney(x,y) | brings(x,z,y).  [resolve(140,a,136,a)].
141 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(102,b,95,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | money(v6).  [resolve(141,a,136,a)].
142 -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(102,b,96,a)].
Derived: -bringsMoney(x,y) | money(z).  [resolve(142,a,136,a)].
143 -shop(x) | sells(x,y).  [resolve(114,b,115,a)].
Derived: sells(x,y).  [resolve(143,a,136,a)].
144 -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(119,c,115,a)].
Derived: -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(144,c,136,a)].
145 -shop(x) | -sells(x,y) | owns(x,y).  [resolve(120,c,115,a)].
Derived: -sells(x,y) | owns(x,y).  [resolve(145,a,136,a)].
146 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(123,a,115,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(146,a,136,a)].
147 -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(124,a,115,a)].
Derived: -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(147,a,136,a)].
148 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(125,a,115,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(148,a,136,a)].
149 -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(126,a,115,a)].
Derived: -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(149,a,136,a)].
150 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(127,a,115,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(150,a,136,a)].
151 -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(128,a,115,a)].
Derived: -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(151,a,136,a)].
152 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(129,a,115,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(152,a,136,a)].
153 -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(130,a,115,a)].
Derived: -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(153,a,136,a)].
154 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(131,a,115,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(154,a,136,a)].
155 -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(132,a,115,a)].
Derived: -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(155,a,136,a)].

Eliminating has/2

Eliminating deodorant/1
156 -deodorant(x) | personalitem(x).  [clausify(16)].
157 deodorant(D).  [assumption].
Derived: personalitem(D).  [resolve(156,a,157,a)].

Eliminating tomato/1
158 -tomato(x) | piecesPerPound(x,5).  [clausify(30)].
159 tomato(T).  [assumption].
Derived: piecesPerPound(T,5).  [resolve(158,a,159,a)].
160 -tomato(x) | vegetable(x).  [clausify(55)].
Derived: vegetable(T).  [resolve(160,a,159,a)].
161 tomato(c1).  [deny(79)].
Derived: piecesPerPound(c1,5).  [resolve(161,a,158,a)].
Derived: vegetable(c1).  [resolve(161,a,160,a)].

Eliminating beef/1
162 -beef(x) | meat(x).  [clausify(17)].
163 beef(B).  [assumption].
Derived: meat(B).  [resolve(162,a,163,a)].
164 -groundbeef(x) | beef(x).  [clausify(45)].
Derived: -groundbeef(x) | meat(x).  [resolve(164,b,162,a)].

Eliminating lamb/1

Eliminating pork/1

Eliminating sausage/1

Eliminating stew_meat/1

Eliminating halal/1

Eliminating meat/1
165 -fish(x) | meat(x).  [clausify(53)].
166 -meat(x) | fooditem(x).  [clausify(23)].
167 -meat(x) | animalproduct(x).  [clausify(38)].
Derived: -fish(x) | fooditem(x).  [resolve(165,b,166,a)].
Derived: -fish(x) | animalproduct(x).  [resolve(165,b,167,a)].
168 meat(B).  [resolve(162,a,163,a)].
Derived: fooditem(B).  [resolve(168,a,166,a)].
Derived: animalproduct(B).  [resolve(168,a,167,a)].
169 -groundbeef(x) | meat(x).  [resolve(164,b,162,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(169,b,166,a)].
Derived: -groundbeef(x) | animalproduct(x).  [resolve(169,b,167,a)].

Eliminating people/1
170 -people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
171 -person(x) | people(x).  [clausify(24)].
Derived: eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(170,a,171,b)].
172 -people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(172,a,171,b)].
173 -people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(173,a,171,b)].
174 -people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
Derived: -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(174,a,171,b)].
175 -people(x) | -sellItems(x,y) | seller(x).  [resolve(116,c,115,a)].
Derived: -sellItems(x,y) | seller(x) | -person(x).  [resolve(175,a,171,b)].

Eliminating weight/2
176 -fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
177 weight(T,2).  [assumption].
178 weight(B,1).  [assumption].
Derived: -fooditem(B) | unit(B).  [resolve(176,b,178,a)].

Eliminating money/1

Eliminating isa/2

Eliminating locatedAt/2

Eliminating time/1
179 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(146,a,136,a)].
180 time(t).  [assumption].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(179,a,180,a)].
181 -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(147,a,136,a)].
Derived: -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(181,a,180,a)].
182 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(148,a,136,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(182,a,180,a)].
183 -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(149,a,136,a)].
Derived: -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(183,a,180,a)].
184 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(150,a,136,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(184,a,180,a)].
185 -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(151,a,136,a)].
Derived: -paid(x,y,z,t) | lessMoney(x).  [resolve(185,a,180,a)].
186 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(152,a,136,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(186,a,180,a)].
187 -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(153,a,136,a)].
Derived: -paid(x,y,z,t) | moreMoney(z).  [resolve(187,a,180,a)].
188 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(154,a,136,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(188,a,180,a)].
189 -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(155,a,136,a)].
Derived: -bought(x,y,z,t) | owns(x,y).  [resolve(189,a,180,a)].

Eliminating measure/1
190 -fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
191 measure(Pound).  [assumption].
192 measure(Ounce).  [assumption].
193 measure(Kilogram).  [assumption].
Derived: -fooditem(x) | usedToWeight(Pound,x).  [resolve(190,b,191,a)].
Derived: -fooditem(x) | usedToWeight(Ounce,x).  [resolve(190,b,192,a)].
Derived: -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(190,b,193,a)].

Eliminating fish/1

Eliminating egg/1

Eliminating animalproduct/1
194 animalproduct(B).  [resolve(168,a,167,a)].
195 -animalproduct(x) | fooditem(x).  [clausify(41)].
Derived: fooditem(B).  [resolve(194,a,195,a)].
196 -groundbeef(x) | animalproduct(x).  [resolve(169,b,167,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(196,b,195,a)].
197 eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(170,a,171,b)].
Derived: eats(x,B) | vegetarian(x) | -person(x).  [resolve(197,b,194,a)].
Derived: eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(197,b,196,b)].
198 eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(172,a,171,b)].
Derived: eats(x,B) | vegan(x) | -person(x).  [resolve(198,b,194,a)].
Derived: eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(198,b,196,b)].
199 -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(174,a,171,b)].
Derived: -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(199,b,194,a)].
Derived: -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(199,b,196,b)].

Eliminating gas/1

Eliminating sells/2
200 -sells(x,y) | owns(x,y).  [resolve(145,a,136,a)].
201 sells(Shell,x).  [clausify(46)].
202 -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
203 -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
204 -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
205 -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
206 sells(x,y).  [resolve(143,a,136,a)].
Derived: owns(Shell,x).  [resolve(200,a,201,a)].
Derived: owns(x,y) | -personalitem(y).  [resolve(200,a,202,b)].
Derived: owns(x,y) | -fooditem(y).  [resolve(200,a,203,b)].
Derived: owns(x,y) | -dairyproducts(y).  [resolve(200,a,204,b)].
Derived: owns(x,y) | -beverages(y).  [resolve(200,a,205,b)].
Derived: owns(x,y).  [resolve(200,a,206,a)].

Eliminating adult/1
207 adult(f2(x,y,z,u,w)).  [resolve(98,a,95,a)].
208 -adult(x) | -child(x).  [clausify(47)].
209 -child(x) | -adult(x).  [clausify(48)].
Derived: -child(f2(x,y,z,u,w)).  [resolve(207,a,208,a)].
210 adult(x).  [resolve(98,a,96,a)].
Derived: -child(x).  [resolve(210,a,208,a)].

Eliminating hasSize/2

Eliminating milk/1

Eliminating cheese/1

Eliminating butter/1

Eliminating vegetable/1
211 -cabbage(x) | vegetable(x).  [clausify(56)].
212 -vegetable(x) | fooditem(x).  [clausify(54)].
Derived: -cabbage(x) | fooditem(x).  [resolve(211,b,212,a)].
213 -broccoli(x) | vegetable(x).  [clausify(57)].
Derived: -broccoli(x) | fooditem(x).  [resolve(213,b,212,a)].
214 -potato(x) | vegetable(x).  [clausify(58)].
Derived: -potato(x) | fooditem(x).  [resolve(214,b,212,a)].
215 -onion(x) | vegetable(x).  [clausify(59)].
Derived: -onion(x) | fooditem(x).  [resolve(215,b,212,a)].
216 vegetable(T).  [resolve(160,a,159,a)].
Derived: fooditem(T).  [resolve(216,a,212,a)].
217 vegetable(c1).  [resolve(161,a,160,a)].
Derived: fooditem(c1).  [resolve(217,a,212,a)].

Eliminating juice/1

Eliminating soda/1

Eliminating alcohol/1

Eliminating water/1

Eliminating tea/1

Eliminating coffee/1

Eliminating fruit/1
218 -apple(x) | fruit(x).  [clausify(67)].
219 -fruit(x) | fooditem(x).  [clausify(66)].
Derived: -apple(x) | fooditem(x).  [resolve(218,b,219,a)].
220 -mango(x) | fruit(x).  [clausify(68)].
Derived: -mango(x) | fooditem(x).  [resolve(220,b,219,a)].
221 -banana(x) | fruit(x).  [clausify(69)].
Derived: -banana(x) | fooditem(x).  [resolve(221,b,219,a)].
222 -strawberry(x) | fruit(x).  [clausify(70)].
Derived: -strawberry(x) | fooditem(x).  [resolve(222,b,219,a)].
223 -pineapple(x) | fruit(x).  [clausify(71)].
Derived: -pineapple(x) | fooditem(x).  [resolve(223,b,219,a)].

Eliminating lotion/1

Eliminating hairspray/1

Eliminating shavingcream/1

Eliminating cosmetic/1

Eliminating toothbrush/1

Eliminating bodywash/1

Eliminating soap/1

Eliminating make/2
224 -make(x,y).  [resolve(122,a,115,a)].
225 make(c2,c1).  [deny(79)].
Derived: $F.  [resolve(224,a,225,a)].

Eliminating get/2

Eliminating fooditem/1
226 fooditem(B).  [resolve(168,a,166,a)].
227 -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(108,a,95,a)].
228 -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(108,a,96,a)].
229 -groundbeef(x) | fooditem(x).  [resolve(169,b,166,a)].
230 -fooditem(B) | unit(B).  [resolve(176,b,178,a)].
231 -fooditem(x) | usedToWeight(Pound,x).  [resolve(190,b,191,a)].
232 -fooditem(x) | usedToWeight(Ounce,x).  [resolve(190,b,192,a)].
233 -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(190,b,193,a)].
234 fooditem(B).  [resolve(194,a,195,a)].
235 -groundbeef(x) | fooditem(x).  [resolve(196,b,195,a)].
236 owns(x,y) | -fooditem(y).  [resolve(200,a,203,b)].
237 -cabbage(x) | fooditem(x).  [resolve(211,b,212,a)].
238 -broccoli(x) | fooditem(x).  [resolve(213,b,212,a)].
239 -potato(x) | fooditem(x).  [resolve(214,b,212,a)].
240 -onion(x) | fooditem(x).  [resolve(215,b,212,a)].
241 fooditem(T).  [resolve(216,a,212,a)].
242 fooditem(c1).  [resolve(217,a,212,a)].
243 -apple(x) | fooditem(x).  [resolve(218,b,219,a)].
244 -mango(x) | fooditem(x).  [resolve(220,b,219,a)].
245 -banana(x) | fooditem(x).  [resolve(221,b,219,a)].
246 -strawberry(x) | fooditem(x).  [resolve(222,b,219,a)].
247 -pineapple(x) | fooditem(x).  [resolve(223,b,219,a)].

Eliminating deliver/2

Eliminating scan/3

Eliminating bringsMoney/2
248 -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(179,a,180,a)].
249 -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(135,a,136,a)].
250 -bringsMoney(x,y) | brings(x,z,y).  [resolve(140,a,136,a)].
251 -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(181,a,180,a)].

Eliminating personalitem/1
252 owns(x,y) | -personalitem(y).  [resolve(200,a,202,b)].
253 personalitem(D).  [resolve(156,a,157,a)].

Eliminating piecesPerPound/2

Eliminating eats/2
254 -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(199,b,194,a)].
255 eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(173,a,171,b)].
256 eats(x,B) | vegetarian(x) | -person(x).  [resolve(197,b,194,a)].
257 eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(197,b,196,b)].
258 eats(x,B) | vegan(x) | -person(x).  [resolve(198,b,194,a)].
259 eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(198,b,196,b)].
260 -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(199,b,196,b)].

Eliminating sellItems/2

Eliminating paid/4
261 -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(184,a,180,a)].
262 -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(182,a,180,a)].
263 -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(183,a,180,a)].
264 -paid(x,y,z,t) | lessMoney(x).  [resolve(185,a,180,a)].
265 -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(186,a,180,a)].
266 -paid(x,y,z,t) | moreMoney(z).  [resolve(187,a,180,a)].

Eliminating owns/2

Eliminating child/1

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ person, see, bought ]).
Function symbol precedence:  function_order([ t, John, Safeway, B, Mary, T ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      267 person(John).  [assumption].
kept:      268 bought(John,T,Safeway,t).  [assumption].
kept:      269 bought(John,B,Safeway,t).  [assumption].
kept:      270 person(Mary).  [assumption].
kept:      271 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(144,c,136,a)].

============================== PROOF =================================

% Proof 1 at 0.02 (+ 0.01) seconds.
% Length of proof is 10.
% Level of proof is 4.
% Maximum clause weight is 0.000.
% Given clauses 0.

4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
25 (all x ((all y supermarket(x)) & item(y) -> -make(x,y))) # label(non_clause).  [assumption].
79 (all x ((all y supermarket(x)) & tomato(y) -> -make(x,y))) # label(non_clause) # label(goal).  [goal].
80 supermarket(x).  [clausify(4)].
90 -supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
115 item(x).  [clausify(4)].
122 -item(x) | -make(y,x).  [resolve(90,a,80,a)].
224 -make(x,y).  [resolve(122,a,115,a)].
225 make(c2,c1).  [deny(79)].
272 $F.  [resolve(224,a,225,a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=6. Kept=5. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=5, Disabled=248. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=0. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=0. Nonunit_bsub_feature_tests=0.
Megabytes=0.37.
User_CPU=0.02, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 9702 exit (max_proofs) Sun Apr 26 00:47:32 2020
























f.	What is John going to do with the tomatoes?
> eats(John, T).
============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 9703 was started by rinkleseth on Rinkles-MacBook-Pro.local,
Sun Apr 26 00:47:52 2020
The command was "/Users/rinkleseth/Downloads/LADR-2009-11A/bin/prover9 -f /Users/rinkleseth/Desktop/spring2020/AI/project/input.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /Users/rinkleseth/Desktop/spring2020/AI/project/input.in


formulas(sos).
(all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))).
(all x (supermarket(x) -> shop(x))).
(all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))).
(all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))).
(all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))).
(all x (customer(x) -> get(x,receipt))).
(all x ((all y supermarket(x)) & item(y) -> deliver(x,y))).
(all x ((exists y shop(x)) & item(y) -> sells(x,y))).
(all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))).
(all x (customer(x) -> adult(x))).
(all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))).
(all x (people(x) & works(x) -> employee(x))).
(all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))).
(all x (fooditem(x) -> item(x))).
(all x (personalitem(x) -> item(x))).
deodorant(D).
(all x (deodorant(x) -> personalitem(x))).
tomato(T).
beef(B).
(all x (beef(x) -> meat(x))).
(all x (lamb(x) -> meat(x))).
(all x (pork(x) -> meat(x))).
(all x (sausage(x) -> meat(x))).
(all x (stew_meat(x) -> meat(x))).
(all x (halal(x) -> meat(x))).
(all x (meat(x) -> fooditem(x))).
(all x (person(x) -> people(x))).
(all x ((all y supermarket(x)) & item(y) -> -make(x,y))).
person(John).
bought(John,T,Safeway,t).
weight(T,2).
weight(B,1).
bought(John,B,Safeway,t).
person(Mary).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))).
money(card).
money(cash).
isa(creditcard,card).
supermarket(Safeway).
supermarket(NBS).
isa(NBS,Safeway).
locatedAt(Safeway,NorthBerkeley).
time(t).
measure(Pound).
measure(Ounce).
measure(Kilogram).
(all x (fooditem(x) & weight(x,1) -> unit(x))).
(all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))).
(all x (tomato(x) -> piecesPerPound(x,5))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))).
(all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))).
(all x (meat(x) -> animalproduct(x))).
(all x (fish(x) -> animalproduct(x))).
(all x (egg(x) -> animalproduct(x))).
(all x (animalproduct(x) -> fooditem(x))).
(all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))).
(all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))).
(all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))).
(all x (groundbeef(x) -> beef(x))).
gas(G).
(all x (gas(x) & sells(Shell,x))).
(all x (adult(x) -> -child(x))).
(all x (child(x) -> -adult(x))).
(all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))).
hasSize(carTrunk,600).
(all x (milk(x) -> dairyproduct(x))).
(all x (cheese(x) -> dairyproduct(x))).
(all x (butter(x) -> dairyproduct(x))).
(all x (fish(x) -> meat(x))).
(all x (vegetable(x) -> fooditem(x))).
(all x (tomato(x) -> vegetable(x))).
(all x (cabbage(x) -> vegetable(x))).
(all x (broccoli(x) -> vegetable(x))).
(all x (potato(x) -> vegetable(x))).
(all x (onion(x) -> vegetable(x))).
(all x (juice(x) -> beverage(x))).
(all x (soda(x) -> beverage(x))).
(all x (alcohol(x) -> beverage(x))).
(all x (water(x) -> beverage(x))).
(all x (tea(x) -> beverage(x))).
(all x (coffee(x) -> beverage(x))).
(all x (fruit(x) -> fooditem(x))).
(all x (apple(x) -> fruit(x))).
(all x (mango(x) -> fruit(x))).
(all x (banana(x) -> fruit(x))).
(all x (strawberry(x) -> fruit(x))).
(all x (pineapple(x) -> fruit(x))).
(all x (lotion(x) -> personalitem(x))).
(all x (hairspray(x) -> personalitem(x))).
(all x (shavingcream(x) -> personalitem(x))).
(all x (cosmetic(x) -> personalitem(x))).
(all x (toothbrush(x) -> personalitem(x))).
(all x (bodywash(x) -> personalitem(x))).
(all x (soap(x) -> personalitem(x))).
end_of_list.

formulas(goals).
eats(John,T).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))) # label(non_clause).  [assumption].
2 (all x (supermarket(x) -> shop(x))) # label(non_clause).  [assumption].
3 (all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))) # label(non_clause).  [assumption].
4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
6 (all x (customer(x) -> get(x,receipt))) # label(non_clause).  [assumption].
7 (all x ((all y supermarket(x)) & item(y) -> deliver(x,y))) # label(non_clause).  [assumption].
8 (all x ((exists y shop(x)) & item(y) -> sells(x,y))) # label(non_clause).  [assumption].
9 (all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))) # label(non_clause).  [assumption].
10 (all x (customer(x) -> adult(x))) # label(non_clause).  [assumption].
11 (all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))) # label(non_clause).  [assumption].
12 (all x (people(x) & works(x) -> employee(x))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
14 (all x (fooditem(x) -> item(x))) # label(non_clause).  [assumption].
15 (all x (personalitem(x) -> item(x))) # label(non_clause).  [assumption].
16 (all x (deodorant(x) -> personalitem(x))) # label(non_clause).  [assumption].
17 (all x (beef(x) -> meat(x))) # label(non_clause).  [assumption].
18 (all x (lamb(x) -> meat(x))) # label(non_clause).  [assumption].
19 (all x (pork(x) -> meat(x))) # label(non_clause).  [assumption].
20 (all x (sausage(x) -> meat(x))) # label(non_clause).  [assumption].
21 (all x (stew_meat(x) -> meat(x))) # label(non_clause).  [assumption].
22 (all x (halal(x) -> meat(x))) # label(non_clause).  [assumption].
23 (all x (meat(x) -> fooditem(x))) # label(non_clause).  [assumption].
24 (all x (person(x) -> people(x))) # label(non_clause).  [assumption].
25 (all x ((all y supermarket(x)) & item(y) -> -make(x,y))) # label(non_clause).  [assumption].
26 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
27 (all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))) # label(non_clause).  [assumption].
28 (all x (fooditem(x) & weight(x,1) -> unit(x))) # label(non_clause).  [assumption].
29 (all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))) # label(non_clause).  [assumption].
30 (all x (tomato(x) -> piecesPerPound(x,5))) # label(non_clause).  [assumption].
31 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))) # label(non_clause).  [assumption].
32 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))) # label(non_clause).  [assumption].
33 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))) # label(non_clause).  [assumption].
34 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))) # label(non_clause).  [assumption].
35 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
36 (all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))) # label(non_clause).  [assumption].
37 (all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))) # label(non_clause).  [assumption].
38 (all x (meat(x) -> animalproduct(x))) # label(non_clause).  [assumption].
39 (all x (fish(x) -> animalproduct(x))) # label(non_clause).  [assumption].
40 (all x (egg(x) -> animalproduct(x))) # label(non_clause).  [assumption].
41 (all x (animalproduct(x) -> fooditem(x))) # label(non_clause).  [assumption].
42 (all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))) # label(non_clause).  [assumption].
43 (all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))) # label(non_clause).  [assumption].
44 (all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))) # label(non_clause).  [assumption].
45 (all x (groundbeef(x) -> beef(x))) # label(non_clause).  [assumption].
46 (all x (gas(x) & sells(Shell,x))) # label(non_clause).  [assumption].
47 (all x (adult(x) -> -child(x))) # label(non_clause).  [assumption].
48 (all x (child(x) -> -adult(x))) # label(non_clause).  [assumption].
49 (all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))) # label(non_clause).  [assumption].
50 (all x (milk(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
51 (all x (cheese(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
52 (all x (butter(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
53 (all x (fish(x) -> meat(x))) # label(non_clause).  [assumption].
54 (all x (vegetable(x) -> fooditem(x))) # label(non_clause).  [assumption].
55 (all x (tomato(x) -> vegetable(x))) # label(non_clause).  [assumption].
56 (all x (cabbage(x) -> vegetable(x))) # label(non_clause).  [assumption].
57 (all x (broccoli(x) -> vegetable(x))) # label(non_clause).  [assumption].
58 (all x (potato(x) -> vegetable(x))) # label(non_clause).  [assumption].
59 (all x (onion(x) -> vegetable(x))) # label(non_clause).  [assumption].
60 (all x (juice(x) -> beverage(x))) # label(non_clause).  [assumption].
61 (all x (soda(x) -> beverage(x))) # label(non_clause).  [assumption].
62 (all x (alcohol(x) -> beverage(x))) # label(non_clause).  [assumption].
63 (all x (water(x) -> beverage(x))) # label(non_clause).  [assumption].
64 (all x (tea(x) -> beverage(x))) # label(non_clause).  [assumption].
65 (all x (coffee(x) -> beverage(x))) # label(non_clause).  [assumption].
66 (all x (fruit(x) -> fooditem(x))) # label(non_clause).  [assumption].
67 (all x (apple(x) -> fruit(x))) # label(non_clause).  [assumption].
68 (all x (mango(x) -> fruit(x))) # label(non_clause).  [assumption].
69 (all x (banana(x) -> fruit(x))) # label(non_clause).  [assumption].
70 (all x (strawberry(x) -> fruit(x))) # label(non_clause).  [assumption].
71 (all x (pineapple(x) -> fruit(x))) # label(non_clause).  [assumption].
72 (all x (lotion(x) -> personalitem(x))) # label(non_clause).  [assumption].
73 (all x (hairspray(x) -> personalitem(x))) # label(non_clause).  [assumption].
74 (all x (shavingcream(x) -> personalitem(x))) # label(non_clause).  [assumption].
75 (all x (cosmetic(x) -> personalitem(x))) # label(non_clause).  [assumption].
76 (all x (toothbrush(x) -> personalitem(x))) # label(non_clause).  [assumption].
77 (all x (bodywash(x) -> personalitem(x))) # label(non_clause).  [assumption].
78 (all x (soap(x) -> personalitem(x))) # label(non_clause).  [assumption].
79 eats(John,T) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | shop(x).  [clausify(2)].
-supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
-supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
customer(f2(x,y,z,u,w)).  [clausify(4)].
supermarket(x).  [clausify(4)].
employee(x).  [clausify(4)].
item(x).  [clausify(4)].
restock(x,y,z).  [clausify(4)].
assist(x,y).  [clausify(4)].
supermarket(f3(x)).  [clausify(5)].
customer(x).  [clausify(5)].
use(x,Cart).  [clausify(5)].
-customer(x) | get(x,receipt).  [clausify(6)].
-supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
-shop(x) | -item(y) | sells(x,y).  [clausify(8)].
-time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
-customer(x) | adult(x).  [clausify(10)].
-people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
-people(x) | -works(x) | employee(x).  [clausify(12)].
shop(x).  [clausify(13)].
has(x,y).  [clausify(13)].
employee(x).  [clausify(13)].
customer(x).  [clausify(13)].
-fooditem(x) | item(x).  [clausify(14)].
-personalitem(x) | item(x).  [clausify(15)].
deodorant(D).  [assumption].
-deodorant(x) | personalitem(x).  [clausify(16)].
tomato(T).  [assumption].
beef(B).  [assumption].
-beef(x) | meat(x).  [clausify(17)].
-lamb(x) | meat(x).  [clausify(18)].
-pork(x) | meat(x).  [clausify(19)].
-sausage(x) | meat(x).  [clausify(20)].
-stew_meat(x) | meat(x).  [clausify(21)].
-halal(x) | meat(x).  [clausify(22)].
-meat(x) | fooditem(x).  [clausify(23)].
-person(x) | people(x).  [clausify(24)].
-supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
person(John).  [assumption].
bought(John,T,Safeway,t).  [assumption].
weight(T,2).  [assumption].
weight(B,1).  [assumption].
bought(John,B,Safeway,t).  [assumption].
person(Mary).  [assumption].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
money(card).  [assumption].
money(cash).  [assumption].
isa(creditcard,card).  [assumption].
supermarket(Safeway).  [assumption].
supermarket(NBS).  [assumption].
isa(NBS,Safeway).  [assumption].
locatedAt(Safeway,NorthBerkeley).  [assumption].
time(t).  [assumption].
measure(Pound).  [assumption].
measure(Ounce).  [assumption].
measure(Kilogram).  [assumption].
-fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
-fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
-tomato(x) | piecesPerPound(x,5).  [clausify(30)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
-customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
-person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
-meat(x) | animalproduct(x).  [clausify(38)].
-fish(x) | animalproduct(x).  [clausify(39)].
-egg(x) | animalproduct(x).  [clausify(40)].
-animalproduct(x) | fooditem(x).  [clausify(41)].
-people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
-people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
-people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
-people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
-groundbeef(x) | beef(x).  [clausify(45)].
gas(G).  [assumption].
gas(x).  [clausify(46)].
sells(Shell,x).  [clausify(46)].
-adult(x) | -child(x).  [clausify(47)].
-child(x) | -adult(x).  [clausify(48)].
-shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
hasSize(carTrunk,600).  [assumption].
-milk(x) | dairyproduct(x).  [clausify(50)].
-cheese(x) | dairyproduct(x).  [clausify(51)].
-butter(x) | dairyproduct(x).  [clausify(52)].
-fish(x) | meat(x).  [clausify(53)].
-vegetable(x) | fooditem(x).  [clausify(54)].
-tomato(x) | vegetable(x).  [clausify(55)].
-cabbage(x) | vegetable(x).  [clausify(56)].
-broccoli(x) | vegetable(x).  [clausify(57)].
-potato(x) | vegetable(x).  [clausify(58)].
-onion(x) | vegetable(x).  [clausify(59)].
-juice(x) | beverage(x).  [clausify(60)].
-soda(x) | beverage(x).  [clausify(61)].
-alcohol(x) | beverage(x).  [clausify(62)].
-water(x) | beverage(x).  [clausify(63)].
-tea(x) | beverage(x).  [clausify(64)].
-coffee(x) | beverage(x).  [clausify(65)].
-fruit(x) | fooditem(x).  [clausify(66)].
-apple(x) | fruit(x).  [clausify(67)].
-mango(x) | fruit(x).  [clausify(68)].
-banana(x) | fruit(x).  [clausify(69)].
-strawberry(x) | fruit(x).  [clausify(70)].
-pineapple(x) | fruit(x).  [clausify(71)].
-lotion(x) | personalitem(x).  [clausify(72)].
-hairspray(x) | personalitem(x).  [clausify(73)].
-shavingcream(x) | personalitem(x).  [clausify(74)].
-cosmetic(x) | personalitem(x).  [clausify(75)].
-toothbrush(x) | personalitem(x).  [clausify(76)].
-bodywash(x) | personalitem(x).  [clausify(77)].
-soap(x) | personalitem(x).  [clausify(78)].
-eats(John,T).  [deny(79)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating supermarket/1
80 supermarket(x).  [clausify(4)].
81 -supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
82 -supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
83 -supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
84 -supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
85 -supermarket(x) | shop(x).  [clausify(2)].
86 -supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
87 -supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
Derived: -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
Derived: -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
Derived: -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
Derived: -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
Derived: -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
88 supermarket(f3(x)).  [clausify(5)].
89 -supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
Derived: -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
90 -supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
Derived: -item(x) | -make(y,x).  [resolve(90,a,80,a)].
91 supermarket(Safeway).  [assumption].
Derived: shop(Safeway).  [resolve(91,a,85,a)].
92 supermarket(NBS).  [assumption].
Derived: shop(NBS).  [resolve(92,a,85,a)].

Eliminating customer/1
93 -customer(x) | get(x,receipt).  [clausify(6)].
94 customer(f2(x,y,z,u,w)).  [clausify(4)].
95 customer(x).  [clausify(5)].
Derived: get(f2(x,y,z,u,w),receipt).  [resolve(93,a,94,a)].
Derived: get(x,receipt).  [resolve(93,a,95,a)].
96 -time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
97 -customer(x) | adult(x).  [clausify(10)].
Derived: adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
Derived: adult(x).  [resolve(97,a,95,a)].
98 customer(x).  [clausify(13)].
99 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
100 -shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
101 -shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
102 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
103 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
104 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
105 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
106 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
107 -customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
Derived: -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
Derived: -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
108 -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].

Eliminating employee/1
109 -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
110 employee(x).  [clausify(4)].
111 -people(x) | -works(x) | employee(x).  [clausify(12)].
112 employee(x).  [clausify(13)].

Eliminating item/1
113 -shop(x) | -item(y) | sells(x,y).  [clausify(8)].
114 item(x).  [clausify(4)].
Derived: -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
115 -people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
Derived: -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
116 -fooditem(x) | item(x).  [clausify(14)].
117 -personalitem(x) | item(x).  [clausify(15)].
118 -person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
Derived: -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
119 -shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
Derived: -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
120 -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
Derived: deliver(x,y).  [resolve(120,a,114,a)].
121 -item(x) | -make(y,x).  [resolve(90,a,80,a)].
Derived: -make(x,y).  [resolve(121,a,114,a)].
122 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
123 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
124 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
125 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
126 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
127 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
128 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
129 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
130 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
131 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
132 -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: scan(f2(x,y,z,u,w),v5,v6).  [resolve(132,a,114,a)].
133 -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].
Derived: scan(x,y,z).  [resolve(133,a,114,a)].

Eliminating restock/3

Eliminating assist/2

Eliminating use/2

Eliminating shop/1
134 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
135 shop(x).  [clausify(13)].
136 shop(Safeway).  [resolve(91,a,85,a)].
137 shop(NBS).  [resolve(92,a,85,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
138 -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
Derived: -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
139 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | money(v6).  [resolve(139,a,135,a)].
140 -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
Derived: -bringsMoney(x,y) | money(z).  [resolve(140,a,135,a)].
141 -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
Derived: sells(x,y).  [resolve(141,a,135,a)].
142 -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
Derived: -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
143 -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
Derived: -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
144 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
145 -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
146 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
147 -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
148 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
149 -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
150 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
151 -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
152 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
153 -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].

Eliminating has/2

Eliminating deodorant/1
154 -deodorant(x) | personalitem(x).  [clausify(16)].
155 deodorant(D).  [assumption].
Derived: personalitem(D).  [resolve(154,a,155,a)].

Eliminating tomato/1
156 -tomato(x) | piecesPerPound(x,5).  [clausify(30)].
157 tomato(T).  [assumption].
Derived: piecesPerPound(T,5).  [resolve(156,a,157,a)].
158 -tomato(x) | vegetable(x).  [clausify(55)].
Derived: vegetable(T).  [resolve(158,a,157,a)].

Eliminating beef/1
159 -beef(x) | meat(x).  [clausify(17)].
160 beef(B).  [assumption].
Derived: meat(B).  [resolve(159,a,160,a)].
161 -groundbeef(x) | beef(x).  [clausify(45)].
Derived: -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].

Eliminating lamb/1

Eliminating pork/1

Eliminating sausage/1

Eliminating stew_meat/1

Eliminating halal/1

Eliminating meat/1
162 -fish(x) | meat(x).  [clausify(53)].
163 -meat(x) | fooditem(x).  [clausify(23)].
164 -meat(x) | animalproduct(x).  [clausify(38)].
Derived: -fish(x) | fooditem(x).  [resolve(162,b,163,a)].
Derived: -fish(x) | animalproduct(x).  [resolve(162,b,164,a)].
165 meat(B).  [resolve(159,a,160,a)].
Derived: fooditem(B).  [resolve(165,a,163,a)].
Derived: animalproduct(B).  [resolve(165,a,164,a)].
166 -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(166,b,163,a)].
Derived: -groundbeef(x) | animalproduct(x).  [resolve(166,b,164,a)].

Eliminating people/1
167 -people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
168 -person(x) | people(x).  [clausify(24)].
Derived: eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(167,a,168,b)].
169 -people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(169,a,168,b)].
170 -people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(170,a,168,b)].
171 -people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
Derived: -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(171,a,168,b)].
172 -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
Derived: -sellItems(x,y) | seller(x) | -person(x).  [resolve(172,a,168,b)].

Eliminating weight/2
173 -fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
174 weight(T,2).  [assumption].
175 weight(B,1).  [assumption].
Derived: -fooditem(B) | unit(B).  [resolve(173,b,175,a)].

Eliminating money/1

Eliminating isa/2

Eliminating locatedAt/2

Eliminating time/1
176 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
177 time(t).  [assumption].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(176,a,177,a)].
178 -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
Derived: -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].
179 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(179,a,177,a)].
180 -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
Derived: -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
181 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(181,a,177,a)].
182 -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
Derived: -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
183 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(183,a,177,a)].
184 -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
Derived: -paid(x,y,z,t) | moreMoney(z).  [resolve(184,a,177,a)].
185 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(185,a,177,a)].
186 -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].
Derived: -bought(x,y,z,t) | owns(x,y).  [resolve(186,a,177,a)].

Eliminating measure/1
187 -fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
188 measure(Pound).  [assumption].
189 measure(Ounce).  [assumption].
190 measure(Kilogram).  [assumption].
Derived: -fooditem(x) | usedToWeight(Pound,x).  [resolve(187,b,188,a)].
Derived: -fooditem(x) | usedToWeight(Ounce,x).  [resolve(187,b,189,a)].
Derived: -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(187,b,190,a)].

Eliminating fish/1

Eliminating egg/1

Eliminating animalproduct/1
191 animalproduct(B).  [resolve(165,a,164,a)].
192 -animalproduct(x) | fooditem(x).  [clausify(41)].
Derived: fooditem(B).  [resolve(191,a,192,a)].
193 -groundbeef(x) | animalproduct(x).  [resolve(166,b,164,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(193,b,192,a)].
194 eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(167,a,168,b)].
Derived: eats(x,B) | vegetarian(x) | -person(x).  [resolve(194,b,191,a)].
Derived: eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(194,b,193,b)].
195 eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(169,a,168,b)].
Derived: eats(x,B) | vegan(x) | -person(x).  [resolve(195,b,191,a)].
Derived: eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(195,b,193,b)].
196 -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(171,a,168,b)].
Derived: -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(196,b,191,a)].
Derived: -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(196,b,193,b)].

Eliminating gas/1

Eliminating sells/2
197 -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
198 sells(Shell,x).  [clausify(46)].
199 -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
200 -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
201 -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
202 -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
203 sells(x,y).  [resolve(141,a,135,a)].
Derived: owns(Shell,x).  [resolve(197,a,198,a)].
Derived: owns(x,y) | -personalitem(y).  [resolve(197,a,199,b)].
Derived: owns(x,y) | -fooditem(y).  [resolve(197,a,200,b)].
Derived: owns(x,y) | -dairyproducts(y).  [resolve(197,a,201,b)].
Derived: owns(x,y) | -beverages(y).  [resolve(197,a,202,b)].
Derived: owns(x,y).  [resolve(197,a,203,a)].

Eliminating adult/1
204 adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
205 -adult(x) | -child(x).  [clausify(47)].
206 -child(x) | -adult(x).  [clausify(48)].
Derived: -child(f2(x,y,z,u,w)).  [resolve(204,a,205,a)].
207 adult(x).  [resolve(97,a,95,a)].
Derived: -child(x).  [resolve(207,a,205,a)].

Eliminating hasSize/2

Eliminating milk/1

Eliminating cheese/1

Eliminating butter/1

Eliminating vegetable/1
208 -cabbage(x) | vegetable(x).  [clausify(56)].
209 -vegetable(x) | fooditem(x).  [clausify(54)].
Derived: -cabbage(x) | fooditem(x).  [resolve(208,b,209,a)].
210 -broccoli(x) | vegetable(x).  [clausify(57)].
Derived: -broccoli(x) | fooditem(x).  [resolve(210,b,209,a)].
211 -potato(x) | vegetable(x).  [clausify(58)].
Derived: -potato(x) | fooditem(x).  [resolve(211,b,209,a)].
212 -onion(x) | vegetable(x).  [clausify(59)].
Derived: -onion(x) | fooditem(x).  [resolve(212,b,209,a)].
213 vegetable(T).  [resolve(158,a,157,a)].
Derived: fooditem(T).  [resolve(213,a,209,a)].

Eliminating juice/1

Eliminating soda/1

Eliminating alcohol/1

Eliminating water/1

Eliminating tea/1

Eliminating coffee/1

Eliminating fruit/1
214 -apple(x) | fruit(x).  [clausify(67)].
215 -fruit(x) | fooditem(x).  [clausify(66)].
Derived: -apple(x) | fooditem(x).  [resolve(214,b,215,a)].
216 -mango(x) | fruit(x).  [clausify(68)].
Derived: -mango(x) | fooditem(x).  [resolve(216,b,215,a)].
217 -banana(x) | fruit(x).  [clausify(69)].
Derived: -banana(x) | fooditem(x).  [resolve(217,b,215,a)].
218 -strawberry(x) | fruit(x).  [clausify(70)].
Derived: -strawberry(x) | fooditem(x).  [resolve(218,b,215,a)].
219 -pineapple(x) | fruit(x).  [clausify(71)].
Derived: -pineapple(x) | fooditem(x).  [resolve(219,b,215,a)].

Eliminating lotion/1

Eliminating hairspray/1

Eliminating shavingcream/1

Eliminating cosmetic/1

Eliminating toothbrush/1

Eliminating bodywash/1

Eliminating soap/1

Eliminating eats/2
220 -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
221 -eats(John,T).  [deny(79)].
222 -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
Derived: -fooditem(T) | -owns(John,T).  [resolve(222,c,221,a)].
223 eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(170,a,168,b)].
Derived: -dairyproduct(T) | vegan(John) | -person(John).  [resolve(223,a,221,a)].
224 eats(x,B) | vegetarian(x) | -person(x).  [resolve(194,b,191,a)].
225 eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(194,b,193,b)].
Derived: vegetarian(John) | -person(John) | -groundbeef(T).  [resolve(225,a,221,a)].
226 eats(x,B) | vegan(x) | -person(x).  [resolve(195,b,191,a)].
227 eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(195,b,193,b)].
Derived: vegan(John) | -person(John) | -groundbeef(T).  [resolve(227,a,221,a)].
228 -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(196,b,191,a)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -fooditem(B) | -owns(f2(x,y,z,u,w),B).  [resolve(228,a,220,c)].
Derived: nonvegetarian(x) | -person(x) | -fooditem(B) | -owns(x,B).  [resolve(228,a,222,c)].
Derived: nonvegetarian(x) | -person(x) | -dairyproduct(B) | vegan(x) | -person(x).  [resolve(228,a,223,a)].
Derived: nonvegetarian(x) | -person(x) | vegetarian(x) | -person(x).  [resolve(228,a,224,a)].
Derived: nonvegetarian(x) | -person(x) | vegan(x) | -person(x).  [resolve(228,a,226,a)].
229 -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(196,b,193,b)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -groundbeef(v5) | -fooditem(v5) | -owns(f2(x,y,z,u,w),v5).  [resolve(229,a,220,c)].
Derived: nonvegetarian(x) | -person(x) | -groundbeef(y) | -fooditem(y) | -owns(x,y).  [resolve(229,a,222,c)].

Eliminating get/2

Eliminating deliver/2

Eliminating make/2

Eliminating scan/3

Eliminating bringsMoney/2
230 -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(176,a,177,a)].
231 -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
232 -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | brings(f2(x,y,z,u,w),v7,v6).  [resolve(230,b,231,a)].
233 -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].
Derived: -bought(x,y,z,t) | brings(x,u,z).  [resolve(233,b,232,a)].

Eliminating personalitem/1
234 owns(x,y) | -personalitem(y).  [resolve(197,a,199,b)].
235 personalitem(D).  [resolve(154,a,155,a)].

Eliminating piecesPerPound/2

Eliminating fooditem/1
236 -fooditem(B) | unit(B).  [resolve(173,b,175,a)].
237 fooditem(B).  [resolve(165,a,163,a)].
238 -groundbeef(x) | fooditem(x).  [resolve(166,b,163,a)].
Derived: unit(B).  [resolve(236,a,237,a)].
239 -fooditem(x) | usedToWeight(Pound,x).  [resolve(187,b,188,a)].
Derived: usedToWeight(Pound,B).  [resolve(239,a,237,a)].
Derived: usedToWeight(Pound,x) | -groundbeef(x).  [resolve(239,a,238,b)].
240 -fooditem(x) | usedToWeight(Ounce,x).  [resolve(187,b,189,a)].
Derived: usedToWeight(Ounce,B).  [resolve(240,a,237,a)].
Derived: usedToWeight(Ounce,x) | -groundbeef(x).  [resolve(240,a,238,b)].
241 -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(187,b,190,a)].
Derived: usedToWeight(Kilogram,B).  [resolve(241,a,237,a)].
Derived: usedToWeight(Kilogram,x) | -groundbeef(x).  [resolve(241,a,238,b)].
242 fooditem(B).  [resolve(191,a,192,a)].
243 -groundbeef(x) | fooditem(x).  [resolve(193,b,192,a)].
244 owns(x,y) | -fooditem(y).  [resolve(197,a,200,b)].
245 -cabbage(x) | fooditem(x).  [resolve(208,b,209,a)].
Derived: -cabbage(x) | usedToWeight(Pound,x).  [resolve(245,b,239,a)].
Derived: -cabbage(x) | usedToWeight(Ounce,x).  [resolve(245,b,240,a)].
Derived: -cabbage(x) | usedToWeight(Kilogram,x).  [resolve(245,b,241,a)].
Derived: -cabbage(x) | owns(y,x).  [resolve(245,b,244,b)].
246 -broccoli(x) | fooditem(x).  [resolve(210,b,209,a)].
Derived: -broccoli(x) | usedToWeight(Pound,x).  [resolve(246,b,239,a)].
Derived: -broccoli(x) | usedToWeight(Ounce,x).  [resolve(246,b,240,a)].
Derived: -broccoli(x) | usedToWeight(Kilogram,x).  [resolve(246,b,241,a)].
Derived: -broccoli(x) | owns(y,x).  [resolve(246,b,244,b)].
247 -potato(x) | fooditem(x).  [resolve(211,b,209,a)].
Derived: -potato(x) | usedToWeight(Pound,x).  [resolve(247,b,239,a)].
Derived: -potato(x) | usedToWeight(Ounce,x).  [resolve(247,b,240,a)].
Derived: -potato(x) | usedToWeight(Kilogram,x).  [resolve(247,b,241,a)].
Derived: -potato(x) | owns(y,x).  [resolve(247,b,244,b)].
248 -onion(x) | fooditem(x).  [resolve(212,b,209,a)].
Derived: -onion(x) | usedToWeight(Pound,x).  [resolve(248,b,239,a)].
Derived: -onion(x) | usedToWeight(Ounce,x).  [resolve(248,b,240,a)].
Derived: -onion(x) | usedToWeight(Kilogram,x).  [resolve(248,b,241,a)].
Derived: -onion(x) | owns(y,x).  [resolve(248,b,244,b)].
249 fooditem(T).  [resolve(213,a,209,a)].
Derived: usedToWeight(Pound,T).  [resolve(249,a,239,a)].
Derived: usedToWeight(Ounce,T).  [resolve(249,a,240,a)].
Derived: usedToWeight(Kilogram,T).  [resolve(249,a,241,a)].
Derived: owns(x,T).  [resolve(249,a,244,b)].
250 -apple(x) | fooditem(x).  [resolve(214,b,215,a)].
Derived: -apple(x) | usedToWeight(Pound,x).  [resolve(250,b,239,a)].
Derived: -apple(x) | usedToWeight(Ounce,x).  [resolve(250,b,240,a)].
Derived: -apple(x) | usedToWeight(Kilogram,x).  [resolve(250,b,241,a)].
Derived: -apple(x) | owns(y,x).  [resolve(250,b,244,b)].
251 -mango(x) | fooditem(x).  [resolve(216,b,215,a)].
Derived: -mango(x) | usedToWeight(Pound,x).  [resolve(251,b,239,a)].
Derived: -mango(x) | usedToWeight(Ounce,x).  [resolve(251,b,240,a)].
Derived: -mango(x) | usedToWeight(Kilogram,x).  [resolve(251,b,241,a)].
Derived: -mango(x) | owns(y,x).  [resolve(251,b,244,b)].
252 -banana(x) | fooditem(x).  [resolve(217,b,215,a)].
Derived: -banana(x) | usedToWeight(Pound,x).  [resolve(252,b,239,a)].
Derived: -banana(x) | usedToWeight(Ounce,x).  [resolve(252,b,240,a)].
Derived: -banana(x) | usedToWeight(Kilogram,x).  [resolve(252,b,241,a)].
Derived: -banana(x) | owns(y,x).  [resolve(252,b,244,b)].
253 -strawberry(x) | fooditem(x).  [resolve(218,b,215,a)].
Derived: -strawberry(x) | usedToWeight(Pound,x).  [resolve(253,b,239,a)].
Derived: -strawberry(x) | usedToWeight(Ounce,x).  [resolve(253,b,240,a)].
Derived: -strawberry(x) | usedToWeight(Kilogram,x).  [resolve(253,b,241,a)].
Derived: -strawberry(x) | owns(y,x).  [resolve(253,b,244,b)].
254 -pineapple(x) | fooditem(x).  [resolve(219,b,215,a)].
Derived: -pineapple(x) | usedToWeight(Pound,x).  [resolve(254,b,239,a)].
Derived: -pineapple(x) | usedToWeight(Ounce,x).  [resolve(254,b,240,a)].
Derived: -pineapple(x) | usedToWeight(Kilogram,x).  [resolve(254,b,241,a)].
Derived: -pineapple(x) | owns(y,x).  [resolve(254,b,244,b)].
255 -fooditem(T) | -owns(John,T).  [resolve(222,c,221,a)].
Derived: -owns(John,T) | -groundbeef(T).  [resolve(255,a,238,b)].
Derived: -owns(John,T) | -cabbage(T).  [resolve(255,a,245,b)].
Derived: -owns(John,T) | -broccoli(T).  [resolve(255,a,246,b)].
Derived: -owns(John,T) | -potato(T).  [resolve(255,a,247,b)].
Derived: -owns(John,T) | -onion(T).  [resolve(255,a,248,b)].
Derived: -owns(John,T).  [resolve(255,a,249,a)].
256 nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -fooditem(B) | -owns(f2(x,y,z,u,w),B).  [resolve(228,a,220,c)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -owns(f2(x,y,z,u,w),B).  [resolve(256,c,237,a)].
257 nonvegetarian(x) | -person(x) | -fooditem(B) | -owns(x,B).  [resolve(228,a,222,c)].
Derived: nonvegetarian(x) | -person(x) | -owns(x,B).  [resolve(257,c,237,a)].
258 nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -groundbeef(v5) | -fooditem(v5) | -owns(f2(x,y,z,u,w),v5).  [resolve(229,a,220,c)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -groundbeef(v5) | -owns(f2(x,y,z,u,w),v5) | -groundbeef(v5).  [resolve(258,d,238,b)].
259 nonvegetarian(x) | -person(x) | -groundbeef(y) | -fooditem(y) | -owns(x,y).  [resolve(229,a,222,c)].
Derived: nonvegetarian(x) | -person(x) | -groundbeef(y) | -owns(x,y) | -groundbeef(y).  [resolve(259,d,238,b)].

Eliminating sellItems/2

Eliminating paid/4
260 -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(181,a,177,a)].
261 -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(179,a,177,a)].
262 -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
Derived: lessMoney(f2(x,y,z,u,w)) | -bought(f2(x,y,z,u,w),v5,v6,t).  [resolve(260,a,261,b)].
263 -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
Derived: lessMoney(x) | -bought(x,y,z,t).  [resolve(263,a,262,b)].
264 -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(183,a,177,a)].
Derived: moreMoney(x) | -bought(f2(y,z,u,w,v5),v6,x,t).  [resolve(264,a,261,b)].
265 -paid(x,y,z,t) | moreMoney(z).  [resolve(184,a,177,a)].
Derived: moreMoney(x) | -bought(y,z,x,t).  [resolve(265,a,262,b)].

Eliminating owns/2
266 -owns(John,T) | -groundbeef(T).  [resolve(255,a,238,b)].
267 -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(185,a,177,a)].
268 -bought(x,y,z,t) | owns(x,y).  [resolve(186,a,177,a)].
269 owns(Shell,x).  [resolve(197,a,198,a)].
270 owns(x,y) | -dairyproducts(y).  [resolve(197,a,201,b)].
271 owns(x,y) | -beverages(y).  [resolve(197,a,202,b)].
272 owns(x,y).  [resolve(197,a,203,a)].
273 -cabbage(x) | owns(y,x).  [resolve(245,b,244,b)].
274 -broccoli(x) | owns(y,x).  [resolve(246,b,244,b)].
275 -potato(x) | owns(y,x).  [resolve(247,b,244,b)].
276 -onion(x) | owns(y,x).  [resolve(248,b,244,b)].
277 owns(x,T).  [resolve(249,a,244,b)].
278 -apple(x) | owns(y,x).  [resolve(250,b,244,b)].
279 -mango(x) | owns(y,x).  [resolve(251,b,244,b)].
280 -banana(x) | owns(y,x).  [resolve(252,b,244,b)].
281 -strawberry(x) | owns(y,x).  [resolve(253,b,244,b)].
282 -pineapple(x) | owns(y,x).  [resolve(254,b,244,b)].
Derived: -groundbeef(T) | -bought(John,T,x,t).  [resolve(266,a,268,b)].
Derived: -groundbeef(T) | -dairyproducts(T).  [resolve(266,a,270,a)].
Derived: -groundbeef(T) | -beverages(T).  [resolve(266,a,271,a)].
Derived: -groundbeef(T).  [resolve(266,a,272,a)].
283 -owns(John,T) | -cabbage(T).  [resolve(255,a,245,b)].
Derived: -cabbage(T) | -bought(John,T,x,t).  [resolve(283,a,268,b)].
Derived: -cabbage(T) | -dairyproducts(T).  [resolve(283,a,270,a)].
Derived: -cabbage(T) | -beverages(T).  [resolve(283,a,271,a)].
Derived: -cabbage(T).  [resolve(283,a,272,a)].
284 -owns(John,T) | -broccoli(T).  [resolve(255,a,246,b)].
Derived: -broccoli(T) | -bought(John,T,x,t).  [resolve(284,a,268,b)].
Derived: -broccoli(T) | -dairyproducts(T).  [resolve(284,a,270,a)].
Derived: -broccoli(T) | -beverages(T).  [resolve(284,a,271,a)].
Derived: -broccoli(T).  [resolve(284,a,272,a)].
285 -owns(John,T) | -potato(T).  [resolve(255,a,247,b)].
Derived: -potato(T) | -bought(John,T,x,t).  [resolve(285,a,268,b)].
Derived: -potato(T) | -dairyproducts(T).  [resolve(285,a,270,a)].
Derived: -potato(T) | -beverages(T).  [resolve(285,a,271,a)].
Derived: -potato(T).  [resolve(285,a,272,a)].
286 -owns(John,T) | -onion(T).  [resolve(255,a,248,b)].
Derived: -onion(T) | -bought(John,T,x,t).  [resolve(286,a,268,b)].
Derived: -onion(T) | -dairyproducts(T).  [resolve(286,a,270,a)].
Derived: -onion(T) | -beverages(T).  [resolve(286,a,271,a)].
Derived: -onion(T).  [resolve(286,a,272,a)].
287 -owns(John,T).  [resolve(255,a,249,a)].
Derived: -bought(John,T,x,t).  [resolve(287,a,268,b)].
Derived: -dairyproducts(T).  [resolve(287,a,270,a)].
Derived: -beverages(T).  [resolve(287,a,271,a)].
Derived: $F.  [resolve(287,a,272,a)].
288 nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -owns(f2(x,y,z,u,w),B).  [resolve(256,c,237,a)].
289 nonvegetarian(x) | -person(x) | -owns(x,B).  [resolve(257,c,237,a)].
290 nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -groundbeef(v5) | -owns(f2(x,y,z,u,w),v5) | -groundbeef(v5).  [resolve(258,d,238,b)].
291 nonvegetarian(x) | -person(x) | -groundbeef(y) | -owns(x,y) | -groundbeef(y).  [resolve(259,d,238,b)].

Eliminating child/1

Eliminating dairyproduct/1

Eliminating vegetarian/1

Eliminating vegan/1

Eliminating brings/3

Eliminating unit/1

Eliminating usedToWeight/2

Eliminating lessMoney/1

Eliminating moreMoney/1

Eliminating groundbeef/1

Eliminating cabbage/1

Eliminating broccoli/1

Eliminating potato/1

Eliminating onion/1

Eliminating dairyproducts/1

Eliminating beverages/1

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ person, see, bought ]).
Function symbol precedence:  function_order([ t, John, Safeway, B, Mary, T ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      292 person(John).  [assumption].
kept:      293 bought(John,T,Safeway,t).  [assumption].
kept:      294 bought(John,B,Safeway,t).  [assumption].
kept:      295 person(Mary).  [assumption].
kept:      296 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
kept:      297 -bought(John,T,x,t).  [resolve(287,a,268,b)].

============================== PROOF =================================

% Proof 1 at 0.03 (+ 0.01) seconds.
% Length of proof is 30.
% Level of proof is 7.
% Maximum clause weight is 5.000.
% Given clauses 0.

4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
34 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))) # label(non_clause).  [assumption].
36 (all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))) # label(non_clause).  [assumption].
54 (all x (vegetable(x) -> fooditem(x))) # label(non_clause).  [assumption].
55 (all x (tomato(x) -> vegetable(x))) # label(non_clause).  [assumption].
79 eats(John,T) # label(non_clause) # label(goal).  [goal].
95 customer(x).  [clausify(5)].
105 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
107 -customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
114 item(x).  [clausify(4)].
131 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
135 shop(x).  [clausify(13)].
153 -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
157 tomato(T).  [assumption].
158 -tomato(x) | vegetable(x).  [clausify(55)].
177 time(t).  [assumption].
186 -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].
209 -vegetable(x) | fooditem(x).  [clausify(54)].
213 vegetable(T).  [resolve(158,a,157,a)].
221 -eats(John,T).  [deny(79)].
222 -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
249 fooditem(T).  [resolve(213,a,209,a)].
255 -fooditem(T) | -owns(John,T).  [resolve(222,c,221,a)].
268 -bought(x,y,z,t) | owns(x,y).  [resolve(186,a,177,a)].
287 -owns(John,T).  [resolve(255,a,249,a)].
293 bought(John,T,Safeway,t).  [assumption].
297 -bought(John,T,x,t).  [resolve(287,a,268,b)].
298 $F.  [resolve(297,a,293,a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=6. Kept=6. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=5, Disabled=338. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=0. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=0. Nonunit_bsub_feature_tests=0.
Megabytes=0.45.
User_CPU=0.03, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 9703 exit (max_proofs) Sun Apr 26 00:47:52 2020


















g.	Does Safeway sell deodorant? 
all x (deodorant(x) -> sells(Safeway, x)).


============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 9704 was started by rinkleseth on Rinkles-MacBook-Pro.local,
Sun Apr 26 00:48:09 2020
The command was "/Users/rinkleseth/Downloads/LADR-2009-11A/bin/prover9 -f /Users/rinkleseth/Desktop/spring2020/AI/project/input.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /Users/rinkleseth/Desktop/spring2020/AI/project/input.in


formulas(sos).
(all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))).
(all x (supermarket(x) -> shop(x))).
(all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))).
(all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))).
(all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))).
(all x (customer(x) -> get(x,receipt))).
(all x ((all y supermarket(x)) & item(y) -> deliver(x,y))).
(all x ((exists y shop(x)) & item(y) -> sells(x,y))).
(all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))).
(all x (customer(x) -> adult(x))).
(all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))).
(all x (people(x) & works(x) -> employee(x))).
(all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))).
(all x (fooditem(x) -> item(x))).
(all x (personalitem(x) -> item(x))).
deodorant(D).
(all x (deodorant(x) -> personalitem(x))).
tomato(T).
beef(B).
(all x (beef(x) -> meat(x))).
(all x (lamb(x) -> meat(x))).
(all x (pork(x) -> meat(x))).
(all x (sausage(x) -> meat(x))).
(all x (stew_meat(x) -> meat(x))).
(all x (halal(x) -> meat(x))).
(all x (meat(x) -> fooditem(x))).
(all x (person(x) -> people(x))).
(all x ((all y supermarket(x)) & item(y) -> -make(x,y))).
person(John).
bought(John,T,Safeway,t).
weight(T,2).
weight(B,1).
bought(John,B,Safeway,t).
person(Mary).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))).
money(card).
money(cash).
isa(creditcard,card).
supermarket(Safeway).
supermarket(NBS).
isa(NBS,Safeway).
locatedAt(Safeway,NorthBerkeley).
time(t).
measure(Pound).
measure(Ounce).
measure(Kilogram).
(all x (fooditem(x) & weight(x,1) -> unit(x))).
(all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))).
(all x (tomato(x) -> piecesPerPound(x,5))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))).
(all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))).
(all x (meat(x) -> animalproduct(x))).
(all x (fish(x) -> animalproduct(x))).
(all x (egg(x) -> animalproduct(x))).
(all x (animalproduct(x) -> fooditem(x))).
(all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))).
(all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))).
(all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))).
(all x (groundbeef(x) -> beef(x))).
gas(G).
(all x (gas(x) & sells(Shell,x))).
(all x (adult(x) -> -child(x))).
(all x (child(x) -> -adult(x))).
(all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))).
hasSize(carTrunk,600).
(all x (milk(x) -> dairyproduct(x))).
(all x (cheese(x) -> dairyproduct(x))).
(all x (butter(x) -> dairyproduct(x))).
(all x (fish(x) -> meat(x))).
(all x (vegetable(x) -> fooditem(x))).
(all x (tomato(x) -> vegetable(x))).
(all x (cabbage(x) -> vegetable(x))).
(all x (broccoli(x) -> vegetable(x))).
(all x (potato(x) -> vegetable(x))).
(all x (onion(x) -> vegetable(x))).
(all x (juice(x) -> beverage(x))).
(all x (soda(x) -> beverage(x))).
(all x (alcohol(x) -> beverage(x))).
(all x (water(x) -> beverage(x))).
(all x (tea(x) -> beverage(x))).
(all x (coffee(x) -> beverage(x))).
(all x (fruit(x) -> fooditem(x))).
(all x (apple(x) -> fruit(x))).
(all x (mango(x) -> fruit(x))).
(all x (banana(x) -> fruit(x))).
(all x (strawberry(x) -> fruit(x))).
(all x (pineapple(x) -> fruit(x))).
(all x (lotion(x) -> personalitem(x))).
(all x (hairspray(x) -> personalitem(x))).
(all x (shavingcream(x) -> personalitem(x))).
(all x (cosmetic(x) -> personalitem(x))).
(all x (toothbrush(x) -> personalitem(x))).
(all x (bodywash(x) -> personalitem(x))).
(all x (soap(x) -> personalitem(x))).
end_of_list.

formulas(goals).
(all x (deodorant(x) -> sells(Safeway,x))).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))) # label(non_clause).  [assumption].
2 (all x (supermarket(x) -> shop(x))) # label(non_clause).  [assumption].
3 (all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))) # label(non_clause).  [assumption].
4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
6 (all x (customer(x) -> get(x,receipt))) # label(non_clause).  [assumption].
7 (all x ((all y supermarket(x)) & item(y) -> deliver(x,y))) # label(non_clause).  [assumption].
8 (all x ((exists y shop(x)) & item(y) -> sells(x,y))) # label(non_clause).  [assumption].
9 (all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))) # label(non_clause).  [assumption].
10 (all x (customer(x) -> adult(x))) # label(non_clause).  [assumption].
11 (all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))) # label(non_clause).  [assumption].
12 (all x (people(x) & works(x) -> employee(x))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
14 (all x (fooditem(x) -> item(x))) # label(non_clause).  [assumption].
15 (all x (personalitem(x) -> item(x))) # label(non_clause).  [assumption].
16 (all x (deodorant(x) -> personalitem(x))) # label(non_clause).  [assumption].
17 (all x (beef(x) -> meat(x))) # label(non_clause).  [assumption].
18 (all x (lamb(x) -> meat(x))) # label(non_clause).  [assumption].
19 (all x (pork(x) -> meat(x))) # label(non_clause).  [assumption].
20 (all x (sausage(x) -> meat(x))) # label(non_clause).  [assumption].
21 (all x (stew_meat(x) -> meat(x))) # label(non_clause).  [assumption].
22 (all x (halal(x) -> meat(x))) # label(non_clause).  [assumption].
23 (all x (meat(x) -> fooditem(x))) # label(non_clause).  [assumption].
24 (all x (person(x) -> people(x))) # label(non_clause).  [assumption].
25 (all x ((all y supermarket(x)) & item(y) -> -make(x,y))) # label(non_clause).  [assumption].
26 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
27 (all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))) # label(non_clause).  [assumption].
28 (all x (fooditem(x) & weight(x,1) -> unit(x))) # label(non_clause).  [assumption].
29 (all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))) # label(non_clause).  [assumption].
30 (all x (tomato(x) -> piecesPerPound(x,5))) # label(non_clause).  [assumption].
31 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))) # label(non_clause).  [assumption].
32 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))) # label(non_clause).  [assumption].
33 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))) # label(non_clause).  [assumption].
34 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))) # label(non_clause).  [assumption].
35 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
36 (all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))) # label(non_clause).  [assumption].
37 (all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))) # label(non_clause).  [assumption].
38 (all x (meat(x) -> animalproduct(x))) # label(non_clause).  [assumption].
39 (all x (fish(x) -> animalproduct(x))) # label(non_clause).  [assumption].
40 (all x (egg(x) -> animalproduct(x))) # label(non_clause).  [assumption].
41 (all x (animalproduct(x) -> fooditem(x))) # label(non_clause).  [assumption].
42 (all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))) # label(non_clause).  [assumption].
43 (all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))) # label(non_clause).  [assumption].
44 (all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))) # label(non_clause).  [assumption].
45 (all x (groundbeef(x) -> beef(x))) # label(non_clause).  [assumption].
46 (all x (gas(x) & sells(Shell,x))) # label(non_clause).  [assumption].
47 (all x (adult(x) -> -child(x))) # label(non_clause).  [assumption].
48 (all x (child(x) -> -adult(x))) # label(non_clause).  [assumption].
49 (all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))) # label(non_clause).  [assumption].
50 (all x (milk(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
51 (all x (cheese(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
52 (all x (butter(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
53 (all x (fish(x) -> meat(x))) # label(non_clause).  [assumption].
54 (all x (vegetable(x) -> fooditem(x))) # label(non_clause).  [assumption].
55 (all x (tomato(x) -> vegetable(x))) # label(non_clause).  [assumption].
56 (all x (cabbage(x) -> vegetable(x))) # label(non_clause).  [assumption].
57 (all x (broccoli(x) -> vegetable(x))) # label(non_clause).  [assumption].
58 (all x (potato(x) -> vegetable(x))) # label(non_clause).  [assumption].
59 (all x (onion(x) -> vegetable(x))) # label(non_clause).  [assumption].
60 (all x (juice(x) -> beverage(x))) # label(non_clause).  [assumption].
61 (all x (soda(x) -> beverage(x))) # label(non_clause).  [assumption].
62 (all x (alcohol(x) -> beverage(x))) # label(non_clause).  [assumption].
63 (all x (water(x) -> beverage(x))) # label(non_clause).  [assumption].
64 (all x (tea(x) -> beverage(x))) # label(non_clause).  [assumption].
65 (all x (coffee(x) -> beverage(x))) # label(non_clause).  [assumption].
66 (all x (fruit(x) -> fooditem(x))) # label(non_clause).  [assumption].
67 (all x (apple(x) -> fruit(x))) # label(non_clause).  [assumption].
68 (all x (mango(x) -> fruit(x))) # label(non_clause).  [assumption].
69 (all x (banana(x) -> fruit(x))) # label(non_clause).  [assumption].
70 (all x (strawberry(x) -> fruit(x))) # label(non_clause).  [assumption].
71 (all x (pineapple(x) -> fruit(x))) # label(non_clause).  [assumption].
72 (all x (lotion(x) -> personalitem(x))) # label(non_clause).  [assumption].
73 (all x (hairspray(x) -> personalitem(x))) # label(non_clause).  [assumption].
74 (all x (shavingcream(x) -> personalitem(x))) # label(non_clause).  [assumption].
75 (all x (cosmetic(x) -> personalitem(x))) # label(non_clause).  [assumption].
76 (all x (toothbrush(x) -> personalitem(x))) # label(non_clause).  [assumption].
77 (all x (bodywash(x) -> personalitem(x))) # label(non_clause).  [assumption].
78 (all x (soap(x) -> personalitem(x))) # label(non_clause).  [assumption].
79 (all x (deodorant(x) -> sells(Safeway,x))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | shop(x).  [clausify(2)].
-supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
-supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
customer(f2(x,y,z,u,w)).  [clausify(4)].
supermarket(x).  [clausify(4)].
employee(x).  [clausify(4)].
item(x).  [clausify(4)].
restock(x,y,z).  [clausify(4)].
assist(x,y).  [clausify(4)].
supermarket(f3(x)).  [clausify(5)].
customer(x).  [clausify(5)].
use(x,Cart).  [clausify(5)].
-customer(x) | get(x,receipt).  [clausify(6)].
-supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
-shop(x) | -item(y) | sells(x,y).  [clausify(8)].
-time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
-customer(x) | adult(x).  [clausify(10)].
-people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
-people(x) | -works(x) | employee(x).  [clausify(12)].
shop(x).  [clausify(13)].
has(x,y).  [clausify(13)].
employee(x).  [clausify(13)].
customer(x).  [clausify(13)].
-fooditem(x) | item(x).  [clausify(14)].
-personalitem(x) | item(x).  [clausify(15)].
deodorant(D).  [assumption].
-deodorant(x) | personalitem(x).  [clausify(16)].
tomato(T).  [assumption].
beef(B).  [assumption].
-beef(x) | meat(x).  [clausify(17)].
-lamb(x) | meat(x).  [clausify(18)].
-pork(x) | meat(x).  [clausify(19)].
-sausage(x) | meat(x).  [clausify(20)].
-stew_meat(x) | meat(x).  [clausify(21)].
-halal(x) | meat(x).  [clausify(22)].
-meat(x) | fooditem(x).  [clausify(23)].
-person(x) | people(x).  [clausify(24)].
-supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
person(John).  [assumption].
bought(John,T,Safeway,t).  [assumption].
weight(T,2).  [assumption].
weight(B,1).  [assumption].
bought(John,B,Safeway,t).  [assumption].
person(Mary).  [assumption].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
money(card).  [assumption].
money(cash).  [assumption].
isa(creditcard,card).  [assumption].
supermarket(Safeway).  [assumption].
supermarket(NBS).  [assumption].
isa(NBS,Safeway).  [assumption].
locatedAt(Safeway,NorthBerkeley).  [assumption].
time(t).  [assumption].
measure(Pound).  [assumption].
measure(Ounce).  [assumption].
measure(Kilogram).  [assumption].
-fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
-fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
-tomato(x) | piecesPerPound(x,5).  [clausify(30)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
-customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
-person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
-meat(x) | animalproduct(x).  [clausify(38)].
-fish(x) | animalproduct(x).  [clausify(39)].
-egg(x) | animalproduct(x).  [clausify(40)].
-animalproduct(x) | fooditem(x).  [clausify(41)].
-people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
-people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
-people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
-people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
-groundbeef(x) | beef(x).  [clausify(45)].
gas(G).  [assumption].
gas(x).  [clausify(46)].
sells(Shell,x).  [clausify(46)].
-adult(x) | -child(x).  [clausify(47)].
-child(x) | -adult(x).  [clausify(48)].
-shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
hasSize(carTrunk,600).  [assumption].
-milk(x) | dairyproduct(x).  [clausify(50)].
-cheese(x) | dairyproduct(x).  [clausify(51)].
-butter(x) | dairyproduct(x).  [clausify(52)].
-fish(x) | meat(x).  [clausify(53)].
-vegetable(x) | fooditem(x).  [clausify(54)].
-tomato(x) | vegetable(x).  [clausify(55)].
-cabbage(x) | vegetable(x).  [clausify(56)].
-broccoli(x) | vegetable(x).  [clausify(57)].
-potato(x) | vegetable(x).  [clausify(58)].
-onion(x) | vegetable(x).  [clausify(59)].
-juice(x) | beverage(x).  [clausify(60)].
-soda(x) | beverage(x).  [clausify(61)].
-alcohol(x) | beverage(x).  [clausify(62)].
-water(x) | beverage(x).  [clausify(63)].
-tea(x) | beverage(x).  [clausify(64)].
-coffee(x) | beverage(x).  [clausify(65)].
-fruit(x) | fooditem(x).  [clausify(66)].
-apple(x) | fruit(x).  [clausify(67)].
-mango(x) | fruit(x).  [clausify(68)].
-banana(x) | fruit(x).  [clausify(69)].
-strawberry(x) | fruit(x).  [clausify(70)].
-pineapple(x) | fruit(x).  [clausify(71)].
-lotion(x) | personalitem(x).  [clausify(72)].
-hairspray(x) | personalitem(x).  [clausify(73)].
-shavingcream(x) | personalitem(x).  [clausify(74)].
-cosmetic(x) | personalitem(x).  [clausify(75)].
-toothbrush(x) | personalitem(x).  [clausify(76)].
-bodywash(x) | personalitem(x).  [clausify(77)].
-soap(x) | personalitem(x).  [clausify(78)].
deodorant(c1).  [deny(79)].
-sells(Safeway,c1).  [deny(79)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating supermarket/1
80 supermarket(x).  [clausify(4)].
81 -supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
82 -supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
83 -supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
84 -supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
85 -supermarket(x) | shop(x).  [clausify(2)].
86 -supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
87 -supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
Derived: -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
Derived: -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
Derived: -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
Derived: -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
Derived: -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
88 supermarket(f3(x)).  [clausify(5)].
89 -supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
Derived: -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
90 -supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
Derived: -item(x) | -make(y,x).  [resolve(90,a,80,a)].
91 supermarket(Safeway).  [assumption].
Derived: shop(Safeway).  [resolve(91,a,85,a)].
92 supermarket(NBS).  [assumption].
Derived: shop(NBS).  [resolve(92,a,85,a)].

Eliminating customer/1
93 -customer(x) | get(x,receipt).  [clausify(6)].
94 customer(f2(x,y,z,u,w)).  [clausify(4)].
95 customer(x).  [clausify(5)].
Derived: get(f2(x,y,z,u,w),receipt).  [resolve(93,a,94,a)].
Derived: get(x,receipt).  [resolve(93,a,95,a)].
96 -time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
97 -customer(x) | adult(x).  [clausify(10)].
Derived: adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
Derived: adult(x).  [resolve(97,a,95,a)].
98 customer(x).  [clausify(13)].
99 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
100 -shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
101 -shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
102 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
103 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
104 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
105 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
106 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
107 -customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
Derived: -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
Derived: -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
108 -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].

Eliminating employee/1
109 -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
110 employee(x).  [clausify(4)].
111 -people(x) | -works(x) | employee(x).  [clausify(12)].
112 employee(x).  [clausify(13)].

Eliminating item/1
113 -shop(x) | -item(y) | sells(x,y).  [clausify(8)].
114 item(x).  [clausify(4)].
Derived: -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
115 -people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
Derived: -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
116 -fooditem(x) | item(x).  [clausify(14)].
117 -personalitem(x) | item(x).  [clausify(15)].
118 -person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
Derived: -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
119 -shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
Derived: -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
120 -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
Derived: deliver(x,y).  [resolve(120,a,114,a)].
121 -item(x) | -make(y,x).  [resolve(90,a,80,a)].
Derived: -make(x,y).  [resolve(121,a,114,a)].
122 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
123 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
124 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
125 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
126 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
127 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
128 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
129 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
130 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
131 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
132 -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: scan(f2(x,y,z,u,w),v5,v6).  [resolve(132,a,114,a)].
133 -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].
Derived: scan(x,y,z).  [resolve(133,a,114,a)].

Eliminating restock/3

Eliminating assist/2

Eliminating use/2

Eliminating shop/1
134 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
135 shop(x).  [clausify(13)].
136 shop(Safeway).  [resolve(91,a,85,a)].
137 shop(NBS).  [resolve(92,a,85,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
138 -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
Derived: -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
139 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | money(v6).  [resolve(139,a,135,a)].
140 -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
Derived: -bringsMoney(x,y) | money(z).  [resolve(140,a,135,a)].
141 -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
Derived: sells(x,y).  [resolve(141,a,135,a)].
142 -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
Derived: -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
143 -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
Derived: -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
144 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
145 -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
146 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
147 -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
148 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
149 -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
150 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
151 -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
152 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
153 -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].

Eliminating has/2

Eliminating deodorant/1
154 -deodorant(x) | personalitem(x).  [clausify(16)].
155 deodorant(D).  [assumption].
Derived: personalitem(D).  [resolve(154,a,155,a)].
156 deodorant(c1).  [deny(79)].
Derived: personalitem(c1).  [resolve(156,a,154,a)].

Eliminating tomato/1
157 -tomato(x) | piecesPerPound(x,5).  [clausify(30)].
158 tomato(T).  [assumption].
Derived: piecesPerPound(T,5).  [resolve(157,a,158,a)].
159 -tomato(x) | vegetable(x).  [clausify(55)].
Derived: vegetable(T).  [resolve(159,a,158,a)].

Eliminating beef/1
160 -beef(x) | meat(x).  [clausify(17)].
161 beef(B).  [assumption].
Derived: meat(B).  [resolve(160,a,161,a)].
162 -groundbeef(x) | beef(x).  [clausify(45)].
Derived: -groundbeef(x) | meat(x).  [resolve(162,b,160,a)].

Eliminating lamb/1

Eliminating pork/1

Eliminating sausage/1

Eliminating stew_meat/1

Eliminating halal/1

Eliminating meat/1
163 -fish(x) | meat(x).  [clausify(53)].
164 -meat(x) | fooditem(x).  [clausify(23)].
165 -meat(x) | animalproduct(x).  [clausify(38)].
Derived: -fish(x) | fooditem(x).  [resolve(163,b,164,a)].
Derived: -fish(x) | animalproduct(x).  [resolve(163,b,165,a)].
166 meat(B).  [resolve(160,a,161,a)].
Derived: fooditem(B).  [resolve(166,a,164,a)].
Derived: animalproduct(B).  [resolve(166,a,165,a)].
167 -groundbeef(x) | meat(x).  [resolve(162,b,160,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(167,b,164,a)].
Derived: -groundbeef(x) | animalproduct(x).  [resolve(167,b,165,a)].

Eliminating people/1
168 -people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
169 -person(x) | people(x).  [clausify(24)].
Derived: eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(168,a,169,b)].
170 -people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(170,a,169,b)].
171 -people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(171,a,169,b)].
172 -people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
Derived: -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(172,a,169,b)].
173 -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
Derived: -sellItems(x,y) | seller(x) | -person(x).  [resolve(173,a,169,b)].

Eliminating weight/2
174 -fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
175 weight(T,2).  [assumption].
176 weight(B,1).  [assumption].
Derived: -fooditem(B) | unit(B).  [resolve(174,b,176,a)].

Eliminating money/1

Eliminating isa/2

Eliminating locatedAt/2

Eliminating time/1
177 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
178 time(t).  [assumption].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(177,a,178,a)].
179 -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
Derived: -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(179,a,178,a)].
180 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(180,a,178,a)].
181 -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
Derived: -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(181,a,178,a)].
182 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(182,a,178,a)].
183 -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
Derived: -paid(x,y,z,t) | lessMoney(x).  [resolve(183,a,178,a)].
184 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(184,a,178,a)].
185 -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
Derived: -paid(x,y,z,t) | moreMoney(z).  [resolve(185,a,178,a)].
186 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(186,a,178,a)].
187 -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].
Derived: -bought(x,y,z,t) | owns(x,y).  [resolve(187,a,178,a)].

Eliminating measure/1
188 -fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
189 measure(Pound).  [assumption].
190 measure(Ounce).  [assumption].
191 measure(Kilogram).  [assumption].
Derived: -fooditem(x) | usedToWeight(Pound,x).  [resolve(188,b,189,a)].
Derived: -fooditem(x) | usedToWeight(Ounce,x).  [resolve(188,b,190,a)].
Derived: -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(188,b,191,a)].

Eliminating fish/1

Eliminating egg/1

Eliminating animalproduct/1
192 animalproduct(B).  [resolve(166,a,165,a)].
193 -animalproduct(x) | fooditem(x).  [clausify(41)].
Derived: fooditem(B).  [resolve(192,a,193,a)].
194 -groundbeef(x) | animalproduct(x).  [resolve(167,b,165,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(194,b,193,a)].
195 eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(168,a,169,b)].
Derived: eats(x,B) | vegetarian(x) | -person(x).  [resolve(195,b,192,a)].
Derived: eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(195,b,194,b)].
196 eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(170,a,169,b)].
Derived: eats(x,B) | vegan(x) | -person(x).  [resolve(196,b,192,a)].
Derived: eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(196,b,194,b)].
197 -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(172,a,169,b)].
Derived: -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(197,b,192,a)].
Derived: -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(197,b,194,b)].

Eliminating gas/1

Eliminating sells/2
198 -sells(Safeway,c1).  [deny(79)].
199 sells(Shell,x).  [clausify(46)].
200 -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
Derived: -personalitem(c1).  [resolve(200,b,198,a)].
201 -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
Derived: -fooditem(c1).  [resolve(201,b,198,a)].
202 -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
Derived: -dairyproducts(c1).  [resolve(202,b,198,a)].
203 -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
Derived: -beverages(c1).  [resolve(203,b,198,a)].
204 sells(x,y).  [resolve(141,a,135,a)].
Derived: $F.  [resolve(204,a,198,a)].
205 -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].

Eliminating adult/1
206 adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
207 -adult(x) | -child(x).  [clausify(47)].
208 -child(x) | -adult(x).  [clausify(48)].
209 adult(x).  [resolve(97,a,95,a)].

Eliminating hasSize/2

Eliminating milk/1

Eliminating cheese/1

Eliminating butter/1

Eliminating vegetable/1
210 -cabbage(x) | vegetable(x).  [clausify(56)].
211 -vegetable(x) | fooditem(x).  [clausify(54)].
212 -broccoli(x) | vegetable(x).  [clausify(57)].
213 -potato(x) | vegetable(x).  [clausify(58)].
214 -onion(x) | vegetable(x).  [clausify(59)].
215 vegetable(T).  [resolve(159,a,158,a)].

Eliminating juice/1

Eliminating soda/1

Eliminating alcohol/1

Eliminating water/1

Eliminating tea/1

Eliminating coffee/1

Eliminating fruit/1
216 -apple(x) | fruit(x).  [clausify(67)].
217 -fruit(x) | fooditem(x).  [clausify(66)].
218 -mango(x) | fruit(x).  [clausify(68)].
219 -banana(x) | fruit(x).  [clausify(69)].
220 -strawberry(x) | fruit(x).  [clausify(70)].
221 -pineapple(x) | fruit(x).  [clausify(71)].

Eliminating lotion/1

Eliminating hairspray/1

Eliminating shavingcream/1

Eliminating cosmetic/1

Eliminating toothbrush/1

Eliminating bodywash/1

Eliminating soap/1

Eliminating get/2

Eliminating fooditem/1
222 fooditem(B).  [resolve(166,a,164,a)].
223 -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
224 -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
225 -groundbeef(x) | fooditem(x).  [resolve(167,b,164,a)].
226 -fooditem(B) | unit(B).  [resolve(174,b,176,a)].
227 -fooditem(x) | usedToWeight(Pound,x).  [resolve(188,b,189,a)].
228 -fooditem(x) | usedToWeight(Ounce,x).  [resolve(188,b,190,a)].
229 -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(188,b,191,a)].
230 fooditem(B).  [resolve(192,a,193,a)].
231 -groundbeef(x) | fooditem(x).  [resolve(194,b,193,a)].
232 -fooditem(c1).  [resolve(201,b,198,a)].

Eliminating deliver/2

Eliminating make/2

Eliminating scan/3

Eliminating bringsMoney/2
233 -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(177,a,178,a)].
234 -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
235 -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
236 -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(179,a,178,a)].

Eliminating personalitem/1
237 -personalitem(c1).  [resolve(200,b,198,a)].
238 personalitem(D).  [resolve(154,a,155,a)].
239 personalitem(c1).  [resolve(156,a,154,a)].

Eliminating piecesPerPound/2

Eliminating eats/2
240 -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(197,b,192,a)].
241 eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(171,a,169,b)].
242 eats(x,B) | vegetarian(x) | -person(x).  [resolve(195,b,192,a)].
243 eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(195,b,194,b)].
244 eats(x,B) | vegan(x) | -person(x).  [resolve(196,b,192,a)].
245 eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(196,b,194,b)].
246 -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(197,b,194,b)].

Eliminating sellItems/2

Eliminating paid/4
247 -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(182,a,178,a)].
248 -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(180,a,178,a)].
249 -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(181,a,178,a)].
250 -paid(x,y,z,t) | lessMoney(x).  [resolve(183,a,178,a)].
251 -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(184,a,178,a)].
252 -paid(x,y,z,t) | moreMoney(z).  [resolve(185,a,178,a)].

Eliminating owns/2

Eliminating dairyproducts/1

Eliminating beverages/1

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ person, see, bought ]).
Function symbol precedence:  function_order([ t, John, Safeway, B, Mary, T ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      253 person(John).  [assumption].
kept:      254 bought(John,T,Safeway,t).  [assumption].
kept:      255 bought(John,B,Safeway,t).  [assumption].
kept:      256 person(Mary).  [assumption].
kept:      257 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].

============================== PROOF =================================

% Proof 1 at 0.02 (+ 0.01) seconds.
% Length of proof is 11.
% Level of proof is 4.
% Maximum clause weight is 0.000.
% Given clauses 0.

4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
8 (all x ((exists y shop(x)) & item(y) -> sells(x,y))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
79 (all x (deodorant(x) -> sells(Safeway,x))) # label(non_clause) # label(goal).  [goal].
113 -shop(x) | -item(y) | sells(x,y).  [clausify(8)].
114 item(x).  [clausify(4)].
135 shop(x).  [clausify(13)].
141 -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
198 -sells(Safeway,c1).  [deny(79)].
204 sells(x,y).  [resolve(141,a,135,a)].
258 $F.  [resolve(204,a,198,a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=6. Kept=5. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=5, Disabled=230. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=0. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=0. Nonunit_bsub_feature_tests=0.
Megabytes=0.33.
User_CPU=0.02, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 9704 exit (max_proofs) Sun Apr 26 00:48:09 2020


















h.	Did John bring some money or a credit card to the supermarket? 
Any of the following questions can be asked.
â€¢	bringsMoney(John, Safeway).
â€¢	brings(John, card, Safeway).
â€¢	brings(John, cash, Safeway).


============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 9705 was started by rinkleseth on Rinkles-MacBook-Pro.local,
Sun Apr 26 00:48:29 2020
The command was "/Users/rinkleseth/Downloads/LADR-2009-11A/bin/prover9 -f /Users/rinkleseth/Desktop/spring2020/AI/project/input.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /Users/rinkleseth/Desktop/spring2020/AI/project/input.in


formulas(sos).
(all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))).
(all x (supermarket(x) -> shop(x))).
(all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))).
(all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))).
(all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))).
(all x (customer(x) -> get(x,receipt))).
(all x ((all y supermarket(x)) & item(y) -> deliver(x,y))).
(all x ((exists y shop(x)) & item(y) -> sells(x,y))).
(all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))).
(all x (customer(x) -> adult(x))).
(all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))).
(all x (people(x) & works(x) -> employee(x))).
(all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))).
(all x (fooditem(x) -> item(x))).
(all x (personalitem(x) -> item(x))).
deodorant(D).
(all x (deodorant(x) -> personalitem(x))).
tomato(T).
beef(B).
(all x (beef(x) -> meat(x))).
(all x (lamb(x) -> meat(x))).
(all x (pork(x) -> meat(x))).
(all x (sausage(x) -> meat(x))).
(all x (stew_meat(x) -> meat(x))).
(all x (halal(x) -> meat(x))).
(all x (meat(x) -> fooditem(x))).
(all x (person(x) -> people(x))).
(all x ((all y supermarket(x)) & item(y) -> -make(x,y))).
person(John).
bought(John,T,Safeway,t).
weight(T,2).
weight(B,1).
bought(John,B,Safeway,t).
person(Mary).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))).
money(card).
money(cash).
isa(creditcard,card).
supermarket(Safeway).
supermarket(NBS).
isa(NBS,Safeway).
locatedAt(Safeway,NorthBerkeley).
time(t).
measure(Pound).
measure(Ounce).
measure(Kilogram).
(all x (fooditem(x) & weight(x,1) -> unit(x))).
(all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))).
(all x (tomato(x) -> piecesPerPound(x,5))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))).
(all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))).
(all x (meat(x) -> animalproduct(x))).
(all x (fish(x) -> animalproduct(x))).
(all x (egg(x) -> animalproduct(x))).
(all x (animalproduct(x) -> fooditem(x))).
(all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))).
(all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))).
(all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))).
(all x (groundbeef(x) -> beef(x))).
gas(G).
(all x (gas(x) & sells(Shell,x))).
(all x (adult(x) -> -child(x))).
(all x (child(x) -> -adult(x))).
(all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))).
hasSize(carTrunk,600).
(all x (milk(x) -> dairyproduct(x))).
(all x (cheese(x) -> dairyproduct(x))).
(all x (butter(x) -> dairyproduct(x))).
(all x (fish(x) -> meat(x))).
(all x (vegetable(x) -> fooditem(x))).
(all x (tomato(x) -> vegetable(x))).
(all x (cabbage(x) -> vegetable(x))).
(all x (broccoli(x) -> vegetable(x))).
(all x (potato(x) -> vegetable(x))).
(all x (onion(x) -> vegetable(x))).
(all x (juice(x) -> beverage(x))).
(all x (soda(x) -> beverage(x))).
(all x (alcohol(x) -> beverage(x))).
(all x (water(x) -> beverage(x))).
(all x (tea(x) -> beverage(x))).
(all x (coffee(x) -> beverage(x))).
(all x (fruit(x) -> fooditem(x))).
(all x (apple(x) -> fruit(x))).
(all x (mango(x) -> fruit(x))).
(all x (banana(x) -> fruit(x))).
(all x (strawberry(x) -> fruit(x))).
(all x (pineapple(x) -> fruit(x))).
(all x (lotion(x) -> personalitem(x))).
(all x (hairspray(x) -> personalitem(x))).
(all x (shavingcream(x) -> personalitem(x))).
(all x (cosmetic(x) -> personalitem(x))).
(all x (toothbrush(x) -> personalitem(x))).
(all x (bodywash(x) -> personalitem(x))).
(all x (soap(x) -> personalitem(x))).
end_of_list.

formulas(goals).
bringsMoney(John,Safeway) | brings(John,card,Safeway) | brings(John,cash,Safeway).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))) # label(non_clause).  [assumption].
2 (all x (supermarket(x) -> shop(x))) # label(non_clause).  [assumption].
3 (all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))) # label(non_clause).  [assumption].
4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
6 (all x (customer(x) -> get(x,receipt))) # label(non_clause).  [assumption].
7 (all x ((all y supermarket(x)) & item(y) -> deliver(x,y))) # label(non_clause).  [assumption].
8 (all x ((exists y shop(x)) & item(y) -> sells(x,y))) # label(non_clause).  [assumption].
9 (all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))) # label(non_clause).  [assumption].
10 (all x (customer(x) -> adult(x))) # label(non_clause).  [assumption].
11 (all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))) # label(non_clause).  [assumption].
12 (all x (people(x) & works(x) -> employee(x))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
14 (all x (fooditem(x) -> item(x))) # label(non_clause).  [assumption].
15 (all x (personalitem(x) -> item(x))) # label(non_clause).  [assumption].
16 (all x (deodorant(x) -> personalitem(x))) # label(non_clause).  [assumption].
17 (all x (beef(x) -> meat(x))) # label(non_clause).  [assumption].
18 (all x (lamb(x) -> meat(x))) # label(non_clause).  [assumption].
19 (all x (pork(x) -> meat(x))) # label(non_clause).  [assumption].
20 (all x (sausage(x) -> meat(x))) # label(non_clause).  [assumption].
21 (all x (stew_meat(x) -> meat(x))) # label(non_clause).  [assumption].
22 (all x (halal(x) -> meat(x))) # label(non_clause).  [assumption].
23 (all x (meat(x) -> fooditem(x))) # label(non_clause).  [assumption].
24 (all x (person(x) -> people(x))) # label(non_clause).  [assumption].
25 (all x ((all y supermarket(x)) & item(y) -> -make(x,y))) # label(non_clause).  [assumption].
26 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
27 (all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))) # label(non_clause).  [assumption].
28 (all x (fooditem(x) & weight(x,1) -> unit(x))) # label(non_clause).  [assumption].
29 (all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))) # label(non_clause).  [assumption].
30 (all x (tomato(x) -> piecesPerPound(x,5))) # label(non_clause).  [assumption].
31 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))) # label(non_clause).  [assumption].
32 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))) # label(non_clause).  [assumption].
33 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))) # label(non_clause).  [assumption].
34 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))) # label(non_clause).  [assumption].
35 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
36 (all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))) # label(non_clause).  [assumption].
37 (all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))) # label(non_clause).  [assumption].
38 (all x (meat(x) -> animalproduct(x))) # label(non_clause).  [assumption].
39 (all x (fish(x) -> animalproduct(x))) # label(non_clause).  [assumption].
40 (all x (egg(x) -> animalproduct(x))) # label(non_clause).  [assumption].
41 (all x (animalproduct(x) -> fooditem(x))) # label(non_clause).  [assumption].
42 (all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))) # label(non_clause).  [assumption].
43 (all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))) # label(non_clause).  [assumption].
44 (all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))) # label(non_clause).  [assumption].
45 (all x (groundbeef(x) -> beef(x))) # label(non_clause).  [assumption].
46 (all x (gas(x) & sells(Shell,x))) # label(non_clause).  [assumption].
47 (all x (adult(x) -> -child(x))) # label(non_clause).  [assumption].
48 (all x (child(x) -> -adult(x))) # label(non_clause).  [assumption].
49 (all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))) # label(non_clause).  [assumption].
50 (all x (milk(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
51 (all x (cheese(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
52 (all x (butter(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
53 (all x (fish(x) -> meat(x))) # label(non_clause).  [assumption].
54 (all x (vegetable(x) -> fooditem(x))) # label(non_clause).  [assumption].
55 (all x (tomato(x) -> vegetable(x))) # label(non_clause).  [assumption].
56 (all x (cabbage(x) -> vegetable(x))) # label(non_clause).  [assumption].
57 (all x (broccoli(x) -> vegetable(x))) # label(non_clause).  [assumption].
58 (all x (potato(x) -> vegetable(x))) # label(non_clause).  [assumption].
59 (all x (onion(x) -> vegetable(x))) # label(non_clause).  [assumption].
60 (all x (juice(x) -> beverage(x))) # label(non_clause).  [assumption].
61 (all x (soda(x) -> beverage(x))) # label(non_clause).  [assumption].
62 (all x (alcohol(x) -> beverage(x))) # label(non_clause).  [assumption].
63 (all x (water(x) -> beverage(x))) # label(non_clause).  [assumption].
64 (all x (tea(x) -> beverage(x))) # label(non_clause).  [assumption].
65 (all x (coffee(x) -> beverage(x))) # label(non_clause).  [assumption].
66 (all x (fruit(x) -> fooditem(x))) # label(non_clause).  [assumption].
67 (all x (apple(x) -> fruit(x))) # label(non_clause).  [assumption].
68 (all x (mango(x) -> fruit(x))) # label(non_clause).  [assumption].
69 (all x (banana(x) -> fruit(x))) # label(non_clause).  [assumption].
70 (all x (strawberry(x) -> fruit(x))) # label(non_clause).  [assumption].
71 (all x (pineapple(x) -> fruit(x))) # label(non_clause).  [assumption].
72 (all x (lotion(x) -> personalitem(x))) # label(non_clause).  [assumption].
73 (all x (hairspray(x) -> personalitem(x))) # label(non_clause).  [assumption].
74 (all x (shavingcream(x) -> personalitem(x))) # label(non_clause).  [assumption].
75 (all x (cosmetic(x) -> personalitem(x))) # label(non_clause).  [assumption].
76 (all x (toothbrush(x) -> personalitem(x))) # label(non_clause).  [assumption].
77 (all x (bodywash(x) -> personalitem(x))) # label(non_clause).  [assumption].
78 (all x (soap(x) -> personalitem(x))) # label(non_clause).  [assumption].
79 bringsMoney(John,Safeway) | brings(John,card,Safeway) | brings(John,cash,Safeway) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | shop(x).  [clausify(2)].
-supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
-supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
customer(f2(x,y,z,u,w)).  [clausify(4)].
supermarket(x).  [clausify(4)].
employee(x).  [clausify(4)].
item(x).  [clausify(4)].
restock(x,y,z).  [clausify(4)].
assist(x,y).  [clausify(4)].
supermarket(f3(x)).  [clausify(5)].
customer(x).  [clausify(5)].
use(x,Cart).  [clausify(5)].
-customer(x) | get(x,receipt).  [clausify(6)].
-supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
-shop(x) | -item(y) | sells(x,y).  [clausify(8)].
-time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
-customer(x) | adult(x).  [clausify(10)].
-people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
-people(x) | -works(x) | employee(x).  [clausify(12)].
shop(x).  [clausify(13)].
has(x,y).  [clausify(13)].
employee(x).  [clausify(13)].
customer(x).  [clausify(13)].
-fooditem(x) | item(x).  [clausify(14)].
-personalitem(x) | item(x).  [clausify(15)].
deodorant(D).  [assumption].
-deodorant(x) | personalitem(x).  [clausify(16)].
tomato(T).  [assumption].
beef(B).  [assumption].
-beef(x) | meat(x).  [clausify(17)].
-lamb(x) | meat(x).  [clausify(18)].
-pork(x) | meat(x).  [clausify(19)].
-sausage(x) | meat(x).  [clausify(20)].
-stew_meat(x) | meat(x).  [clausify(21)].
-halal(x) | meat(x).  [clausify(22)].
-meat(x) | fooditem(x).  [clausify(23)].
-person(x) | people(x).  [clausify(24)].
-supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
person(John).  [assumption].
bought(John,T,Safeway,t).  [assumption].
weight(T,2).  [assumption].
weight(B,1).  [assumption].
bought(John,B,Safeway,t).  [assumption].
person(Mary).  [assumption].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
money(card).  [assumption].
money(cash).  [assumption].
isa(creditcard,card).  [assumption].
supermarket(Safeway).  [assumption].
supermarket(NBS).  [assumption].
isa(NBS,Safeway).  [assumption].
locatedAt(Safeway,NorthBerkeley).  [assumption].
time(t).  [assumption].
measure(Pound).  [assumption].
measure(Ounce).  [assumption].
measure(Kilogram).  [assumption].
-fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
-fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
-tomato(x) | piecesPerPound(x,5).  [clausify(30)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
-customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
-person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
-meat(x) | animalproduct(x).  [clausify(38)].
-fish(x) | animalproduct(x).  [clausify(39)].
-egg(x) | animalproduct(x).  [clausify(40)].
-animalproduct(x) | fooditem(x).  [clausify(41)].
-people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
-people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
-people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
-people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
-groundbeef(x) | beef(x).  [clausify(45)].
gas(G).  [assumption].
gas(x).  [clausify(46)].
sells(Shell,x).  [clausify(46)].
-adult(x) | -child(x).  [clausify(47)].
-child(x) | -adult(x).  [clausify(48)].
-shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
hasSize(carTrunk,600).  [assumption].
-milk(x) | dairyproduct(x).  [clausify(50)].
-cheese(x) | dairyproduct(x).  [clausify(51)].
-butter(x) | dairyproduct(x).  [clausify(52)].
-fish(x) | meat(x).  [clausify(53)].
-vegetable(x) | fooditem(x).  [clausify(54)].
-tomato(x) | vegetable(x).  [clausify(55)].
-cabbage(x) | vegetable(x).  [clausify(56)].
-broccoli(x) | vegetable(x).  [clausify(57)].
-potato(x) | vegetable(x).  [clausify(58)].
-onion(x) | vegetable(x).  [clausify(59)].
-juice(x) | beverage(x).  [clausify(60)].
-soda(x) | beverage(x).  [clausify(61)].
-alcohol(x) | beverage(x).  [clausify(62)].
-water(x) | beverage(x).  [clausify(63)].
-tea(x) | beverage(x).  [clausify(64)].
-coffee(x) | beverage(x).  [clausify(65)].
-fruit(x) | fooditem(x).  [clausify(66)].
-apple(x) | fruit(x).  [clausify(67)].
-mango(x) | fruit(x).  [clausify(68)].
-banana(x) | fruit(x).  [clausify(69)].
-strawberry(x) | fruit(x).  [clausify(70)].
-pineapple(x) | fruit(x).  [clausify(71)].
-lotion(x) | personalitem(x).  [clausify(72)].
-hairspray(x) | personalitem(x).  [clausify(73)].
-shavingcream(x) | personalitem(x).  [clausify(74)].
-cosmetic(x) | personalitem(x).  [clausify(75)].
-toothbrush(x) | personalitem(x).  [clausify(76)].
-bodywash(x) | personalitem(x).  [clausify(77)].
-soap(x) | personalitem(x).  [clausify(78)].
-bringsMoney(John,Safeway).  [deny(79)].
-brings(John,card,Safeway).  [deny(79)].
-brings(John,cash,Safeway).  [deny(79)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating supermarket/1
80 supermarket(x).  [clausify(4)].
81 -supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
82 -supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
83 -supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
84 -supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
85 -supermarket(x) | shop(x).  [clausify(2)].
86 -supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
87 -supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
Derived: -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
Derived: -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
Derived: -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
Derived: -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
Derived: -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
88 supermarket(f3(x)).  [clausify(5)].
89 -supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
Derived: -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
90 -supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
Derived: -item(x) | -make(y,x).  [resolve(90,a,80,a)].
91 supermarket(Safeway).  [assumption].
Derived: shop(Safeway).  [resolve(91,a,85,a)].
92 supermarket(NBS).  [assumption].
Derived: shop(NBS).  [resolve(92,a,85,a)].

Eliminating customer/1
93 -customer(x) | get(x,receipt).  [clausify(6)].
94 customer(f2(x,y,z,u,w)).  [clausify(4)].
95 customer(x).  [clausify(5)].
Derived: get(f2(x,y,z,u,w),receipt).  [resolve(93,a,94,a)].
Derived: get(x,receipt).  [resolve(93,a,95,a)].
96 -time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
97 -customer(x) | adult(x).  [clausify(10)].
Derived: adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
Derived: adult(x).  [resolve(97,a,95,a)].
98 customer(x).  [clausify(13)].
99 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
100 -shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
101 -shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
102 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
103 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
104 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
105 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
106 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
107 -customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
Derived: -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
Derived: -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
108 -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].

Eliminating employee/1
109 -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
110 employee(x).  [clausify(4)].
111 -people(x) | -works(x) | employee(x).  [clausify(12)].
112 employee(x).  [clausify(13)].

Eliminating item/1
113 -shop(x) | -item(y) | sells(x,y).  [clausify(8)].
114 item(x).  [clausify(4)].
Derived: -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
115 -people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
Derived: -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
116 -fooditem(x) | item(x).  [clausify(14)].
117 -personalitem(x) | item(x).  [clausify(15)].
118 -person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
Derived: -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
119 -shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
Derived: -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
120 -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
Derived: deliver(x,y).  [resolve(120,a,114,a)].
121 -item(x) | -make(y,x).  [resolve(90,a,80,a)].
Derived: -make(x,y).  [resolve(121,a,114,a)].
122 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
123 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
124 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
125 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
126 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
127 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
128 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
129 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
130 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
131 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
132 -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: scan(f2(x,y,z,u,w),v5,v6).  [resolve(132,a,114,a)].
133 -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].
Derived: scan(x,y,z).  [resolve(133,a,114,a)].

Eliminating restock/3

Eliminating assist/2

Eliminating use/2

Eliminating shop/1
134 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
135 shop(x).  [clausify(13)].
136 shop(Safeway).  [resolve(91,a,85,a)].
137 shop(NBS).  [resolve(92,a,85,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
138 -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
Derived: -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
139 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | money(v6).  [resolve(139,a,135,a)].
140 -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
Derived: -bringsMoney(x,y) | money(z).  [resolve(140,a,135,a)].
141 -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
Derived: sells(x,y).  [resolve(141,a,135,a)].
142 -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
Derived: -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
143 -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
Derived: -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
144 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
145 -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
146 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
147 -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
148 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
149 -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
150 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
151 -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
152 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
153 -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].

Eliminating has/2

Eliminating deodorant/1
154 -deodorant(x) | personalitem(x).  [clausify(16)].
155 deodorant(D).  [assumption].
Derived: personalitem(D).  [resolve(154,a,155,a)].

Eliminating tomato/1
156 -tomato(x) | piecesPerPound(x,5).  [clausify(30)].
157 tomato(T).  [assumption].
Derived: piecesPerPound(T,5).  [resolve(156,a,157,a)].
158 -tomato(x) | vegetable(x).  [clausify(55)].
Derived: vegetable(T).  [resolve(158,a,157,a)].

Eliminating beef/1
159 -beef(x) | meat(x).  [clausify(17)].
160 beef(B).  [assumption].
Derived: meat(B).  [resolve(159,a,160,a)].
161 -groundbeef(x) | beef(x).  [clausify(45)].
Derived: -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].

Eliminating lamb/1

Eliminating pork/1

Eliminating sausage/1

Eliminating stew_meat/1

Eliminating halal/1

Eliminating meat/1
162 -fish(x) | meat(x).  [clausify(53)].
163 -meat(x) | fooditem(x).  [clausify(23)].
164 -meat(x) | animalproduct(x).  [clausify(38)].
Derived: -fish(x) | fooditem(x).  [resolve(162,b,163,a)].
Derived: -fish(x) | animalproduct(x).  [resolve(162,b,164,a)].
165 meat(B).  [resolve(159,a,160,a)].
Derived: fooditem(B).  [resolve(165,a,163,a)].
Derived: animalproduct(B).  [resolve(165,a,164,a)].
166 -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(166,b,163,a)].
Derived: -groundbeef(x) | animalproduct(x).  [resolve(166,b,164,a)].

Eliminating people/1
167 -people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
168 -person(x) | people(x).  [clausify(24)].
Derived: eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(167,a,168,b)].
169 -people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(169,a,168,b)].
170 -people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(170,a,168,b)].
171 -people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
Derived: -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(171,a,168,b)].
172 -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
Derived: -sellItems(x,y) | seller(x) | -person(x).  [resolve(172,a,168,b)].

Eliminating weight/2
173 -fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
174 weight(T,2).  [assumption].
175 weight(B,1).  [assumption].
Derived: -fooditem(B) | unit(B).  [resolve(173,b,175,a)].

Eliminating money/1

Eliminating isa/2

Eliminating locatedAt/2

Eliminating time/1
176 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
177 time(t).  [assumption].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(176,a,177,a)].
178 -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
Derived: -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].
179 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(179,a,177,a)].
180 -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
Derived: -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
181 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(181,a,177,a)].
182 -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
Derived: -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
183 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(183,a,177,a)].
184 -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
Derived: -paid(x,y,z,t) | moreMoney(z).  [resolve(184,a,177,a)].
185 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(185,a,177,a)].
186 -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].
Derived: -bought(x,y,z,t) | owns(x,y).  [resolve(186,a,177,a)].

Eliminating measure/1
187 -fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
188 measure(Pound).  [assumption].
189 measure(Ounce).  [assumption].
190 measure(Kilogram).  [assumption].
Derived: -fooditem(x) | usedToWeight(Pound,x).  [resolve(187,b,188,a)].
Derived: -fooditem(x) | usedToWeight(Ounce,x).  [resolve(187,b,189,a)].
Derived: -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(187,b,190,a)].

Eliminating fish/1

Eliminating egg/1

Eliminating animalproduct/1
191 animalproduct(B).  [resolve(165,a,164,a)].
192 -animalproduct(x) | fooditem(x).  [clausify(41)].
Derived: fooditem(B).  [resolve(191,a,192,a)].
193 -groundbeef(x) | animalproduct(x).  [resolve(166,b,164,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(193,b,192,a)].
194 eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(167,a,168,b)].
Derived: eats(x,B) | vegetarian(x) | -person(x).  [resolve(194,b,191,a)].
Derived: eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(194,b,193,b)].
195 eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(169,a,168,b)].
Derived: eats(x,B) | vegan(x) | -person(x).  [resolve(195,b,191,a)].
Derived: eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(195,b,193,b)].
196 -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(171,a,168,b)].
Derived: -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(196,b,191,a)].
Derived: -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(196,b,193,b)].

Eliminating gas/1

Eliminating sells/2
197 -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
198 sells(Shell,x).  [clausify(46)].
199 -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
200 -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
201 -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
202 -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
203 sells(x,y).  [resolve(141,a,135,a)].
Derived: owns(Shell,x).  [resolve(197,a,198,a)].
Derived: owns(x,y) | -personalitem(y).  [resolve(197,a,199,b)].
Derived: owns(x,y) | -fooditem(y).  [resolve(197,a,200,b)].
Derived: owns(x,y) | -dairyproducts(y).  [resolve(197,a,201,b)].
Derived: owns(x,y) | -beverages(y).  [resolve(197,a,202,b)].
Derived: owns(x,y).  [resolve(197,a,203,a)].

Eliminating adult/1
204 adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
205 -adult(x) | -child(x).  [clausify(47)].
206 -child(x) | -adult(x).  [clausify(48)].
Derived: -child(f2(x,y,z,u,w)).  [resolve(204,a,205,a)].
207 adult(x).  [resolve(97,a,95,a)].
Derived: -child(x).  [resolve(207,a,205,a)].

Eliminating hasSize/2

Eliminating milk/1

Eliminating cheese/1

Eliminating butter/1

Eliminating vegetable/1
208 -cabbage(x) | vegetable(x).  [clausify(56)].
209 -vegetable(x) | fooditem(x).  [clausify(54)].
Derived: -cabbage(x) | fooditem(x).  [resolve(208,b,209,a)].
210 -broccoli(x) | vegetable(x).  [clausify(57)].
Derived: -broccoli(x) | fooditem(x).  [resolve(210,b,209,a)].
211 -potato(x) | vegetable(x).  [clausify(58)].
Derived: -potato(x) | fooditem(x).  [resolve(211,b,209,a)].
212 -onion(x) | vegetable(x).  [clausify(59)].
Derived: -onion(x) | fooditem(x).  [resolve(212,b,209,a)].
213 vegetable(T).  [resolve(158,a,157,a)].
Derived: fooditem(T).  [resolve(213,a,209,a)].

Eliminating juice/1

Eliminating soda/1

Eliminating alcohol/1

Eliminating water/1

Eliminating tea/1

Eliminating coffee/1

Eliminating fruit/1
214 -apple(x) | fruit(x).  [clausify(67)].
215 -fruit(x) | fooditem(x).  [clausify(66)].
Derived: -apple(x) | fooditem(x).  [resolve(214,b,215,a)].
216 -mango(x) | fruit(x).  [clausify(68)].
Derived: -mango(x) | fooditem(x).  [resolve(216,b,215,a)].
217 -banana(x) | fruit(x).  [clausify(69)].
Derived: -banana(x) | fooditem(x).  [resolve(217,b,215,a)].
218 -strawberry(x) | fruit(x).  [clausify(70)].
Derived: -strawberry(x) | fooditem(x).  [resolve(218,b,215,a)].
219 -pineapple(x) | fruit(x).  [clausify(71)].
Derived: -pineapple(x) | fooditem(x).  [resolve(219,b,215,a)].

Eliminating lotion/1

Eliminating hairspray/1

Eliminating shavingcream/1

Eliminating cosmetic/1

Eliminating toothbrush/1

Eliminating bodywash/1

Eliminating soap/1

Eliminating bringsMoney/2
220 -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(176,a,177,a)].
221 -bringsMoney(John,Safeway).  [deny(79)].
222 -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
223 -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | brings(f2(x,y,z,u,w),v7,v6).  [resolve(220,b,222,a)].
224 -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].
Derived: -bought(John,x,Safeway,t).  [resolve(224,b,221,a)].
Derived: -bought(x,y,z,t) | brings(x,u,z).  [resolve(224,b,223,a)].

Eliminating brings/3
225 -bought(f2(x,y,z,u,w),v5,v6,t) | brings(f2(x,y,z,u,w),v7,v6).  [resolve(220,b,222,a)].
226 -brings(John,card,Safeway).  [deny(79)].
227 -brings(John,cash,Safeway).  [deny(79)].
228 -bought(x,y,z,t) | brings(x,u,z).  [resolve(224,b,223,a)].
Derived: -bought(John,x,Safeway,t).  [resolve(228,b,226,a)].

Eliminating get/2

Eliminating fooditem/1
229 fooditem(B).  [resolve(165,a,163,a)].
230 -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
231 -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
Derived: -owns(f2(x,y,z,u,w),B) | eats(f2(x,y,z,u,w),B).  [resolve(229,a,230,a)].
Derived: -owns(x,B) | eats(x,B).  [resolve(229,a,231,a)].
232 -groundbeef(x) | fooditem(x).  [resolve(166,b,163,a)].
Derived: -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(232,b,230,a)].
Derived: -groundbeef(x) | -owns(y,x) | eats(y,x).  [resolve(232,b,231,a)].
233 -fooditem(B) | unit(B).  [resolve(173,b,175,a)].
Derived: unit(B).  [resolve(233,a,229,a)].
234 -fooditem(x) | usedToWeight(Pound,x).  [resolve(187,b,188,a)].
Derived: usedToWeight(Pound,B).  [resolve(234,a,229,a)].
Derived: usedToWeight(Pound,x) | -groundbeef(x).  [resolve(234,a,232,b)].
235 -fooditem(x) | usedToWeight(Ounce,x).  [resolve(187,b,189,a)].
Derived: usedToWeight(Ounce,B).  [resolve(235,a,229,a)].
Derived: usedToWeight(Ounce,x) | -groundbeef(x).  [resolve(235,a,232,b)].
236 -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(187,b,190,a)].
Derived: usedToWeight(Kilogram,B).  [resolve(236,a,229,a)].
Derived: usedToWeight(Kilogram,x) | -groundbeef(x).  [resolve(236,a,232,b)].
237 fooditem(B).  [resolve(191,a,192,a)].
238 -groundbeef(x) | fooditem(x).  [resolve(193,b,192,a)].
239 owns(x,y) | -fooditem(y).  [resolve(197,a,200,b)].
240 -cabbage(x) | fooditem(x).  [resolve(208,b,209,a)].
Derived: -cabbage(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(240,b,230,a)].
Derived: -cabbage(x) | -owns(y,x) | eats(y,x).  [resolve(240,b,231,a)].
Derived: -cabbage(x) | usedToWeight(Pound,x).  [resolve(240,b,234,a)].
Derived: -cabbage(x) | usedToWeight(Ounce,x).  [resolve(240,b,235,a)].
Derived: -cabbage(x) | usedToWeight(Kilogram,x).  [resolve(240,b,236,a)].
Derived: -cabbage(x) | owns(y,x).  [resolve(240,b,239,b)].
241 -broccoli(x) | fooditem(x).  [resolve(210,b,209,a)].
Derived: -broccoli(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(241,b,230,a)].
Derived: -broccoli(x) | -owns(y,x) | eats(y,x).  [resolve(241,b,231,a)].
Derived: -broccoli(x) | usedToWeight(Pound,x).  [resolve(241,b,234,a)].
Derived: -broccoli(x) | usedToWeight(Ounce,x).  [resolve(241,b,235,a)].
Derived: -broccoli(x) | usedToWeight(Kilogram,x).  [resolve(241,b,236,a)].
Derived: -broccoli(x) | owns(y,x).  [resolve(241,b,239,b)].
242 -potato(x) | fooditem(x).  [resolve(211,b,209,a)].
Derived: -potato(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(242,b,230,a)].
Derived: -potato(x) | -owns(y,x) | eats(y,x).  [resolve(242,b,231,a)].
Derived: -potato(x) | usedToWeight(Pound,x).  [resolve(242,b,234,a)].
Derived: -potato(x) | usedToWeight(Ounce,x).  [resolve(242,b,235,a)].
Derived: -potato(x) | usedToWeight(Kilogram,x).  [resolve(242,b,236,a)].
Derived: -potato(x) | owns(y,x).  [resolve(242,b,239,b)].
243 -onion(x) | fooditem(x).  [resolve(212,b,209,a)].
Derived: -onion(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(243,b,230,a)].
Derived: -onion(x) | -owns(y,x) | eats(y,x).  [resolve(243,b,231,a)].
Derived: -onion(x) | usedToWeight(Pound,x).  [resolve(243,b,234,a)].
Derived: -onion(x) | usedToWeight(Ounce,x).  [resolve(243,b,235,a)].
Derived: -onion(x) | usedToWeight(Kilogram,x).  [resolve(243,b,236,a)].
Derived: -onion(x) | owns(y,x).  [resolve(243,b,239,b)].
244 fooditem(T).  [resolve(213,a,209,a)].
Derived: -owns(f2(x,y,z,u,w),T) | eats(f2(x,y,z,u,w),T).  [resolve(244,a,230,a)].
Derived: -owns(x,T) | eats(x,T).  [resolve(244,a,231,a)].
Derived: usedToWeight(Pound,T).  [resolve(244,a,234,a)].
Derived: usedToWeight(Ounce,T).  [resolve(244,a,235,a)].
Derived: usedToWeight(Kilogram,T).  [resolve(244,a,236,a)].
Derived: owns(x,T).  [resolve(244,a,239,b)].
245 -apple(x) | fooditem(x).  [resolve(214,b,215,a)].
Derived: -apple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(245,b,230,a)].
Derived: -apple(x) | -owns(y,x) | eats(y,x).  [resolve(245,b,231,a)].
Derived: -apple(x) | usedToWeight(Pound,x).  [resolve(245,b,234,a)].
Derived: -apple(x) | usedToWeight(Ounce,x).  [resolve(245,b,235,a)].
Derived: -apple(x) | usedToWeight(Kilogram,x).  [resolve(245,b,236,a)].
Derived: -apple(x) | owns(y,x).  [resolve(245,b,239,b)].
246 -mango(x) | fooditem(x).  [resolve(216,b,215,a)].
Derived: -mango(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(246,b,230,a)].
Derived: -mango(x) | -owns(y,x) | eats(y,x).  [resolve(246,b,231,a)].
Derived: -mango(x) | usedToWeight(Pound,x).  [resolve(246,b,234,a)].
Derived: -mango(x) | usedToWeight(Ounce,x).  [resolve(246,b,235,a)].
Derived: -mango(x) | usedToWeight(Kilogram,x).  [resolve(246,b,236,a)].
Derived: -mango(x) | owns(y,x).  [resolve(246,b,239,b)].
247 -banana(x) | fooditem(x).  [resolve(217,b,215,a)].
Derived: -banana(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(247,b,230,a)].
Derived: -banana(x) | -owns(y,x) | eats(y,x).  [resolve(247,b,231,a)].
Derived: -banana(x) | usedToWeight(Pound,x).  [resolve(247,b,234,a)].
Derived: -banana(x) | usedToWeight(Ounce,x).  [resolve(247,b,235,a)].
Derived: -banana(x) | usedToWeight(Kilogram,x).  [resolve(247,b,236,a)].
Derived: -banana(x) | owns(y,x).  [resolve(247,b,239,b)].
248 -strawberry(x) | fooditem(x).  [resolve(218,b,215,a)].
Derived: -strawberry(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(248,b,230,a)].
Derived: -strawberry(x) | -owns(y,x) | eats(y,x).  [resolve(248,b,231,a)].
Derived: -strawberry(x) | usedToWeight(Pound,x).  [resolve(248,b,234,a)].
Derived: -strawberry(x) | usedToWeight(Ounce,x).  [resolve(248,b,235,a)].
Derived: -strawberry(x) | usedToWeight(Kilogram,x).  [resolve(248,b,236,a)].
Derived: -strawberry(x) | owns(y,x).  [resolve(248,b,239,b)].
249 -pineapple(x) | fooditem(x).  [resolve(219,b,215,a)].
Derived: -pineapple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(249,b,230,a)].
Derived: -pineapple(x) | -owns(y,x) | eats(y,x).  [resolve(249,b,231,a)].
Derived: -pineapple(x) | usedToWeight(Pound,x).  [resolve(249,b,234,a)].
Derived: -pineapple(x) | usedToWeight(Ounce,x).  [resolve(249,b,235,a)].
Derived: -pineapple(x) | usedToWeight(Kilogram,x).  [resolve(249,b,236,a)].
Derived: -pineapple(x) | owns(y,x).  [resolve(249,b,239,b)].

Eliminating deliver/2

Eliminating make/2

Eliminating scan/3

Eliminating personalitem/1
250 owns(x,y) | -personalitem(y).  [resolve(197,a,199,b)].
251 personalitem(D).  [resolve(154,a,155,a)].

Eliminating piecesPerPound/2

Eliminating eats/2
252 -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(196,b,191,a)].
253 eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(170,a,168,b)].
254 eats(x,B) | vegetarian(x) | -person(x).  [resolve(194,b,191,a)].
255 eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(194,b,193,b)].
256 eats(x,B) | vegan(x) | -person(x).  [resolve(195,b,191,a)].
257 eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(195,b,193,b)].
Derived: nonvegetarian(x) | -person(x) | -dairyproduct(B) | vegan(x) | -person(x).  [resolve(252,a,253,a)].
Derived: nonvegetarian(x) | -person(x) | vegetarian(x) | -person(x).  [resolve(252,a,254,a)].
Derived: nonvegetarian(x) | -person(x) | vegan(x) | -person(x).  [resolve(252,a,256,a)].
258 -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(196,b,193,b)].
259 -owns(f2(x,y,z,u,w),B) | eats(f2(x,y,z,u,w),B).  [resolve(229,a,230,a)].
Derived: -owns(f2(x,y,z,u,w),B) | nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(259,b,252,a)].
260 -owns(x,B) | eats(x,B).  [resolve(229,a,231,a)].
Derived: -owns(x,B) | nonvegetarian(x) | -person(x).  [resolve(260,b,252,a)].
261 -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(232,b,230,a)].
Derived: -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | nonvegetarian(f2(y,z,u,w,v5)) | -person(f2(y,z,u,w,v5)) | -groundbeef(x).  [resolve(261,c,258,a)].
262 -groundbeef(x) | -owns(y,x) | eats(y,x).  [resolve(232,b,231,a)].
Derived: -groundbeef(x) | -owns(y,x) | nonvegetarian(y) | -person(y) | -groundbeef(x).  [resolve(262,c,258,a)].
263 -cabbage(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(240,b,230,a)].
264 -cabbage(x) | -owns(y,x) | eats(y,x).  [resolve(240,b,231,a)].
265 -broccoli(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(241,b,230,a)].
266 -broccoli(x) | -owns(y,x) | eats(y,x).  [resolve(241,b,231,a)].
267 -potato(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(242,b,230,a)].
268 -potato(x) | -owns(y,x) | eats(y,x).  [resolve(242,b,231,a)].
269 -onion(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(243,b,230,a)].
270 -onion(x) | -owns(y,x) | eats(y,x).  [resolve(243,b,231,a)].
271 -owns(f2(x,y,z,u,w),T) | eats(f2(x,y,z,u,w),T).  [resolve(244,a,230,a)].
272 -owns(x,T) | eats(x,T).  [resolve(244,a,231,a)].
273 -apple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(245,b,230,a)].
274 -apple(x) | -owns(y,x) | eats(y,x).  [resolve(245,b,231,a)].
275 -mango(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(246,b,230,a)].
276 -mango(x) | -owns(y,x) | eats(y,x).  [resolve(246,b,231,a)].
277 -banana(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(247,b,230,a)].
278 -banana(x) | -owns(y,x) | eats(y,x).  [resolve(247,b,231,a)].
279 -strawberry(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(248,b,230,a)].
280 -strawberry(x) | -owns(y,x) | eats(y,x).  [resolve(248,b,231,a)].
281 -pineapple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(249,b,230,a)].
282 -pineapple(x) | -owns(y,x) | eats(y,x).  [resolve(249,b,231,a)].

Eliminating sellItems/2

Eliminating paid/4
283 -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(181,a,177,a)].
284 -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(179,a,177,a)].
285 -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
Derived: lessMoney(f2(x,y,z,u,w)) | -bought(f2(x,y,z,u,w),v5,v6,t).  [resolve(283,a,284,b)].
286 -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
Derived: lessMoney(x) | -bought(x,y,z,t).  [resolve(286,a,285,b)].
287 -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(183,a,177,a)].
Derived: moreMoney(x) | -bought(f2(y,z,u,w,v5),v6,x,t).  [resolve(287,a,284,b)].
288 -paid(x,y,z,t) | moreMoney(z).  [resolve(184,a,177,a)].
Derived: moreMoney(x) | -bought(y,z,x,t).  [resolve(288,a,285,b)].

Eliminating owns/2
289 -owns(f2(x,y,z,u,w),B) | nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(259,b,252,a)].
290 -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(185,a,177,a)].
291 -bought(x,y,z,t) | owns(x,y).  [resolve(186,a,177,a)].
292 owns(Shell,x).  [resolve(197,a,198,a)].
293 owns(x,y) | -dairyproducts(y).  [resolve(197,a,201,b)].
294 owns(x,y) | -beverages(y).  [resolve(197,a,202,b)].
295 owns(x,y).  [resolve(197,a,203,a)].
296 -cabbage(x) | owns(y,x).  [resolve(240,b,239,b)].
297 -broccoli(x) | owns(y,x).  [resolve(241,b,239,b)].
298 -potato(x) | owns(y,x).  [resolve(242,b,239,b)].
299 -onion(x) | owns(y,x).  [resolve(243,b,239,b)].
300 owns(x,T).  [resolve(244,a,239,b)].
301 -apple(x) | owns(y,x).  [resolve(245,b,239,b)].
302 -mango(x) | owns(y,x).  [resolve(246,b,239,b)].
303 -banana(x) | owns(y,x).  [resolve(247,b,239,b)].
304 -strawberry(x) | owns(y,x).  [resolve(248,b,239,b)].
305 -pineapple(x) | owns(y,x).  [resolve(249,b,239,b)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -bought(f2(x,y,z,u,w),B,v5,t).  [resolve(289,a,290,b)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -dairyproducts(B).  [resolve(289,a,293,a)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -beverages(B).  [resolve(289,a,294,a)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(289,a,295,a)].
306 -owns(x,B) | nonvegetarian(x) | -person(x).  [resolve(260,b,252,a)].
Derived: nonvegetarian(x) | -person(x) | -bought(x,B,y,t).  [resolve(306,a,291,b)].
Derived: nonvegetarian(Shell) | -person(Shell).  [resolve(306,a,292,a)].
Derived: nonvegetarian(x) | -person(x) | -dairyproducts(B).  [resolve(306,a,293,a)].
Derived: nonvegetarian(x) | -person(x) | -beverages(B).  [resolve(306,a,294,a)].
Derived: nonvegetarian(x) | -person(x).  [resolve(306,a,295,a)].
307 -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | nonvegetarian(f2(y,z,u,w,v5)) | -person(f2(y,z,u,w,v5)) | -groundbeef(x).  [resolve(261,c,258,a)].
308 -groundbeef(x) | -owns(y,x) | nonvegetarian(y) | -person(y) | -groundbeef(x).  [resolve(262,c,258,a)].

Eliminating child/1

Eliminating unit/1

Eliminating usedToWeight/2

Eliminating nonvegetarian/1

Eliminating lessMoney/1

Eliminating moreMoney/1

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ person, see, bought ]).
Function symbol precedence:  function_order([ t, John, Safeway, B, Mary, T ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      309 person(John).  [assumption].
kept:      310 bought(John,T,Safeway,t).  [assumption].
kept:      311 bought(John,B,Safeway,t).  [assumption].
kept:      312 person(Mary).  [assumption].
kept:      313 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
kept:      314 -bought(John,x,Safeway,t).  [resolve(224,b,221,a)].

============================== PROOF =================================

% Proof 1 at 0.02 (+ 0.01) seconds.
% Length of proof is 18.
% Level of proof is 7.
% Maximum clause weight is 5.000.
% Given clauses 0.

4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
26 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
79 bringsMoney(John,Safeway) | brings(John,card,Safeway) | brings(John,cash,Safeway) # label(non_clause) # label(goal).  [goal].
95 customer(x).  [clausify(5)].
99 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
114 item(x).  [clausify(4)].
123 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
135 shop(x).  [clausify(13)].
145 -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
177 time(t).  [assumption].
178 -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
221 -bringsMoney(John,Safeway).  [deny(79)].
224 -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].
311 bought(John,B,Safeway,t).  [assumption].
314 -bought(John,x,Safeway,t).  [resolve(224,b,221,a)].
315 $F.  [resolve(314,a,311,a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=6. Kept=6. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=5, Disabled=337. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=0. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=0. Nonunit_bsub_feature_tests=0.
Megabytes=0.42.
User_CPU=0.02, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 9705 exit (max_proofs) Sun Apr 26 00:48:29 2020



















i.	Does John have less money after going to the supermarket? [Yes] 
>lessMoney(John).


============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 9706 was started by rinkleseth on Rinkles-MacBook-Pro.local,
Sun Apr 26 00:48:47 2020
The command was "/Users/rinkleseth/Downloads/LADR-2009-11A/bin/prover9 -f /Users/rinkleseth/Desktop/spring2020/AI/project/input.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /Users/rinkleseth/Desktop/spring2020/AI/project/input.in


formulas(sos).
(all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))).
(all x (supermarket(x) -> shop(x))).
(all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))).
(all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))).
(all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))).
(all x (customer(x) -> get(x,receipt))).
(all x ((all y supermarket(x)) & item(y) -> deliver(x,y))).
(all x ((exists y shop(x)) & item(y) -> sells(x,y))).
(all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))).
(all x (customer(x) -> adult(x))).
(all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))).
(all x (people(x) & works(x) -> employee(x))).
(all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))).
(all x (fooditem(x) -> item(x))).
(all x (personalitem(x) -> item(x))).
deodorant(D).
(all x (deodorant(x) -> personalitem(x))).
tomato(T).
beef(B).
(all x (beef(x) -> meat(x))).
(all x (lamb(x) -> meat(x))).
(all x (pork(x) -> meat(x))).
(all x (sausage(x) -> meat(x))).
(all x (stew_meat(x) -> meat(x))).
(all x (halal(x) -> meat(x))).
(all x (meat(x) -> fooditem(x))).
(all x (person(x) -> people(x))).
(all x ((all y supermarket(x)) & item(y) -> -make(x,y))).
person(John).
bought(John,T,Safeway,t).
weight(T,2).
weight(B,1).
bought(John,B,Safeway,t).
person(Mary).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))).
money(card).
money(cash).
isa(creditcard,card).
supermarket(Safeway).
supermarket(NBS).
isa(NBS,Safeway).
locatedAt(Safeway,NorthBerkeley).
time(t).
measure(Pound).
measure(Ounce).
measure(Kilogram).
(all x (fooditem(x) & weight(x,1) -> unit(x))).
(all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))).
(all x (tomato(x) -> piecesPerPound(x,5))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))).
(all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))).
(all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))).
(all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))).
(all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))).
(all x (meat(x) -> animalproduct(x))).
(all x (fish(x) -> animalproduct(x))).
(all x (egg(x) -> animalproduct(x))).
(all x (animalproduct(x) -> fooditem(x))).
(all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))).
(all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))).
(all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))).
(all x (groundbeef(x) -> beef(x))).
gas(G).
(all x (gas(x) & sells(Shell,x))).
(all x (adult(x) -> -child(x))).
(all x (child(x) -> -adult(x))).
(all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))).
hasSize(carTrunk,600).
(all x (milk(x) -> dairyproduct(x))).
(all x (cheese(x) -> dairyproduct(x))).
(all x (butter(x) -> dairyproduct(x))).
(all x (fish(x) -> meat(x))).
(all x (vegetable(x) -> fooditem(x))).
(all x (tomato(x) -> vegetable(x))).
(all x (cabbage(x) -> vegetable(x))).
(all x (broccoli(x) -> vegetable(x))).
(all x (potato(x) -> vegetable(x))).
(all x (onion(x) -> vegetable(x))).
(all x (juice(x) -> beverage(x))).
(all x (soda(x) -> beverage(x))).
(all x (alcohol(x) -> beverage(x))).
(all x (water(x) -> beverage(x))).
(all x (tea(x) -> beverage(x))).
(all x (coffee(x) -> beverage(x))).
(all x (fruit(x) -> fooditem(x))).
(all x (apple(x) -> fruit(x))).
(all x (mango(x) -> fruit(x))).
(all x (banana(x) -> fruit(x))).
(all x (strawberry(x) -> fruit(x))).
(all x (pineapple(x) -> fruit(x))).
(all x (lotion(x) -> personalitem(x))).
(all x (hairspray(x) -> personalitem(x))).
(all x (shavingcream(x) -> personalitem(x))).
(all x (cosmetic(x) -> personalitem(x))).
(all x (toothbrush(x) -> personalitem(x))).
(all x (bodywash(x) -> personalitem(x))).
(all x (soap(x) -> personalitem(x))).
end_of_list.

formulas(goals).
lessMoney(John).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x ((exists y supermarket(x)) & (personalitem(y) | fooditem(y) | dairyproducts(y) | beverages(y)) -> sells(x,y))) # label(non_clause).  [assumption].
2 (all x (supermarket(x) -> shop(x))) # label(non_clause).  [assumption].
3 (all x ((exists y exists z supermarket(z)) & item(x) & (customer(y) | employee(y)) -> scan(y,x,z))) # label(non_clause).  [assumption].
4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
6 (all x (customer(x) -> get(x,receipt))) # label(non_clause).  [assumption].
7 (all x ((all y supermarket(x)) & item(y) -> deliver(x,y))) # label(non_clause).  [assumption].
8 (all x ((exists y shop(x)) & item(y) -> sells(x,y))) # label(non_clause).  [assumption].
9 (all x ((exists y exists z exists u time(u)) & shop(z) & item(y) & person(x) & bought(x,y,z,u) -> customer(x))) # label(non_clause).  [assumption].
10 (all x (customer(x) -> adult(x))) # label(non_clause).  [assumption].
11 (all x ((exists y people(x)) & sellItems(x,y) & item(y) -> seller(x))) # label(non_clause).  [assumption].
12 (all x (people(x) & works(x) -> employee(x))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
14 (all x (fooditem(x) -> item(x))) # label(non_clause).  [assumption].
15 (all x (personalitem(x) -> item(x))) # label(non_clause).  [assumption].
16 (all x (deodorant(x) -> personalitem(x))) # label(non_clause).  [assumption].
17 (all x (beef(x) -> meat(x))) # label(non_clause).  [assumption].
18 (all x (lamb(x) -> meat(x))) # label(non_clause).  [assumption].
19 (all x (pork(x) -> meat(x))) # label(non_clause).  [assumption].
20 (all x (sausage(x) -> meat(x))) # label(non_clause).  [assumption].
21 (all x (stew_meat(x) -> meat(x))) # label(non_clause).  [assumption].
22 (all x (halal(x) -> meat(x))) # label(non_clause).  [assumption].
23 (all x (meat(x) -> fooditem(x))) # label(non_clause).  [assumption].
24 (all x (person(x) -> people(x))) # label(non_clause).  [assumption].
25 (all x ((all y supermarket(x)) & item(y) -> -make(x,y))) # label(non_clause).  [assumption].
26 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
27 (all x ((exists z shop(z)) & customer(x) & bringsMoney(x,z) -> (all y brings(x,y,z)) & money(y))) # label(non_clause).  [assumption].
28 (all x (fooditem(x) & weight(x,1) -> unit(x))) # label(non_clause).  [assumption].
29 (all x ((exists y fooditem(x)) & measure(y) -> usedToWeight(y,x))) # label(non_clause).  [assumption].
30 (all x (tomato(x) -> piecesPerPound(x,5))) # label(non_clause).  [assumption].
31 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))) # label(non_clause).  [assumption].
32 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))) # label(non_clause).  [assumption].
33 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> moreMoney(z))) # label(non_clause).  [assumption].
34 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> owns(x,y))) # label(non_clause).  [assumption].
35 (all x ((exists y exists z exists t customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> bringsMoney(x,z))) # label(non_clause).  [assumption].
36 (all x ((exists y customer(x)) & fooditem(y) & owns(x,y) -> eats(x,y))) # label(non_clause).  [assumption].
37 (all x ((all y exists u exists z person(x)) & person(y) & item(u) & shop(z) & bought(x,u,z,t) & bought(y,u,z,t) -> see(x,y) | see(y,x))) # label(non_clause).  [assumption].
38 (all x (meat(x) -> animalproduct(x))) # label(non_clause).  [assumption].
39 (all x (fish(x) -> animalproduct(x))) # label(non_clause).  [assumption].
40 (all x (egg(x) -> animalproduct(x))) # label(non_clause).  [assumption].
41 (all x (animalproduct(x) -> fooditem(x))) # label(non_clause).  [assumption].
42 (all x ((exists y people(x)) & -eats(x,y) & animalproduct(y) -> vegetarian(x))) # label(non_clause).  [assumption].
43 (all x ((exists y people(x)) & -eats(x,y) & (animalproduct(y) | dairyproduct(y)) -> vegan(x))) # label(non_clause).  [assumption].
44 (all x ((exists y people(x)) & eats(x,y) & animalproduct(y) -> nonvegetarian(x))) # label(non_clause).  [assumption].
45 (all x (groundbeef(x) -> beef(x))) # label(non_clause).  [assumption].
46 (all x (gas(x) & sells(Shell,x))) # label(non_clause).  [assumption].
47 (all x (adult(x) -> -child(x))) # label(non_clause).  [assumption].
48 (all x (child(x) -> -adult(x))) # label(non_clause).  [assumption].
49 (all x ((exists y shop(x)) & sells(x,y) & item(y) -> owns(x,y))) # label(non_clause).  [assumption].
50 (all x (milk(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
51 (all x (cheese(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
52 (all x (butter(x) -> dairyproduct(x))) # label(non_clause).  [assumption].
53 (all x (fish(x) -> meat(x))) # label(non_clause).  [assumption].
54 (all x (vegetable(x) -> fooditem(x))) # label(non_clause).  [assumption].
55 (all x (tomato(x) -> vegetable(x))) # label(non_clause).  [assumption].
56 (all x (cabbage(x) -> vegetable(x))) # label(non_clause).  [assumption].
57 (all x (broccoli(x) -> vegetable(x))) # label(non_clause).  [assumption].
58 (all x (potato(x) -> vegetable(x))) # label(non_clause).  [assumption].
59 (all x (onion(x) -> vegetable(x))) # label(non_clause).  [assumption].
60 (all x (juice(x) -> beverage(x))) # label(non_clause).  [assumption].
61 (all x (soda(x) -> beverage(x))) # label(non_clause).  [assumption].
62 (all x (alcohol(x) -> beverage(x))) # label(non_clause).  [assumption].
63 (all x (water(x) -> beverage(x))) # label(non_clause).  [assumption].
64 (all x (tea(x) -> beverage(x))) # label(non_clause).  [assumption].
65 (all x (coffee(x) -> beverage(x))) # label(non_clause).  [assumption].
66 (all x (fruit(x) -> fooditem(x))) # label(non_clause).  [assumption].
67 (all x (apple(x) -> fruit(x))) # label(non_clause).  [assumption].
68 (all x (mango(x) -> fruit(x))) # label(non_clause).  [assumption].
69 (all x (banana(x) -> fruit(x))) # label(non_clause).  [assumption].
70 (all x (strawberry(x) -> fruit(x))) # label(non_clause).  [assumption].
71 (all x (pineapple(x) -> fruit(x))) # label(non_clause).  [assumption].
72 (all x (lotion(x) -> personalitem(x))) # label(non_clause).  [assumption].
73 (all x (hairspray(x) -> personalitem(x))) # label(non_clause).  [assumption].
74 (all x (shavingcream(x) -> personalitem(x))) # label(non_clause).  [assumption].
75 (all x (cosmetic(x) -> personalitem(x))) # label(non_clause).  [assumption].
76 (all x (toothbrush(x) -> personalitem(x))) # label(non_clause).  [assumption].
77 (all x (bodywash(x) -> personalitem(x))) # label(non_clause).  [assumption].
78 (all x (soap(x) -> personalitem(x))) # label(non_clause).  [assumption].
79 lessMoney(John) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
-supermarket(x) | shop(x).  [clausify(2)].
-supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
-supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
customer(f2(x,y,z,u,w)).  [clausify(4)].
supermarket(x).  [clausify(4)].
employee(x).  [clausify(4)].
item(x).  [clausify(4)].
restock(x,y,z).  [clausify(4)].
assist(x,y).  [clausify(4)].
supermarket(f3(x)).  [clausify(5)].
customer(x).  [clausify(5)].
use(x,Cart).  [clausify(5)].
-customer(x) | get(x,receipt).  [clausify(6)].
-supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
-shop(x) | -item(y) | sells(x,y).  [clausify(8)].
-time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
-customer(x) | adult(x).  [clausify(10)].
-people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
-people(x) | -works(x) | employee(x).  [clausify(12)].
shop(x).  [clausify(13)].
has(x,y).  [clausify(13)].
employee(x).  [clausify(13)].
customer(x).  [clausify(13)].
-fooditem(x) | item(x).  [clausify(14)].
-personalitem(x) | item(x).  [clausify(15)].
deodorant(D).  [assumption].
-deodorant(x) | personalitem(x).  [clausify(16)].
tomato(T).  [assumption].
beef(B).  [assumption].
-beef(x) | meat(x).  [clausify(17)].
-lamb(x) | meat(x).  [clausify(18)].
-pork(x) | meat(x).  [clausify(19)].
-sausage(x) | meat(x).  [clausify(20)].
-stew_meat(x) | meat(x).  [clausify(21)].
-halal(x) | meat(x).  [clausify(22)].
-meat(x) | fooditem(x).  [clausify(23)].
-person(x) | people(x).  [clausify(24)].
-supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
person(John).  [assumption].
bought(John,T,Safeway,t).  [assumption].
weight(T,2).  [assumption].
weight(B,1).  [assumption].
bought(John,B,Safeway,t).  [assumption].
person(Mary).  [assumption].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
-shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
money(card).  [assumption].
money(cash).  [assumption].
isa(creditcard,card).  [assumption].
supermarket(Safeway).  [assumption].
supermarket(NBS).  [assumption].
isa(NBS,Safeway).  [assumption].
locatedAt(Safeway,NorthBerkeley).  [assumption].
time(t).  [assumption].
measure(Pound).  [assumption].
measure(Ounce).  [assumption].
measure(Kilogram).  [assumption].
-fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
-fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
-tomato(x) | piecesPerPound(x,5).  [clausify(30)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
-customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
-customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
-person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
-meat(x) | animalproduct(x).  [clausify(38)].
-fish(x) | animalproduct(x).  [clausify(39)].
-egg(x) | animalproduct(x).  [clausify(40)].
-animalproduct(x) | fooditem(x).  [clausify(41)].
-people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
-people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
-people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
-people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
-groundbeef(x) | beef(x).  [clausify(45)].
gas(G).  [assumption].
gas(x).  [clausify(46)].
sells(Shell,x).  [clausify(46)].
-adult(x) | -child(x).  [clausify(47)].
-child(x) | -adult(x).  [clausify(48)].
-shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
hasSize(carTrunk,600).  [assumption].
-milk(x) | dairyproduct(x).  [clausify(50)].
-cheese(x) | dairyproduct(x).  [clausify(51)].
-butter(x) | dairyproduct(x).  [clausify(52)].
-fish(x) | meat(x).  [clausify(53)].
-vegetable(x) | fooditem(x).  [clausify(54)].
-tomato(x) | vegetable(x).  [clausify(55)].
-cabbage(x) | vegetable(x).  [clausify(56)].
-broccoli(x) | vegetable(x).  [clausify(57)].
-potato(x) | vegetable(x).  [clausify(58)].
-onion(x) | vegetable(x).  [clausify(59)].
-juice(x) | beverage(x).  [clausify(60)].
-soda(x) | beverage(x).  [clausify(61)].
-alcohol(x) | beverage(x).  [clausify(62)].
-water(x) | beverage(x).  [clausify(63)].
-tea(x) | beverage(x).  [clausify(64)].
-coffee(x) | beverage(x).  [clausify(65)].
-fruit(x) | fooditem(x).  [clausify(66)].
-apple(x) | fruit(x).  [clausify(67)].
-mango(x) | fruit(x).  [clausify(68)].
-banana(x) | fruit(x).  [clausify(69)].
-strawberry(x) | fruit(x).  [clausify(70)].
-pineapple(x) | fruit(x).  [clausify(71)].
-lotion(x) | personalitem(x).  [clausify(72)].
-hairspray(x) | personalitem(x).  [clausify(73)].
-shavingcream(x) | personalitem(x).  [clausify(74)].
-cosmetic(x) | personalitem(x).  [clausify(75)].
-toothbrush(x) | personalitem(x).  [clausify(76)].
-bodywash(x) | personalitem(x).  [clausify(77)].
-soap(x) | personalitem(x).  [clausify(78)].
-lessMoney(John).  [deny(79)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating supermarket/1
80 supermarket(x).  [clausify(4)].
81 -supermarket(x) | -personalitem(y) | sells(x,y).  [clausify(1)].
82 -supermarket(x) | -fooditem(y) | sells(x,y).  [clausify(1)].
83 -supermarket(x) | -dairyproducts(y) | sells(x,y).  [clausify(1)].
84 -supermarket(x) | -beverages(y) | sells(x,y).  [clausify(1)].
85 -supermarket(x) | shop(x).  [clausify(2)].
86 -supermarket(x) | -item(y) | -customer(z) | scan(z,y,u).  [clausify(3)].
87 -supermarket(x) | -item(y) | -employee(z) | scan(z,y,u).  [clausify(3)].
Derived: -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
Derived: -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
Derived: -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
Derived: -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
Derived: -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
88 supermarket(f3(x)).  [clausify(5)].
89 -supermarket(x) | -item(y) | deliver(x,y).  [clausify(7)].
Derived: -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
90 -supermarket(x) | -item(y) | -make(x,y).  [clausify(25)].
Derived: -item(x) | -make(y,x).  [resolve(90,a,80,a)].
91 supermarket(Safeway).  [assumption].
Derived: shop(Safeway).  [resolve(91,a,85,a)].
92 supermarket(NBS).  [assumption].
Derived: shop(NBS).  [resolve(92,a,85,a)].

Eliminating customer/1
93 -customer(x) | get(x,receipt).  [clausify(6)].
94 customer(f2(x,y,z,u,w)).  [clausify(4)].
95 customer(x).  [clausify(5)].
Derived: get(f2(x,y,z,u,w),receipt).  [resolve(93,a,94,a)].
Derived: get(x,receipt).  [resolve(93,a,95,a)].
96 -time(x) | -shop(y) | -item(z) | -person(u) | -bought(u,z,y,w) | customer(u).  [clausify(9)].
97 -customer(x) | adult(x).  [clausify(10)].
Derived: adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
Derived: adult(x).  [resolve(97,a,95,a)].
98 customer(x).  [clausify(13)].
99 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(26)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
100 -shop(x) | -customer(y) | -bringsMoney(y,z) | brings(y,u,z).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
101 -shop(x) | -customer(y) | -bringsMoney(y,z) | money(u).  [clausify(27)].
Derived: -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
102 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
103 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
104 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | moreMoney(z).  [clausify(33)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
105 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | owns(x,y).  [clausify(34)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
106 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | bringsMoney(x,z).  [clausify(35)].
107 -customer(x) | -fooditem(y) | -owns(x,y) | eats(x,y).  [clausify(36)].
Derived: -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
Derived: -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
108 -item(x) | -customer(y) | scan(y,x,z).  [resolve(80,a,86,a)].
Derived: -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].

Eliminating employee/1
109 -item(x) | -employee(y) | scan(y,x,z).  [resolve(80,a,87,a)].
110 employee(x).  [clausify(4)].
111 -people(x) | -works(x) | employee(x).  [clausify(12)].
112 employee(x).  [clausify(13)].

Eliminating item/1
113 -shop(x) | -item(y) | sells(x,y).  [clausify(8)].
114 item(x).  [clausify(4)].
Derived: -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
115 -people(x) | -sellItems(x,y) | -item(y) | seller(x).  [clausify(11)].
Derived: -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
116 -fooditem(x) | item(x).  [clausify(14)].
117 -personalitem(x) | item(x).  [clausify(15)].
118 -person(x) | -person(y) | -item(z) | -shop(u) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [clausify(37)].
Derived: -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
119 -shop(x) | -sells(x,y) | -item(y) | owns(x,y).  [clausify(49)].
Derived: -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
120 -item(x) | deliver(y,x).  [resolve(89,a,80,a)].
Derived: deliver(x,y).  [resolve(120,a,114,a)].
121 -item(x) | -make(y,x).  [resolve(90,a,80,a)].
Derived: -make(x,y).  [resolve(121,a,114,a)].
122 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | bringsMoney(f2(u,w,v5,v6,v7),y).  [resolve(99,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
123 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | bringsMoney(u,y).  [resolve(99,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
124 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | paid(f2(u,w,v5,v6,v7),x,y,z).  [resolve(102,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
125 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
126 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | lessMoney(f2(u,w,v5,v6,v7)).  [resolve(103,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
127 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
128 -item(x) | -shop(y) | -time(z) | -paid(f2(u,w,v5,v6,v7),x,y,z) | moreMoney(y).  [resolve(104,a,94,a)].
Derived: -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
129 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | moreMoney(y).  [resolve(104,a,95,a)].
Derived: -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
130 -item(x) | -shop(y) | -time(z) | -bought(f2(u,w,v5,v6,v7),x,y,z) | owns(f2(u,w,v5,v6,v7),x).  [resolve(105,a,94,a)].
Derived: -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
131 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | owns(u,x).  [resolve(105,a,95,a)].
Derived: -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
132 -item(x) | scan(f2(y,z,u,w,v5),x,v6).  [resolve(108,b,94,a)].
Derived: scan(f2(x,y,z,u,w),v5,v6).  [resolve(132,a,114,a)].
133 -item(x) | scan(y,x,z).  [resolve(108,b,95,a)].
Derived: scan(x,y,z).  [resolve(133,a,114,a)].

Eliminating restock/3

Eliminating assist/2

Eliminating use/2

Eliminating shop/1
134 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | brings(f2(y,z,u,w,v5),v7,v6).  [resolve(100,b,94,a)].
135 shop(x).  [clausify(13)].
136 shop(Safeway).  [resolve(91,a,85,a)].
137 shop(NBS).  [resolve(92,a,85,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
138 -shop(x) | -bringsMoney(y,z) | brings(y,u,z).  [resolve(100,b,95,a)].
Derived: -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
139 -shop(x) | -bringsMoney(f2(y,z,u,w,v5),v6) | money(v7).  [resolve(101,b,94,a)].
Derived: -bringsMoney(f2(x,y,z,u,w),v5) | money(v6).  [resolve(139,a,135,a)].
140 -shop(x) | -bringsMoney(y,z) | money(u).  [resolve(101,b,95,a)].
Derived: -bringsMoney(x,y) | money(z).  [resolve(140,a,135,a)].
141 -shop(x) | sells(x,y).  [resolve(113,b,114,a)].
Derived: sells(x,y).  [resolve(141,a,135,a)].
142 -person(x) | -person(y) | -shop(z) | -bought(x,u,z,t) | -bought(y,u,z,t) | see(x,y) | see(y,x).  [resolve(118,c,114,a)].
Derived: -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
143 -shop(x) | -sells(x,y) | owns(x,y).  [resolve(119,c,114,a)].
Derived: -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
144 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | bringsMoney(f2(z,u,w,v5,v6),x).  [resolve(122,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
145 -shop(x) | -time(y) | -bought(z,u,x,y) | bringsMoney(z,x).  [resolve(123,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
146 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | paid(f2(z,u,w,v5,v6),v7,x,y).  [resolve(124,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
147 -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
148 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | lessMoney(f2(z,u,w,v5,v6)).  [resolve(126,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
149 -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
150 -shop(x) | -time(y) | -paid(f2(z,u,w,v5,v6),v7,x,y) | moreMoney(x).  [resolve(128,a,114,a)].
Derived: -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
151 -shop(x) | -time(y) | -paid(z,u,x,y) | moreMoney(x).  [resolve(129,a,114,a)].
Derived: -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
152 -shop(x) | -time(y) | -bought(f2(z,u,w,v5,v6),v7,x,y) | owns(f2(z,u,w,v5,v6),v7).  [resolve(130,a,114,a)].
Derived: -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
153 -shop(x) | -time(y) | -bought(z,u,x,y) | owns(z,u).  [resolve(131,a,114,a)].
Derived: -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].

Eliminating has/2

Eliminating deodorant/1
154 -deodorant(x) | personalitem(x).  [clausify(16)].
155 deodorant(D).  [assumption].
Derived: personalitem(D).  [resolve(154,a,155,a)].

Eliminating tomato/1
156 -tomato(x) | piecesPerPound(x,5).  [clausify(30)].
157 tomato(T).  [assumption].
Derived: piecesPerPound(T,5).  [resolve(156,a,157,a)].
158 -tomato(x) | vegetable(x).  [clausify(55)].
Derived: vegetable(T).  [resolve(158,a,157,a)].

Eliminating beef/1
159 -beef(x) | meat(x).  [clausify(17)].
160 beef(B).  [assumption].
Derived: meat(B).  [resolve(159,a,160,a)].
161 -groundbeef(x) | beef(x).  [clausify(45)].
Derived: -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].

Eliminating lamb/1

Eliminating pork/1

Eliminating sausage/1

Eliminating stew_meat/1

Eliminating halal/1

Eliminating meat/1
162 -fish(x) | meat(x).  [clausify(53)].
163 -meat(x) | fooditem(x).  [clausify(23)].
164 -meat(x) | animalproduct(x).  [clausify(38)].
Derived: -fish(x) | fooditem(x).  [resolve(162,b,163,a)].
Derived: -fish(x) | animalproduct(x).  [resolve(162,b,164,a)].
165 meat(B).  [resolve(159,a,160,a)].
Derived: fooditem(B).  [resolve(165,a,163,a)].
Derived: animalproduct(B).  [resolve(165,a,164,a)].
166 -groundbeef(x) | meat(x).  [resolve(161,b,159,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(166,b,163,a)].
Derived: -groundbeef(x) | animalproduct(x).  [resolve(166,b,164,a)].

Eliminating people/1
167 -people(x) | eats(x,y) | -animalproduct(y) | vegetarian(x).  [clausify(42)].
168 -person(x) | people(x).  [clausify(24)].
Derived: eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(167,a,168,b)].
169 -people(x) | eats(x,y) | -animalproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(169,a,168,b)].
170 -people(x) | eats(x,y) | -dairyproduct(y) | vegan(x).  [clausify(43)].
Derived: eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(170,a,168,b)].
171 -people(x) | -eats(x,y) | -animalproduct(y) | nonvegetarian(x).  [clausify(44)].
Derived: -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(171,a,168,b)].
172 -people(x) | -sellItems(x,y) | seller(x).  [resolve(115,c,114,a)].
Derived: -sellItems(x,y) | seller(x) | -person(x).  [resolve(172,a,168,b)].

Eliminating weight/2
173 -fooditem(x) | -weight(x,1) | unit(x).  [clausify(28)].
174 weight(T,2).  [assumption].
175 weight(B,1).  [assumption].
Derived: -fooditem(B) | unit(B).  [resolve(173,b,175,a)].

Eliminating money/1

Eliminating isa/2

Eliminating locatedAt/2

Eliminating time/1
176 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | bringsMoney(f2(y,z,u,w,v5),v7).  [resolve(144,a,135,a)].
177 time(t).  [assumption].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(176,a,177,a)].
178 -time(x) | -bought(y,z,u,x) | bringsMoney(y,u).  [resolve(145,a,135,a)].
Derived: -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].
179 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | paid(f2(y,z,u,w,v5),v6,v7,x).  [resolve(146,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(179,a,177,a)].
180 -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
Derived: -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
181 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | lessMoney(f2(y,z,u,w,v5)).  [resolve(148,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(181,a,177,a)].
182 -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
Derived: -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
183 -time(x) | -paid(f2(y,z,u,w,v5),v6,v7,x) | moreMoney(v7).  [resolve(150,a,135,a)].
Derived: -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(183,a,177,a)].
184 -time(x) | -paid(y,z,u,x) | moreMoney(u).  [resolve(151,a,135,a)].
Derived: -paid(x,y,z,t) | moreMoney(z).  [resolve(184,a,177,a)].
185 -time(x) | -bought(f2(y,z,u,w,v5),v6,v7,x) | owns(f2(y,z,u,w,v5),v6).  [resolve(152,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(185,a,177,a)].
186 -time(x) | -bought(y,z,u,x) | owns(y,z).  [resolve(153,a,135,a)].
Derived: -bought(x,y,z,t) | owns(x,y).  [resolve(186,a,177,a)].

Eliminating measure/1
187 -fooditem(x) | -measure(y) | usedToWeight(y,x).  [clausify(29)].
188 measure(Pound).  [assumption].
189 measure(Ounce).  [assumption].
190 measure(Kilogram).  [assumption].
Derived: -fooditem(x) | usedToWeight(Pound,x).  [resolve(187,b,188,a)].
Derived: -fooditem(x) | usedToWeight(Ounce,x).  [resolve(187,b,189,a)].
Derived: -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(187,b,190,a)].

Eliminating fish/1

Eliminating egg/1

Eliminating animalproduct/1
191 animalproduct(B).  [resolve(165,a,164,a)].
192 -animalproduct(x) | fooditem(x).  [clausify(41)].
Derived: fooditem(B).  [resolve(191,a,192,a)].
193 -groundbeef(x) | animalproduct(x).  [resolve(166,b,164,a)].
Derived: -groundbeef(x) | fooditem(x).  [resolve(193,b,192,a)].
194 eats(x,y) | -animalproduct(y) | vegetarian(x) | -person(x).  [resolve(167,a,168,b)].
Derived: eats(x,B) | vegetarian(x) | -person(x).  [resolve(194,b,191,a)].
Derived: eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(194,b,193,b)].
195 eats(x,y) | -animalproduct(y) | vegan(x) | -person(x).  [resolve(169,a,168,b)].
Derived: eats(x,B) | vegan(x) | -person(x).  [resolve(195,b,191,a)].
Derived: eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(195,b,193,b)].
196 -eats(x,y) | -animalproduct(y) | nonvegetarian(x) | -person(x).  [resolve(171,a,168,b)].
Derived: -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(196,b,191,a)].
Derived: -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(196,b,193,b)].

Eliminating gas/1

Eliminating sells/2
197 -sells(x,y) | owns(x,y).  [resolve(143,a,135,a)].
198 sells(Shell,x).  [clausify(46)].
199 -personalitem(x) | sells(y,x).  [resolve(80,a,81,a)].
200 -fooditem(x) | sells(y,x).  [resolve(80,a,82,a)].
201 -dairyproducts(x) | sells(y,x).  [resolve(80,a,83,a)].
202 -beverages(x) | sells(y,x).  [resolve(80,a,84,a)].
203 sells(x,y).  [resolve(141,a,135,a)].
Derived: owns(Shell,x).  [resolve(197,a,198,a)].
Derived: owns(x,y) | -personalitem(y).  [resolve(197,a,199,b)].
Derived: owns(x,y) | -fooditem(y).  [resolve(197,a,200,b)].
Derived: owns(x,y) | -dairyproducts(y).  [resolve(197,a,201,b)].
Derived: owns(x,y) | -beverages(y).  [resolve(197,a,202,b)].
Derived: owns(x,y).  [resolve(197,a,203,a)].

Eliminating adult/1
204 adult(f2(x,y,z,u,w)).  [resolve(97,a,94,a)].
205 -adult(x) | -child(x).  [clausify(47)].
206 -child(x) | -adult(x).  [clausify(48)].
Derived: -child(f2(x,y,z,u,w)).  [resolve(204,a,205,a)].
207 adult(x).  [resolve(97,a,95,a)].
Derived: -child(x).  [resolve(207,a,205,a)].

Eliminating hasSize/2

Eliminating milk/1

Eliminating cheese/1

Eliminating butter/1

Eliminating vegetable/1
208 -cabbage(x) | vegetable(x).  [clausify(56)].
209 -vegetable(x) | fooditem(x).  [clausify(54)].
Derived: -cabbage(x) | fooditem(x).  [resolve(208,b,209,a)].
210 -broccoli(x) | vegetable(x).  [clausify(57)].
Derived: -broccoli(x) | fooditem(x).  [resolve(210,b,209,a)].
211 -potato(x) | vegetable(x).  [clausify(58)].
Derived: -potato(x) | fooditem(x).  [resolve(211,b,209,a)].
212 -onion(x) | vegetable(x).  [clausify(59)].
Derived: -onion(x) | fooditem(x).  [resolve(212,b,209,a)].
213 vegetable(T).  [resolve(158,a,157,a)].
Derived: fooditem(T).  [resolve(213,a,209,a)].

Eliminating juice/1

Eliminating soda/1

Eliminating alcohol/1

Eliminating water/1

Eliminating tea/1

Eliminating coffee/1

Eliminating fruit/1
214 -apple(x) | fruit(x).  [clausify(67)].
215 -fruit(x) | fooditem(x).  [clausify(66)].
Derived: -apple(x) | fooditem(x).  [resolve(214,b,215,a)].
216 -mango(x) | fruit(x).  [clausify(68)].
Derived: -mango(x) | fooditem(x).  [resolve(216,b,215,a)].
217 -banana(x) | fruit(x).  [clausify(69)].
Derived: -banana(x) | fooditem(x).  [resolve(217,b,215,a)].
218 -strawberry(x) | fruit(x).  [clausify(70)].
Derived: -strawberry(x) | fooditem(x).  [resolve(218,b,215,a)].
219 -pineapple(x) | fruit(x).  [clausify(71)].
Derived: -pineapple(x) | fooditem(x).  [resolve(219,b,215,a)].

Eliminating lotion/1

Eliminating hairspray/1

Eliminating shavingcream/1

Eliminating cosmetic/1

Eliminating toothbrush/1

Eliminating bodywash/1

Eliminating soap/1

Eliminating lessMoney/1
220 -paid(f2(x,y,z,u,w),v5,v6,t) | lessMoney(f2(x,y,z,u,w)).  [resolve(181,a,177,a)].
221 -lessMoney(John).  [deny(79)].
222 -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
Derived: -paid(John,x,y,t).  [resolve(222,b,221,a)].

Eliminating get/2

Eliminating fooditem/1
223 fooditem(B).  [resolve(165,a,163,a)].
224 -fooditem(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(107,a,94,a)].
225 -fooditem(x) | -owns(y,x) | eats(y,x).  [resolve(107,a,95,a)].
Derived: -owns(f2(x,y,z,u,w),B) | eats(f2(x,y,z,u,w),B).  [resolve(223,a,224,a)].
Derived: -owns(x,B) | eats(x,B).  [resolve(223,a,225,a)].
226 -groundbeef(x) | fooditem(x).  [resolve(166,b,163,a)].
Derived: -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(226,b,224,a)].
Derived: -groundbeef(x) | -owns(y,x) | eats(y,x).  [resolve(226,b,225,a)].
227 -fooditem(B) | unit(B).  [resolve(173,b,175,a)].
Derived: unit(B).  [resolve(227,a,223,a)].
228 -fooditem(x) | usedToWeight(Pound,x).  [resolve(187,b,188,a)].
Derived: usedToWeight(Pound,B).  [resolve(228,a,223,a)].
Derived: usedToWeight(Pound,x) | -groundbeef(x).  [resolve(228,a,226,b)].
229 -fooditem(x) | usedToWeight(Ounce,x).  [resolve(187,b,189,a)].
Derived: usedToWeight(Ounce,B).  [resolve(229,a,223,a)].
Derived: usedToWeight(Ounce,x) | -groundbeef(x).  [resolve(229,a,226,b)].
230 -fooditem(x) | usedToWeight(Kilogram,x).  [resolve(187,b,190,a)].
Derived: usedToWeight(Kilogram,B).  [resolve(230,a,223,a)].
Derived: usedToWeight(Kilogram,x) | -groundbeef(x).  [resolve(230,a,226,b)].
231 fooditem(B).  [resolve(191,a,192,a)].
232 -groundbeef(x) | fooditem(x).  [resolve(193,b,192,a)].
233 owns(x,y) | -fooditem(y).  [resolve(197,a,200,b)].
234 -cabbage(x) | fooditem(x).  [resolve(208,b,209,a)].
Derived: -cabbage(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(234,b,224,a)].
Derived: -cabbage(x) | -owns(y,x) | eats(y,x).  [resolve(234,b,225,a)].
Derived: -cabbage(x) | usedToWeight(Pound,x).  [resolve(234,b,228,a)].
Derived: -cabbage(x) | usedToWeight(Ounce,x).  [resolve(234,b,229,a)].
Derived: -cabbage(x) | usedToWeight(Kilogram,x).  [resolve(234,b,230,a)].
Derived: -cabbage(x) | owns(y,x).  [resolve(234,b,233,b)].
235 -broccoli(x) | fooditem(x).  [resolve(210,b,209,a)].
Derived: -broccoli(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(235,b,224,a)].
Derived: -broccoli(x) | -owns(y,x) | eats(y,x).  [resolve(235,b,225,a)].
Derived: -broccoli(x) | usedToWeight(Pound,x).  [resolve(235,b,228,a)].
Derived: -broccoli(x) | usedToWeight(Ounce,x).  [resolve(235,b,229,a)].
Derived: -broccoli(x) | usedToWeight(Kilogram,x).  [resolve(235,b,230,a)].
Derived: -broccoli(x) | owns(y,x).  [resolve(235,b,233,b)].
236 -potato(x) | fooditem(x).  [resolve(211,b,209,a)].
Derived: -potato(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(236,b,224,a)].
Derived: -potato(x) | -owns(y,x) | eats(y,x).  [resolve(236,b,225,a)].
Derived: -potato(x) | usedToWeight(Pound,x).  [resolve(236,b,228,a)].
Derived: -potato(x) | usedToWeight(Ounce,x).  [resolve(236,b,229,a)].
Derived: -potato(x) | usedToWeight(Kilogram,x).  [resolve(236,b,230,a)].
Derived: -potato(x) | owns(y,x).  [resolve(236,b,233,b)].
237 -onion(x) | fooditem(x).  [resolve(212,b,209,a)].
Derived: -onion(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(237,b,224,a)].
Derived: -onion(x) | -owns(y,x) | eats(y,x).  [resolve(237,b,225,a)].
Derived: -onion(x) | usedToWeight(Pound,x).  [resolve(237,b,228,a)].
Derived: -onion(x) | usedToWeight(Ounce,x).  [resolve(237,b,229,a)].
Derived: -onion(x) | usedToWeight(Kilogram,x).  [resolve(237,b,230,a)].
Derived: -onion(x) | owns(y,x).  [resolve(237,b,233,b)].
238 fooditem(T).  [resolve(213,a,209,a)].
Derived: -owns(f2(x,y,z,u,w),T) | eats(f2(x,y,z,u,w),T).  [resolve(238,a,224,a)].
Derived: -owns(x,T) | eats(x,T).  [resolve(238,a,225,a)].
Derived: usedToWeight(Pound,T).  [resolve(238,a,228,a)].
Derived: usedToWeight(Ounce,T).  [resolve(238,a,229,a)].
Derived: usedToWeight(Kilogram,T).  [resolve(238,a,230,a)].
Derived: owns(x,T).  [resolve(238,a,233,b)].
239 -apple(x) | fooditem(x).  [resolve(214,b,215,a)].
Derived: -apple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(239,b,224,a)].
Derived: -apple(x) | -owns(y,x) | eats(y,x).  [resolve(239,b,225,a)].
Derived: -apple(x) | usedToWeight(Pound,x).  [resolve(239,b,228,a)].
Derived: -apple(x) | usedToWeight(Ounce,x).  [resolve(239,b,229,a)].
Derived: -apple(x) | usedToWeight(Kilogram,x).  [resolve(239,b,230,a)].
Derived: -apple(x) | owns(y,x).  [resolve(239,b,233,b)].
240 -mango(x) | fooditem(x).  [resolve(216,b,215,a)].
Derived: -mango(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(240,b,224,a)].
Derived: -mango(x) | -owns(y,x) | eats(y,x).  [resolve(240,b,225,a)].
Derived: -mango(x) | usedToWeight(Pound,x).  [resolve(240,b,228,a)].
Derived: -mango(x) | usedToWeight(Ounce,x).  [resolve(240,b,229,a)].
Derived: -mango(x) | usedToWeight(Kilogram,x).  [resolve(240,b,230,a)].
Derived: -mango(x) | owns(y,x).  [resolve(240,b,233,b)].
241 -banana(x) | fooditem(x).  [resolve(217,b,215,a)].
Derived: -banana(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(241,b,224,a)].
Derived: -banana(x) | -owns(y,x) | eats(y,x).  [resolve(241,b,225,a)].
Derived: -banana(x) | usedToWeight(Pound,x).  [resolve(241,b,228,a)].
Derived: -banana(x) | usedToWeight(Ounce,x).  [resolve(241,b,229,a)].
Derived: -banana(x) | usedToWeight(Kilogram,x).  [resolve(241,b,230,a)].
Derived: -banana(x) | owns(y,x).  [resolve(241,b,233,b)].
242 -strawberry(x) | fooditem(x).  [resolve(218,b,215,a)].
Derived: -strawberry(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(242,b,224,a)].
Derived: -strawberry(x) | -owns(y,x) | eats(y,x).  [resolve(242,b,225,a)].
Derived: -strawberry(x) | usedToWeight(Pound,x).  [resolve(242,b,228,a)].
Derived: -strawberry(x) | usedToWeight(Ounce,x).  [resolve(242,b,229,a)].
Derived: -strawberry(x) | usedToWeight(Kilogram,x).  [resolve(242,b,230,a)].
Derived: -strawberry(x) | owns(y,x).  [resolve(242,b,233,b)].
243 -pineapple(x) | fooditem(x).  [resolve(219,b,215,a)].
Derived: -pineapple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(243,b,224,a)].
Derived: -pineapple(x) | -owns(y,x) | eats(y,x).  [resolve(243,b,225,a)].
Derived: -pineapple(x) | usedToWeight(Pound,x).  [resolve(243,b,228,a)].
Derived: -pineapple(x) | usedToWeight(Ounce,x).  [resolve(243,b,229,a)].
Derived: -pineapple(x) | usedToWeight(Kilogram,x).  [resolve(243,b,230,a)].
Derived: -pineapple(x) | owns(y,x).  [resolve(243,b,233,b)].

Eliminating deliver/2

Eliminating make/2

Eliminating scan/3

Eliminating bringsMoney/2
244 -bought(f2(x,y,z,u,w),v5,v6,t) | bringsMoney(f2(x,y,z,u,w),v6).  [resolve(176,a,177,a)].
245 -bringsMoney(f2(x,y,z,u,w),v5) | brings(f2(x,y,z,u,w),v6,v5).  [resolve(134,a,135,a)].
246 -bringsMoney(x,y) | brings(x,z,y).  [resolve(138,a,135,a)].
Derived: -bought(f2(x,y,z,u,w),v5,v6,t) | brings(f2(x,y,z,u,w),v7,v6).  [resolve(244,b,245,a)].
247 -bought(x,y,z,t) | bringsMoney(x,z).  [resolve(178,a,177,a)].
Derived: -bought(x,y,z,t) | brings(x,u,z).  [resolve(247,b,246,a)].

Eliminating personalitem/1
248 owns(x,y) | -personalitem(y).  [resolve(197,a,199,b)].
249 personalitem(D).  [resolve(154,a,155,a)].

Eliminating piecesPerPound/2

Eliminating eats/2
250 -eats(x,B) | nonvegetarian(x) | -person(x).  [resolve(196,b,191,a)].
251 eats(x,y) | -dairyproduct(y) | vegan(x) | -person(x).  [resolve(170,a,168,b)].
252 eats(x,B) | vegetarian(x) | -person(x).  [resolve(194,b,191,a)].
253 eats(x,y) | vegetarian(x) | -person(x) | -groundbeef(y).  [resolve(194,b,193,b)].
254 eats(x,B) | vegan(x) | -person(x).  [resolve(195,b,191,a)].
255 eats(x,y) | vegan(x) | -person(x) | -groundbeef(y).  [resolve(195,b,193,b)].
Derived: nonvegetarian(x) | -person(x) | -dairyproduct(B) | vegan(x) | -person(x).  [resolve(250,a,251,a)].
Derived: nonvegetarian(x) | -person(x) | vegetarian(x) | -person(x).  [resolve(250,a,252,a)].
Derived: nonvegetarian(x) | -person(x) | vegan(x) | -person(x).  [resolve(250,a,254,a)].
256 -eats(x,y) | nonvegetarian(x) | -person(x) | -groundbeef(y).  [resolve(196,b,193,b)].
257 -owns(f2(x,y,z,u,w),B) | eats(f2(x,y,z,u,w),B).  [resolve(223,a,224,a)].
Derived: -owns(f2(x,y,z,u,w),B) | nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(257,b,250,a)].
258 -owns(x,B) | eats(x,B).  [resolve(223,a,225,a)].
Derived: -owns(x,B) | nonvegetarian(x) | -person(x).  [resolve(258,b,250,a)].
259 -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(226,b,224,a)].
Derived: -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | nonvegetarian(f2(y,z,u,w,v5)) | -person(f2(y,z,u,w,v5)) | -groundbeef(x).  [resolve(259,c,256,a)].
260 -groundbeef(x) | -owns(y,x) | eats(y,x).  [resolve(226,b,225,a)].
Derived: -groundbeef(x) | -owns(y,x) | nonvegetarian(y) | -person(y) | -groundbeef(x).  [resolve(260,c,256,a)].
261 -cabbage(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(234,b,224,a)].
262 -cabbage(x) | -owns(y,x) | eats(y,x).  [resolve(234,b,225,a)].
263 -broccoli(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(235,b,224,a)].
264 -broccoli(x) | -owns(y,x) | eats(y,x).  [resolve(235,b,225,a)].
265 -potato(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(236,b,224,a)].
266 -potato(x) | -owns(y,x) | eats(y,x).  [resolve(236,b,225,a)].
267 -onion(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(237,b,224,a)].
268 -onion(x) | -owns(y,x) | eats(y,x).  [resolve(237,b,225,a)].
269 -owns(f2(x,y,z,u,w),T) | eats(f2(x,y,z,u,w),T).  [resolve(238,a,224,a)].
270 -owns(x,T) | eats(x,T).  [resolve(238,a,225,a)].
271 -apple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(239,b,224,a)].
272 -apple(x) | -owns(y,x) | eats(y,x).  [resolve(239,b,225,a)].
273 -mango(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(240,b,224,a)].
274 -mango(x) | -owns(y,x) | eats(y,x).  [resolve(240,b,225,a)].
275 -banana(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(241,b,224,a)].
276 -banana(x) | -owns(y,x) | eats(y,x).  [resolve(241,b,225,a)].
277 -strawberry(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(242,b,224,a)].
278 -strawberry(x) | -owns(y,x) | eats(y,x).  [resolve(242,b,225,a)].
279 -pineapple(x) | -owns(f2(y,z,u,w,v5),x) | eats(f2(y,z,u,w,v5),x).  [resolve(243,b,224,a)].
280 -pineapple(x) | -owns(y,x) | eats(y,x).  [resolve(243,b,225,a)].

Eliminating sellItems/2

Eliminating paid/4
281 -paid(f2(x,y,z,u,w),v5,v6,t) | moreMoney(v6).  [resolve(183,a,177,a)].
282 -bought(f2(x,y,z,u,w),v5,v6,t) | paid(f2(x,y,z,u,w),v5,v6,t).  [resolve(179,a,177,a)].
283 -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
Derived: moreMoney(x) | -bought(f2(y,z,u,w,v5),v6,x,t).  [resolve(281,a,282,b)].
284 -paid(x,y,z,t) | moreMoney(z).  [resolve(184,a,177,a)].
Derived: moreMoney(x) | -bought(y,z,x,t).  [resolve(284,a,283,b)].
285 -paid(John,x,y,t).  [resolve(222,b,221,a)].
Derived: -bought(John,x,y,t).  [resolve(285,a,283,b)].

Eliminating owns/2
286 -owns(f2(x,y,z,u,w),B) | nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(257,b,250,a)].
287 -bought(f2(x,y,z,u,w),v5,v6,t) | owns(f2(x,y,z,u,w),v5).  [resolve(185,a,177,a)].
288 -bought(x,y,z,t) | owns(x,y).  [resolve(186,a,177,a)].
289 owns(Shell,x).  [resolve(197,a,198,a)].
290 owns(x,y) | -dairyproducts(y).  [resolve(197,a,201,b)].
291 owns(x,y) | -beverages(y).  [resolve(197,a,202,b)].
292 owns(x,y).  [resolve(197,a,203,a)].
293 -cabbage(x) | owns(y,x).  [resolve(234,b,233,b)].
294 -broccoli(x) | owns(y,x).  [resolve(235,b,233,b)].
295 -potato(x) | owns(y,x).  [resolve(236,b,233,b)].
296 -onion(x) | owns(y,x).  [resolve(237,b,233,b)].
297 owns(x,T).  [resolve(238,a,233,b)].
298 -apple(x) | owns(y,x).  [resolve(239,b,233,b)].
299 -mango(x) | owns(y,x).  [resolve(240,b,233,b)].
300 -banana(x) | owns(y,x).  [resolve(241,b,233,b)].
301 -strawberry(x) | owns(y,x).  [resolve(242,b,233,b)].
302 -pineapple(x) | owns(y,x).  [resolve(243,b,233,b)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -bought(f2(x,y,z,u,w),B,v5,t).  [resolve(286,a,287,b)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -dairyproducts(B).  [resolve(286,a,290,a)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)) | -beverages(B).  [resolve(286,a,291,a)].
Derived: nonvegetarian(f2(x,y,z,u,w)) | -person(f2(x,y,z,u,w)).  [resolve(286,a,292,a)].
303 -owns(x,B) | nonvegetarian(x) | -person(x).  [resolve(258,b,250,a)].
Derived: nonvegetarian(x) | -person(x) | -bought(x,B,y,t).  [resolve(303,a,288,b)].
Derived: nonvegetarian(Shell) | -person(Shell).  [resolve(303,a,289,a)].
Derived: nonvegetarian(x) | -person(x) | -dairyproducts(B).  [resolve(303,a,290,a)].
Derived: nonvegetarian(x) | -person(x) | -beverages(B).  [resolve(303,a,291,a)].
Derived: nonvegetarian(x) | -person(x).  [resolve(303,a,292,a)].
304 -groundbeef(x) | -owns(f2(y,z,u,w,v5),x) | nonvegetarian(f2(y,z,u,w,v5)) | -person(f2(y,z,u,w,v5)) | -groundbeef(x).  [resolve(259,c,256,a)].
305 -groundbeef(x) | -owns(y,x) | nonvegetarian(y) | -person(y) | -groundbeef(x).  [resolve(260,c,256,a)].

Eliminating child/1

Eliminating unit/1

Eliminating usedToWeight/2

Eliminating brings/3

Eliminating nonvegetarian/1

Eliminating moreMoney/1

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ person, see, bought ]).
Function symbol precedence:  function_order([ t, John, Safeway, B, Mary, T ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      306 person(John).  [assumption].
kept:      307 bought(John,T,Safeway,t).  [assumption].
kept:      308 bought(John,B,Safeway,t).  [assumption].
kept:      309 person(Mary).  [assumption].
kept:      310 -person(x) | -person(y) | -bought(x,z,u,t) | -bought(y,z,u,t) | see(x,y) | see(y,x).  [resolve(142,c,135,a)].
kept:      311 -bought(John,x,y,t).  [resolve(285,a,283,b)].

============================== PROOF =================================

% Proof 1 at 0.02 (+ 0.01) seconds.
% Length of proof is 25.
% Level of proof is 8.
% Maximum clause weight is 5.000.
% Given clauses 0.

4 (all x ((exists y all z exists u customer(u)) & supermarket(x) & employee(y) & item(z) & restock(y,z,x) & assist(y,u))) # label(non_clause).  [assumption].
5 (all x ((exists z supermarket(z)) & customer(x) & use(x,Cart))) # label(non_clause).  [assumption].
13 (all x ((exists y shop(x)) & has(x,y) & employee(y) & customer(y))) # label(non_clause).  [assumption].
31 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & bought(x,y,z,u) -> paid(x,y,z,u))) # label(non_clause).  [assumption].
32 (all x ((exists y exists z exists u customer(x)) & item(y) & shop(z) & time(u) & paid(x,y,z,u) -> lessMoney(x))) # label(non_clause).  [assumption].
79 lessMoney(John) # label(non_clause) # label(goal).  [goal].
95 customer(x).  [clausify(5)].
102 -customer(x) | -item(y) | -shop(z) | -time(u) | -bought(x,y,z,u) | paid(x,y,z,u).  [clausify(31)].
103 -customer(x) | -item(y) | -shop(z) | -time(u) | -paid(x,y,z,u) | lessMoney(x).  [clausify(32)].
114 item(x).  [clausify(4)].
125 -item(x) | -shop(y) | -time(z) | -bought(u,x,y,z) | paid(u,x,y,z).  [resolve(102,a,95,a)].
127 -item(x) | -shop(y) | -time(z) | -paid(u,x,y,z) | lessMoney(u).  [resolve(103,a,95,a)].
135 shop(x).  [clausify(13)].
147 -shop(x) | -time(y) | -bought(z,u,x,y) | paid(z,u,x,y).  [resolve(125,a,114,a)].
149 -shop(x) | -time(y) | -paid(z,u,x,y) | lessMoney(z).  [resolve(127,a,114,a)].
177 time(t).  [assumption].
180 -time(x) | -bought(y,z,u,x) | paid(y,z,u,x).  [resolve(147,a,135,a)].
182 -time(x) | -paid(y,z,u,x) | lessMoney(y).  [resolve(149,a,135,a)].
221 -lessMoney(John).  [deny(79)].
222 -paid(x,y,z,t) | lessMoney(x).  [resolve(182,a,177,a)].
283 -bought(x,y,z,t) | paid(x,y,z,t).  [resolve(180,a,177,a)].
285 -paid(John,x,y,t).  [resolve(222,b,221,a)].
308 bought(John,B,Safeway,t).  [assumption].
311 -bought(John,x,y,t).  [resolve(285,a,283,b)].
312 $F.  [resolve(311,a,308,a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=6. Kept=6. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=5, Disabled=334. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=0. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=0. Nonunit_bsub_feature_tests=0.
Megabytes=0.42.
User_CPU=0.02, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 9706 exit (max_proofs) Sun Apr 26 00:48:47 2020

